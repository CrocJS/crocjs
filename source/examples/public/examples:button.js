require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({113:[function(require,module,exports){

},{}],"_packageViews":[function(require,module,exports){
module.exports=require('4');
},{}],4:[function(require,module,exports){
/*DERBY_SERIALIZED_VIEWS*/module.exports = function(derbyTemplates, views) {var expressions = derbyTemplates.expressions;var templates = derbyTemplates.templates;views.register('TitleElement', '<title><view name="{{$render.prefix}}Title"></view></title>').template = new templates.Template([new templates.Element('title', void 0, [new templates.Block(new templates.Template([new templates.DynamicText(new expressions.PathExpression(['$render', 'prefix'], new expressions.ExpressionMeta('$render.prefix'))), new templates.Text('Title')]), [new templates.DynamicViewInstance(new templates.Template([new templates.DynamicText(new expressions.PathExpression(['$render', 'prefix'], new expressions.ExpressionMeta('$render.prefix'))), new templates.Text('Title')]), {})])], void 0, false)]);views.register('BodyElement', '<body class="{{$bodyClass($render.ns)}}"><view name="{{$render.prefix}}Body"></view><view name="{{$render.prefix}}BodyServer" optional></view></body>').template = new templates.Template([new templates.Element('body', {'class': new templates.DynamicAttribute(new expressions.FnExpression(['$bodyClass'], [new expressions.PathExpression(['$render', 'ns'])], void 0, new expressions.ExpressionMeta('$bodyClass($render.ns)')))}, [new templates.Block(new templates.Template([new templates.DynamicText(new expressions.PathExpression(['$render', 'prefix'], new expressions.ExpressionMeta('$render.prefix'))), new templates.Text('Body')]), [new templates.DynamicViewInstance(new templates.Template([new templates.DynamicText(new expressions.PathExpression(['$render', 'prefix'], new expressions.ExpressionMeta('$render.prefix'))), new templates.Text('Body')]), {})]), new templates.Block(new templates.Template([new templates.DynamicText(new expressions.PathExpression(['$render', 'prefix'], new expressions.ExpressionMeta('$render.prefix'))), new templates.Text('BodyServer')]), [new templates.DynamicViewInstance(new templates.Template([new templates.DynamicText(new expressions.PathExpression(['$render', 'prefix'], new expressions.ExpressionMeta('$render.prefix'))), new templates.Text('BodyServer')]), {'optional': true})])], void 0, false)]);views.register('Title', 'Croc JS Examples ').template = new templates.Template([new templates.Text('Croc JS Examples ')]);views.register('Head', '<script>\n        document.documentElement.id = \'js\';\n    </script> <!--<link rel="stylesheet" href="/croc/css/main.css"> <link rel="stylesheet" href="/land/css/main.css">--> <!--<script src="/prototypes/resources/preinit.js"></script>--> ').template = new templates.Template([new templates.Element('script', void 0, [new templates.Text('document.documentElement.id = \'js\';')], void 0, false), new templates.Text('   ')]);views.register('Body', '<div class="b-page"> Pack Example here </div> \n').template = new templates.Template([new templates.Element('div', {'class': new templates.Attribute('b-page')}, [new templates.Text(' Pack Example here ')], void 0, false)]);views.register('Tail', '').template = new templates.Template([]);};/*DERBY_SERIALIZED_VIEWS_END*/
},{}]},{},[])
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ub2RlX21vZHVsZXMvYnJvd3NlcmlmeS9ub2RlX21vZHVsZXMvYnJvd3Nlci1wYWNrL19wcmVsdWRlLmpzIiwiL25vZGVfbW9kdWxlcy9icm93c2VyaWZ5L2xpYi9fZW1wdHkuanMiLCIvbm9kZV9tb2R1bGVzL2RlcmJ5L2xpYi9fcGFja2FnZVZpZXdzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FDQUE7Ozs7QUNBQSIsImZpbGUiOiJleGFtcGxlczpidXR0b24uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIil9dmFyIGY9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGYuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sZixmLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsbnVsbCwiLypERVJCWV9TRVJJQUxJWkVEX1ZJRVdTKi9tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGRlcmJ5VGVtcGxhdGVzLCB2aWV3cykge3ZhciBleHByZXNzaW9ucyA9IGRlcmJ5VGVtcGxhdGVzLmV4cHJlc3Npb25zO3ZhciB0ZW1wbGF0ZXMgPSBkZXJieVRlbXBsYXRlcy50ZW1wbGF0ZXM7dmlld3MucmVnaXN0ZXIoJ1RpdGxlRWxlbWVudCcsICc8dGl0bGU+PHZpZXcgbmFtZT1cInt7JHJlbmRlci5wcmVmaXh9fVRpdGxlXCI+PC92aWV3PjwvdGl0bGU+JykudGVtcGxhdGUgPSBuZXcgdGVtcGxhdGVzLlRlbXBsYXRlKFtuZXcgdGVtcGxhdGVzLkVsZW1lbnQoJ3RpdGxlJywgdm9pZCAwLCBbbmV3IHRlbXBsYXRlcy5CbG9jayhuZXcgdGVtcGxhdGVzLlRlbXBsYXRlKFtuZXcgdGVtcGxhdGVzLkR5bmFtaWNUZXh0KG5ldyBleHByZXNzaW9ucy5QYXRoRXhwcmVzc2lvbihbJyRyZW5kZXInLCAncHJlZml4J10sIG5ldyBleHByZXNzaW9ucy5FeHByZXNzaW9uTWV0YSgnJHJlbmRlci5wcmVmaXgnKSkpLCBuZXcgdGVtcGxhdGVzLlRleHQoJ1RpdGxlJyldKSwgW25ldyB0ZW1wbGF0ZXMuRHluYW1pY1ZpZXdJbnN0YW5jZShuZXcgdGVtcGxhdGVzLlRlbXBsYXRlKFtuZXcgdGVtcGxhdGVzLkR5bmFtaWNUZXh0KG5ldyBleHByZXNzaW9ucy5QYXRoRXhwcmVzc2lvbihbJyRyZW5kZXInLCAncHJlZml4J10sIG5ldyBleHByZXNzaW9ucy5FeHByZXNzaW9uTWV0YSgnJHJlbmRlci5wcmVmaXgnKSkpLCBuZXcgdGVtcGxhdGVzLlRleHQoJ1RpdGxlJyldKSwge30pXSldLCB2b2lkIDAsIGZhbHNlKV0pO3ZpZXdzLnJlZ2lzdGVyKCdCb2R5RWxlbWVudCcsICc8Ym9keSBjbGFzcz1cInt7JGJvZHlDbGFzcygkcmVuZGVyLm5zKX19XCI+PHZpZXcgbmFtZT1cInt7JHJlbmRlci5wcmVmaXh9fUJvZHlcIj48L3ZpZXc+PHZpZXcgbmFtZT1cInt7JHJlbmRlci5wcmVmaXh9fUJvZHlTZXJ2ZXJcIiBvcHRpb25hbD48L3ZpZXc+PC9ib2R5PicpLnRlbXBsYXRlID0gbmV3IHRlbXBsYXRlcy5UZW1wbGF0ZShbbmV3IHRlbXBsYXRlcy5FbGVtZW50KCdib2R5JywgeydjbGFzcyc6IG5ldyB0ZW1wbGF0ZXMuRHluYW1pY0F0dHJpYnV0ZShuZXcgZXhwcmVzc2lvbnMuRm5FeHByZXNzaW9uKFsnJGJvZHlDbGFzcyddLCBbbmV3IGV4cHJlc3Npb25zLlBhdGhFeHByZXNzaW9uKFsnJHJlbmRlcicsICducyddKV0sIHZvaWQgMCwgbmV3IGV4cHJlc3Npb25zLkV4cHJlc3Npb25NZXRhKCckYm9keUNsYXNzKCRyZW5kZXIubnMpJykpKX0sIFtuZXcgdGVtcGxhdGVzLkJsb2NrKG5ldyB0ZW1wbGF0ZXMuVGVtcGxhdGUoW25ldyB0ZW1wbGF0ZXMuRHluYW1pY1RleHQobmV3IGV4cHJlc3Npb25zLlBhdGhFeHByZXNzaW9uKFsnJHJlbmRlcicsICdwcmVmaXgnXSwgbmV3IGV4cHJlc3Npb25zLkV4cHJlc3Npb25NZXRhKCckcmVuZGVyLnByZWZpeCcpKSksIG5ldyB0ZW1wbGF0ZXMuVGV4dCgnQm9keScpXSksIFtuZXcgdGVtcGxhdGVzLkR5bmFtaWNWaWV3SW5zdGFuY2UobmV3IHRlbXBsYXRlcy5UZW1wbGF0ZShbbmV3IHRlbXBsYXRlcy5EeW5hbWljVGV4dChuZXcgZXhwcmVzc2lvbnMuUGF0aEV4cHJlc3Npb24oWyckcmVuZGVyJywgJ3ByZWZpeCddLCBuZXcgZXhwcmVzc2lvbnMuRXhwcmVzc2lvbk1ldGEoJyRyZW5kZXIucHJlZml4JykpKSwgbmV3IHRlbXBsYXRlcy5UZXh0KCdCb2R5JyldKSwge30pXSksIG5ldyB0ZW1wbGF0ZXMuQmxvY2sobmV3IHRlbXBsYXRlcy5UZW1wbGF0ZShbbmV3IHRlbXBsYXRlcy5EeW5hbWljVGV4dChuZXcgZXhwcmVzc2lvbnMuUGF0aEV4cHJlc3Npb24oWyckcmVuZGVyJywgJ3ByZWZpeCddLCBuZXcgZXhwcmVzc2lvbnMuRXhwcmVzc2lvbk1ldGEoJyRyZW5kZXIucHJlZml4JykpKSwgbmV3IHRlbXBsYXRlcy5UZXh0KCdCb2R5U2VydmVyJyldKSwgW25ldyB0ZW1wbGF0ZXMuRHluYW1pY1ZpZXdJbnN0YW5jZShuZXcgdGVtcGxhdGVzLlRlbXBsYXRlKFtuZXcgdGVtcGxhdGVzLkR5bmFtaWNUZXh0KG5ldyBleHByZXNzaW9ucy5QYXRoRXhwcmVzc2lvbihbJyRyZW5kZXInLCAncHJlZml4J10sIG5ldyBleHByZXNzaW9ucy5FeHByZXNzaW9uTWV0YSgnJHJlbmRlci5wcmVmaXgnKSkpLCBuZXcgdGVtcGxhdGVzLlRleHQoJ0JvZHlTZXJ2ZXInKV0pLCB7J29wdGlvbmFsJzogdHJ1ZX0pXSldLCB2b2lkIDAsIGZhbHNlKV0pO3ZpZXdzLnJlZ2lzdGVyKCdUaXRsZScsICdDcm9jIEpTIEV4YW1wbGVzICcpLnRlbXBsYXRlID0gbmV3IHRlbXBsYXRlcy5UZW1wbGF0ZShbbmV3IHRlbXBsYXRlcy5UZXh0KCdDcm9jIEpTIEV4YW1wbGVzICcpXSk7dmlld3MucmVnaXN0ZXIoJ0hlYWQnLCAnPHNjcmlwdD5cXG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5pZCA9IFxcJ2pzXFwnO1xcbiAgICA8L3NjcmlwdD4gPCEtLTxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiL2Nyb2MvY3NzL21haW4uY3NzXCI+IDxsaW5rIHJlbD1cInN0eWxlc2hlZXRcIiBocmVmPVwiL2xhbmQvY3NzL21haW4uY3NzXCI+LS0+IDwhLS08c2NyaXB0IHNyYz1cIi9wcm90b3R5cGVzL3Jlc291cmNlcy9wcmVpbml0LmpzXCI+PC9zY3JpcHQ+LS0+ICcpLnRlbXBsYXRlID0gbmV3IHRlbXBsYXRlcy5UZW1wbGF0ZShbbmV3IHRlbXBsYXRlcy5FbGVtZW50KCdzY3JpcHQnLCB2b2lkIDAsIFtuZXcgdGVtcGxhdGVzLlRleHQoJ2RvY3VtZW50LmRvY3VtZW50RWxlbWVudC5pZCA9IFxcJ2pzXFwnOycpXSwgdm9pZCAwLCBmYWxzZSksIG5ldyB0ZW1wbGF0ZXMuVGV4dCgnICAgJyldKTt2aWV3cy5yZWdpc3RlcignQm9keScsICc8ZGl2IGNsYXNzPVwiYi1wYWdlXCI+IFBhY2sgRXhhbXBsZSBoZXJlIDwvZGl2PiBcXG4nKS50ZW1wbGF0ZSA9IG5ldyB0ZW1wbGF0ZXMuVGVtcGxhdGUoW25ldyB0ZW1wbGF0ZXMuRWxlbWVudCgnZGl2JywgeydjbGFzcyc6IG5ldyB0ZW1wbGF0ZXMuQXR0cmlidXRlKCdiLXBhZ2UnKX0sIFtuZXcgdGVtcGxhdGVzLlRleHQoJyBQYWNrIEV4YW1wbGUgaGVyZSAnKV0sIHZvaWQgMCwgZmFsc2UpXSk7dmlld3MucmVnaXN0ZXIoJ1RhaWwnLCAnJykudGVtcGxhdGUgPSBuZXcgdGVtcGxhdGVzLlRlbXBsYXRlKFtdKTt9Oy8qREVSQllfU0VSSUFMSVpFRF9WSUVXU19FTkQqLyJdfQ==