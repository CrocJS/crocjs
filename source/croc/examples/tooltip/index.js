(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/*!
	Autosize 1.18.17
	license: MIT
	http://www.jacklmoore.com/autosize
*/
(function ($) {
	var
	defaults = {
		className: 'autosizejs',
		id: 'autosizejs',
		append: '\n',
		callback: false,
		resizeDelay: 10,
		placeholder: true
	},

	// border:0 is unnecessary, but avoids a bug in Firefox on OSX
	copy = '<textarea tabindex="-1" style="position:absolute; top:-999px; left:0; right:auto; bottom:auto; border:0; padding: 0; -moz-box-sizing:content-box; -webkit-box-sizing:content-box; box-sizing:content-box; word-wrap:break-word; height:0 !important; min-height:0 !important; overflow:hidden; transition:none; -webkit-transition:none; -moz-transition:none;"/>',

	// line-height is conditionally included because IE7/IE8/old Opera do not return the correct value.
	typographyStyles = [
		'fontFamily',
		'fontSize',
		'fontWeight',
		'fontStyle',
		'letterSpacing',
		'textTransform',
		'wordSpacing',
		'textIndent',
		'whiteSpace'
	],

	// to keep track which textarea is being mirrored when adjust() is called.
	mirrored,

	// the mirror element, which is used to calculate what size the mirrored element should be.
	mirror = $(copy).data('autosize', true)[0];

	// test that line-height can be accurately copied.
	mirror.style.lineHeight = '99px';
	if ($(mirror).css('lineHeight') === '99px') {
		typographyStyles.push('lineHeight');
	}
	mirror.style.lineHeight = '';

	$.fn.autosize = function (options) {
		if (!this.length) {
			return this;
		}

		options = $.extend({}, defaults, options || {});

		if (mirror.parentNode !== document.body) {
			$(document.body).append(mirror);
		}

		return this.each(function () {
			var
			ta = this,
			$ta = $(ta),
			maxHeight,
			minHeight,
			boxOffset = 0,
			callback = $.isFunction(options.callback),
			originalStyles = {
				height: ta.style.height,
				overflow: ta.style.overflow,
				overflowY: ta.style.overflowY,
				wordWrap: ta.style.wordWrap,
				resize: ta.style.resize
			},
			timeout,
			width = $ta.width(),
			taResize = $ta.css('resize');

			if ($ta.data('autosize')) {
				// exit if autosize has already been applied, or if the textarea is the mirror element.
				return;
			}
			$ta.data('autosize', true);

			if ($ta.css('box-sizing') === 'border-box' || $ta.css('-moz-box-sizing') === 'border-box' || $ta.css('-webkit-box-sizing') === 'border-box'){
				boxOffset = $ta.outerHeight() - $ta.height();
			}

			// IE8 and lower return 'auto', which parses to NaN, if no min-height is set.
			minHeight = Math.max(parseFloat($ta.css('minHeight')) - boxOffset || 0, $ta.height());

			$ta.css({
				overflow: 'hidden',
				overflowY: 'hidden',
				wordWrap: 'break-word' // horizontal overflow is hidden, so break-word is necessary for handling words longer than the textarea width
			});

			if (taResize === 'vertical') {
				$ta.css('resize','none');
			} else if (taResize === 'both') {
				$ta.css('resize', 'horizontal');
			}

			// getComputedStyle is preferred here because it preserves sub-pixel values, while jQuery's .width() rounds to an integer.
			function setWidth() {
				var width;
				var style = window.getComputedStyle ? window.getComputedStyle(ta, null) : null;

				if (style) {
					width = parseFloat(style.width);
					if (style.boxSizing === 'border-box' || style.webkitBoxSizing === 'border-box' || style.mozBoxSizing === 'border-box') {
						$.each(['paddingLeft', 'paddingRight', 'borderLeftWidth', 'borderRightWidth'], function(i,val){
							width -= parseFloat(style[val]);
						});
					}
				} else {
					width = $ta.width();
				}

				mirror.style.width = Math.max(width,0) + 'px';
			}

			function initMirror() {
				var styles = {};

				mirrored = ta;
				mirror.className = options.className;
				mirror.id = options.id;
				maxHeight = parseFloat($ta.css('maxHeight'));

				// mirror is a duplicate textarea located off-screen that
				// is automatically updated to contain the same text as the
				// original textarea.  mirror always has a height of 0.
				// This gives a cross-browser supported way getting the actual
				// height of the text, through the scrollTop property.
				$.each(typographyStyles, function(i,val){
					styles[val] = $ta.css(val);
				});

				$(mirror).css(styles).attr('wrap', $ta.attr('wrap'));

				setWidth();

				// Chrome-specific fix:
				// When the textarea y-overflow is hidden, Chrome doesn't reflow the text to account for the space
				// made available by removing the scrollbar. This workaround triggers the reflow for Chrome.
				if (window.chrome) {
					var width = ta.style.width;
					ta.style.width = '0px';
					var ignore = ta.offsetWidth;
					ta.style.width = width;
				}
			}

			// Using mainly bare JS in this function because it is going
			// to fire very often while typing, and needs to very efficient.
			function adjust() {
				var height, originalHeight;

				if (mirrored !== ta) {
					initMirror();
				} else {
					setWidth();
				}

				if (!ta.value && options.placeholder) {
					// If the textarea is empty, copy the placeholder text into
					// the mirror control and use that for sizing so that we
					// don't end up with placeholder getting trimmed.
					mirror.value = ($ta.attr("placeholder") || '');
				} else {
					mirror.value = ta.value;
				}

				mirror.value += options.append || '';
				mirror.style.overflowY = ta.style.overflowY;
				originalHeight = parseFloat(ta.style.height) || 0;

				// Setting scrollTop to zero is needed in IE8 and lower for the next step to be accurately applied
				mirror.scrollTop = 0;

				mirror.scrollTop = 9e4;

				// Using scrollTop rather than scrollHeight because scrollHeight is non-standard and includes padding.
				height = mirror.scrollTop;

				if (maxHeight && height > maxHeight) {
					ta.style.overflowY = 'scroll';
					height = maxHeight;
				} else {
					ta.style.overflowY = 'hidden';
					if (height < minHeight) {
						height = minHeight;
					}
				}

				height += boxOffset;

				if (Math.abs(originalHeight - height) > 1/100) {
					ta.style.height = height + 'px';

					// Trigger a repaint for IE8 for when ta is nested 2 or more levels inside an inline-block
					mirror.className = mirror.className;

					if (callback) {
						options.callback.call(ta,ta);
					}
					$ta.trigger('autosize.resized');
				}
			}

			function resize () {
				clearTimeout(timeout);
				timeout = setTimeout(function(){
					var newWidth = $ta.width();

					if (newWidth !== width) {
						width = newWidth;
						adjust();
					}
				}, parseInt(options.resizeDelay,10));
			}

			if ('onpropertychange' in ta) {
				if ('oninput' in ta) {
					// Detects IE9.  IE9 does not fire onpropertychange or oninput for deletions,
					// so binding to onkeyup to catch most of those occasions.  There is no way that I
					// know of to detect something like 'cut' in IE9.
					$ta.on('input.autosize keyup.autosize', adjust);
				} else {
					// IE7 / IE8
					$ta.on('propertychange.autosize', function(){
						if(event.propertyName === 'value'){
							adjust();
						}
					});
				}
			} else {
				// Modern Browsers
				$ta.on('input.autosize', adjust);
			}

			// Set options.resizeDelay to false if using fixed-width textarea elements.
			// Uses a timeout and width check to reduce the amount of times adjust needs to be called after window resize.

			if (options.resizeDelay !== false) {
				$(window).on('resize.autosize', resize);
			}

			// Event for manual triggering if needed.
			// Should only be needed when the value of the textarea is changed through JavaScript rather than user input.
			$ta.on('autosize.resize', adjust);

			// Event for manual triggering that also forces the styles to update as well.
			// Should only be needed if one of typography styles of the textarea change, and the textarea is already the target of the adjust method.
			$ta.on('autosize.resizeIncludeStyle', function() {
				mirrored = null;
				adjust();
			});

			$ta.on('autosize.destroy', function(){
				mirrored = null;
				clearTimeout(timeout);
				$(window).off('resize', resize);
				$ta
					.off('autosize')
					.off('.autosize')
					.css(originalStyles)
					.removeData('autosize');
			});

			// Call adjust in case the textarea already contains text.
			adjust();
		});
	};
}(jQuery || $)); // jQuery or jQuery-like library, such as Zepto

},{}],2:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v2.1.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-18T15:11Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.3",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {
	var length = obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// We once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android<4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android<4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optimization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur(),
				// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// Ensure the complete handler is called before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// Toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = window.location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// Support: BlackBerry 5, iOS 3 (original iPhone)
		// If we don't have gBCR, just use 0,0 rather than error
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

},{}],3:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        len = arguments.length;
        args = new Array(len - 1);
        for (i = 1; i < len; i++)
          args[i - 1] = arguments[i];
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    len = arguments.length;
    args = new Array(len - 1);
    for (i = 1; i < len; i++)
      args[i - 1] = arguments[i];

    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    var m;
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.listenerCount = function(emitter, type) {
  var ret;
  if (!emitter._events || !emitter._events[type])
    ret = 0;
  else if (isFunction(emitter._events[type]))
    ret = 1;
  else
    ret = emitter._events[type].length;
  return ret;
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],4:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 3.0.0 (Custom Build) <https://lodash.com/>
 * Build: `lodash modern -d -o ./index.js`
 * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '3.0.0';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      BIND_KEY_FLAG = 2,
      CURRY_BOUND_FLAG = 4,
      CURRY_FLAG = 8,
      CURRY_RIGHT_FLAG = 16,
      PARTIAL_FLAG = 32,
      PARTIAL_RIGHT_FLAG = 64,
      REARG_FLAG = 128,
      ARY_FLAG = 256;

  /** Used as default options for `_.trunc`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect when a function becomes hot. */
  var HOT_COUNT = 150,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 0,
      LAZY_MAP_FLAG = 1,
      LAZY_WHILE_FLAG = 2;

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39|#96);/g,
      reUnescapedHtml = /[&<>"'`]/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /**
   * Used to match ES template delimiters.
   * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-template-literal-lexical-components)
   * for more details.
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect named functions. */
  var reFuncName = /^\s*function[ \n\r\t]+\w/;

  /** Used to detect hexadecimal string values. */
  var reHexPrefix = /^0[xX]/;

  /** Used to detect host constructors (Safari > 5). */
  var reHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to match latin-1 supplementary letters (excluding mathematical operators). */
  var reLatin1 = /[\xc0-\xd6\xd8-\xde\xdf-\xf6\xf8-\xff]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /**
   * Used to match `RegExp` special characters.
   * See this [article on `RegExp` characters](http://www.regular-expressions.info/characters.html#special)
   * for more details.
   */
  var reRegExpChars = /[.*+?^${}()|[\]\/\\]/g,
      reHasRegExpChars = RegExp(reRegExpChars.source);

  /** Used to detect functions containing a `this` reference. */
  var reThis = /\bthis\b/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to match words to create compound words. */
  var reWords = (function() {
    var upper = '[A-Z\\xc0-\\xd6\\xd8-\\xde]',
        lower = '[a-z\\xdf-\\xf6\\xf8-\\xff]+';

    return RegExp(upper + '{2,}(?=' + upper + lower + ')|' + upper + '?' + lower + '|' + upper + '+|[0-9]+', 'g');
  }());

  /** Used to detect and test for whitespace. */
  var whitespace = (
    // Basic whitespace characters.
    ' \t\x0b\f\xa0\ufeff' +

    // Line terminators.
    '\n\r\u2028\u2029' +

    // Unicode category "Zs" space separators.
    '\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000'
  );

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'ArrayBuffer', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Math', 'Number',
    'Object', 'RegExp', 'Set', 'String', '_', 'clearTimeout', 'document',
    'isFinite', 'parseInt', 'setTimeout', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    'window', 'WinRTError'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dateTag] = typedArrayTags[errorTag] =
  typedArrayTags[funcTag] = typedArrayTags[mapTag] =
  typedArrayTags[numberTag] = typedArrayTags[objectTag] =
  typedArrayTags[regexpTag] = typedArrayTags[setTag] =
  typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
  cloneableTags[dateTag] = cloneableTags[float32Tag] =
  cloneableTags[float64Tag] = cloneableTags[int8Tag] =
  cloneableTags[int16Tag] = cloneableTags[int32Tag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[stringTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[mapTag] = cloneableTags[setTag] =
  cloneableTags[weakMapTag] = false;

  /** Used as an internal `_.debounce` options object by `_.throttle`. */
  var debounceOptions = {
    'leading': false,
    'maxWait': 0,
    'trailing': false
  };

  /** Used to map latin-1 supplementary letters to basic latin letters. */
  var deburredLetters = {
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcC': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xeC': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'",
    '&#96;': '`'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it is the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = (objectTypes[typeof window] && window !== (this && this.window)) ? window : this;

  /** Detect free variable `exports`. */
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */
  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
    root = freeGlobal;
  }

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports && freeExports;

  /*--------------------------------------------------------------------------*/

  /**
   * The base implementation of `compareAscending` which compares values and
   * sorts them in ascending order without guaranteeing a stable sort.
   *
   * @private
   * @param {*} value The value to compare to `other`.
   * @param {*} other The value to compare to `value`.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function baseCompareAscending(value, other) {
    if (value !== other) {
      var valIsReflexive = value === value,
          othIsReflexive = other === other;

      if (value > other || !valIsReflexive || (typeof value == 'undefined' && othIsReflexive)) {
        return 1;
      }
      if (value < other || !othIsReflexive || (typeof other == 'undefined' && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * The base implementation of `_.indexOf` without support for binary searches.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    if (value !== value) {
      return indexOfNaN(array, fromIndex);
    }
    var index = (fromIndex || 0) - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.sortBy` and `_.sortByAll` which uses `comparer`
   * to define the sort order of `array` and replaces criteria objects with their
   * corresponding values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * Converts `value` to a string if it is not one. An empty string is returned
   * for `null` or `undefined` values.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    if (typeof value == 'string') {
      return value;
    }
    return value == null ? '' : (value + '');
  }

  /**
   * Used by `_.max` and `_.min` as the default callback for string values.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the code unit of the first character of the string.
   */
  function charAtCallback(string) {
    return string.charCodeAt(0);
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the first character not found in `chars`.
   */
  function charsLeftIndex(string, chars) {
    var index = -1,
        length = string.length;

    while (++index < length && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last character
   * of `string` that is not found in `chars`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @param {string} chars The characters to find.
   * @returns {number} Returns the index of the last character not found in `chars`.
   */
  function charsRightIndex(string, chars) {
    var index = string.length;

    while (index-- && chars.indexOf(string.charAt(index)) > -1) {}
    return index;
  }

  /**
   * Used by `_.sortBy` to compare transformed elements of a collection and stable
   * sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare to `other`.
   * @param {Object} other The object to compare to `object`.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareAscending(object, other) {
    return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
  }

  /**
   * Used by `_.sortByAll` to compare multiple properties of each element
   * in a collection and stable sort them in ascending order.
   *
   * @private
   * @param {Object} object The object to compare to `other`.
   * @param {Object} other The object to compare to `object`.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultipleAscending(object, other) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length;

    while (++index < length) {
      var result = baseCompareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        return result;
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://code.google.com/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * Used by `_.deburr` to convert latin-1 supplementary letters to basic latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  function deburrLetter(letter) {
    return deburredLetters[letter];
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Used by `_.template` to escape characters for inclusion in compiled
   * string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the index at which the first occurrence of `NaN` is found in `array`.
   * If `fromRight` is provided elements of `array` are iterated from right to left.
   *
   * @private
   * @param {Array} array The array to search.
   * @param {number} [fromIndex] The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched `NaN`, else `-1`.
   */
  function indexOfNaN(array, fromIndex, fromRight) {
    var length = array.length,
        index = fromRight ? (fromIndex || length) : ((fromIndex || 0) - 1);

    while ((fromRight ? index-- : ++index < length)) {
      var other = array[index];
      if (other !== other) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Checks if `value` is object-like.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   */
  function isObjectLike(value) {
    return (value && typeof value == 'object') || false;
  }

  /**
   * Used by `trimmedLeftIndex` and `trimmedRightIndex` to determine if a
   * character code is whitespace.
   *
   * @private
   * @param {number} charCode The character code to inspect.
   * @returns {boolean} Returns `true` if `charCode` is whitespace, else `false`.
   */
  function isSpace(charCode) {
    return ((charCode <= 160 && (charCode >= 9 && charCode <= 13) || charCode == 32 || charCode == 160) || charCode == 5760 || charCode == 6158 ||
      (charCode >= 8192 && (charCode <= 8202 || charCode == 8232 || charCode == 8233 || charCode == 8239 || charCode == 8287 || charCode == 12288 || charCode == 65279)));
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      if (array[index] === placeholder) {
        array[index] = PLACEHOLDER;
        result[++resIndex] = index;
      }
    }
    return result;
  }

  /**
   * An implementation of `_.uniq` optimized for sorted arrays without support
   * for callback shorthands and `this` binding.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The function invoked per iteration.
   * @returns {Array} Returns the new duplicate-value-free array.
   */
  function sortedUniq(array, iteratee) {
    var seen,
        index = -1,
        length = array.length,
        resIndex = -1,
        result = [];

    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value, index, array) : value;

      if (!index || seen !== computed) {
        seen = computed;
        result[++resIndex] = value;
      }
    }
    return result;
  }

  /**
   * Used by `_.trim` and `_.trimLeft` to get the index of the first non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the first non-whitespace character.
   */
  function trimmedLeftIndex(string) {
    var index = -1,
        length = string.length;

    while (++index < length && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimRight` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedRightIndex(string) {
    var index = string.length;

    while (index-- && isSpace(string.charCodeAt(index))) {}
    return index;
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  function unescapeHtmlChar(chr) {
    return htmlUnescapes[chr];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the given `context` object.
   *
   * @static
   * @memberOf _
   * @category Utility
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'add': function(a, b) { return a + b; } });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'sub': function(a, b) { return a - b; } });
   *
   * _.isFunction(_.add);
   * // => true
   * _.isFunction(_.sub);
   * // => false
   *
   * lodash.isFunction(lodash.add);
   * // => false
   * lodash.isFunction(lodash.sub);
   * // => true
   *
   * // using `context` to mock `Date#getTime` use in `_.now`
   * var mock = _.runInContext({
   *   'Date': function() {
   *     return { 'getTime': getTimeMock };
   *   }
   * });
   *
   * // or creating a suped-up `defer` in Node.js
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  function runInContext(context) {
    // Avoid issues with some ES3 environments that attempt to use values, named
    // after built-in constructors like `Object`, for the creation of literals.
    // ES5 clears this up by stating that literals must use built-in constructors.
    // See https://es5.github.io/#x11.1.5 for more details.
    context = context ? _.defaults(root.Object(), context, _.pick(root, contextProps)) : root;

    /** Native constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Number = context.Number,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for native method references. */
    var arrayProto = Array.prototype,
        objectProto = Object.prototype;

    /** Used to detect DOM support. */
    var document = (document = context.window) && document.document;

    /** Used to resolve the decompiled source of functions. */
    var fnToString = Function.prototype.toString;

    /** Used to the length of n-tuples for `_.unzip`. */
    var getLength = baseProperty('length');

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /**
     * Used to resolve the `toStringTag` of values.
     * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.prototype.tostring)
     * for more details.
     */
    var objToString = objectProto.toString;

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = context._;

    /** Used to detect if a method is native. */
    var reNative = RegExp('^' +
      escapeRegExp(objToString)
      .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Native method references. */
    var ArrayBuffer = isNative(ArrayBuffer = context.ArrayBuffer) && ArrayBuffer,
        bufferSlice = isNative(bufferSlice = ArrayBuffer && new ArrayBuffer(0).slice) && bufferSlice,
        ceil = Math.ceil,
        clearTimeout = context.clearTimeout,
        floor = Math.floor,
        getPrototypeOf = isNative(getPrototypeOf = Object.getPrototypeOf) && getPrototypeOf,
        push = arrayProto.push,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        Set = isNative(Set = context.Set) && Set,
        setTimeout = context.setTimeout,
        splice = arrayProto.splice,
        Uint8Array = isNative(Uint8Array = context.Uint8Array) && Uint8Array,
        unshift = arrayProto.unshift,
        WeakMap = isNative(WeakMap = context.WeakMap) && WeakMap;

    /** Used to clone array buffers. */
    var Float64Array = (function() {
      // Safari 5 errors when using an array buffer to initialize a typed array
      // where the array buffer's `byteLength` is not a multiple of the typed
      // array's `BYTES_PER_ELEMENT`.
      try {
        var func = isNative(func = context.Float64Array) && func,
            result = new func(new ArrayBuffer(10), 0, 1) && func;
      } catch(e) {}
      return result;
    }());

    /* Native method references for those with the same name as other `lodash` methods. */
    var nativeIsArray = isNative(nativeIsArray = Array.isArray) && nativeIsArray,
        nativeCreate = isNative(nativeCreate = Object.create) && nativeCreate,
        nativeIsFinite = context.isFinite,
        nativeKeys = isNative(nativeKeys = Object.keys) && nativeKeys,
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = isNative(nativeNow = Date.now) && nativeNow,
        nativeNumIsFinite = isNative(nativeNumIsFinite = Number.isFinite) && nativeNumIsFinite,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random;

    /** Used as references for `-Infinity` and `Infinity`. */
    var NEGATIVE_INFINITY = Number.NEGATIVE_INFINITY,
        POSITIVE_INFINITY = Number.POSITIVE_INFINITY;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = Math.pow(2, 32) - 1,
        MAX_ARRAY_INDEX =  MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /** Used as the size, in bytes, of each `Float64Array` element. */
    var FLOAT64_BYTES_PER_ELEMENT = Float64Array ? Float64Array.BYTES_PER_ELEMENT : 0;

    /**
     * Used as the maximum length of an array-like value.
     * See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)
     * for more details.
     */
    var MAX_SAFE_INTEGER = Math.pow(2, 53) - 1;

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable intuitive chaining.
     * Methods that operate on and return arrays, collections, and functions can
     * be chained together. Methods that return a boolean or single value will
     * automatically end the chain returning the unwrapped value. Explicit chaining
     * may be enabled using `_.chain`. The execution of chained methods is lazy,
     * that is, execution is deferred until `_#value` is implicitly or explicitly
     * called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
     * fusion is an optimization that merges iteratees to avoid creating intermediate
     * arrays and reduce the number of iteratee executions.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers also have the following `Array` methods:
     * `concat`, `join`, `pop`, `push`, `reverse`, `shift`, `slice`, `sort`, `splice`,
     * and `unshift`
     *
     * The wrapper functions that support shortcut fusion are:
     * `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`, `first`,
     * `initial`, `last`, `map`, `pluck`, `reject`, `rest`, `reverse`, `slice`,
     * `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `where`
     *
     * The chainable wrapper functions are:
     * `after`, `ary`, `assign`, `at`, `before`, `bind`, `bindAll`, `bindKey`,
     * `callback`, `chain`, `chunk`, `compact`, `concat`, `constant`, `countBy`,
     * `create`, `curry`, `debounce`, `defaults`, `defer`, `delay`, `difference`,
     * `drop`, `dropRight`, `dropRightWhile`, `dropWhile`, `filter`, `flatten`,
     * `flattenDeep`, `flow`, `flowRight`, `forEach`, `forEachRight`, `forIn`,
     * `forInRight`, `forOwn`, `forOwnRight`, `functions`, `groupBy`, `indexBy`,
     * `initial`, `intersection`, `invert`, `invoke`, `keys`, `keysIn`, `map`,
     * `mapValues`, `matches`, `memoize`, `merge`, `mixin`, `negate`, `noop`,
     * `omit`, `once`, `pairs`, `partial`, `partialRight`, `partition`, `pick`,
     * `pluck`, `property`, `propertyOf`, `pull`, `pullAt`, `push`, `range`,
     * `rearg`, `reject`, `remove`, `rest`, `reverse`, `shuffle`, `slice`, `sort`,
     * `sortBy`, `sortByAll`, `splice`, `take`, `takeRight`, `takeRightWhile`,
     * `takeWhile`, `tap`, `throttle`, `thru`, `times`, `toArray`, `toPlainObject`,
     * `transform`, `union`, `uniq`, `unshift`, `unzip`, `values`, `valuesIn`,
     * `where`, `without`, `wrap`, `xor`, `zip`, and `zipObject`
     *
     * The wrapper functions that are **not** chainable by default are:
     * `attempt`, `camelCase`, `capitalize`, `clone`, `cloneDeep`, `deburr`,
     * `endsWith`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`,
     * `findLast`, `findLastIndex`, `findLastKey`, `findWhere`, `first`, `has`,
     * `identity`, `includes`, `indexOf`, `isArguments`, `isArray`, `isBoolean`,
     * `isDate`, `isElement`, `isEmpty`, `isEqual`, `isError`, `isFinite`,
     * `isFunction`, `isMatch` , `isNative`, `isNaN`, `isNull`, `isNumber`,
     * `isObject`, `isPlainObject`, `isRegExp`, `isString`, `isUndefined`,
     * `isTypedArray`, `join`, `kebabCase`, `last`, `lastIndexOf`, `max`, `min`,
     * `noConflict`, `now`, `pad`, `padLeft`, `padRight`, `parseInt`, `pop`,
     * `random`, `reduce`, `reduceRight`, `repeat`, `result`, `runInContext`,
     * `shift`, `size`, `snakeCase`, `some`, `sortedIndex`, `sortedLastIndex`,
     * `startsWith`, `template`, `trim`, `trimLeft`, `trimRight`, `trunc`,
     * `unescape`, `uniqueId`, `value`, and `words`
     *
     * The wrapper function `sample` will return a wrapped value when `n` is provided,
     * otherwise an unwrapped value is returned.
     *
     * @name _
     * @constructor
     * @category Chain
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns a `lodash` instance.
     * @example
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // returns an unwrapped value
     * wrapped.reduce(function(sum, n) { return sum + n; });
     * // => 6
     *
     * // returns a wrapped value
     * var squares = wrapped.map(function(n) { return n * n; });
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return new LodashWrapper(value.__wrapped__, value.__chain__, arrayCopy(value.__actions__));
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
     * @param {Array} [actions=[]] Actions to peform to resolve the unwrapped value.
     */
    function LodashWrapper(value, chainAll, actions) {
      this.__actions__ = actions || [];
      this.__chain__ = !!chainAll;
      this.__wrapped__ = value;
    }

    /**
     * An object environment feature flags.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    var support = lodash.support = {};

    (function(x) {

      /**
       * Detect if functions can be decompiled by `Function#toString`
       * (all but Firefox OS certified apps, older Opera mobile browsers, and
       * the PlayStation 3; forced `false` for Windows 8 apps).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcDecomp = !isNative(context.WinRTError) && reThis.test(runInContext);

      /**
       * Detect if `Function#name` is supported (all but IE).
       *
       * @memberOf _.support
       * @type boolean
       */
      support.funcNames = typeof Function.name == 'string';

      /**
       * Detect if the DOM is supported.
       *
       * @memberOf _.support
       * @type boolean
       */
      try {
        support.dom = document.createDocumentFragment().nodeType === 11;
      } catch(e) {
        support.dom = false;
      }

      /**
       * Detect if `arguments` object indexes are non-enumerable.
       *
       * In Firefox < 4, IE < 9, PhantomJS, and Safari < 5.1 `arguments` object
       * indexes are non-enumerable. Chrome < 25 and Node.js < 0.11.0 treat
       * `arguments` object indexes as non-enumerable and fail `hasOwnProperty`
       * checks for indexes that exceed their function's formal parameters with
       * associated values of `0`.
       *
       * @memberOf _.support
       * @type boolean
       */
      try {
        support.nonEnumArgs = !propertyIsEnumerable.call(arguments, 1);
      } catch(e) {
        support.nonEnumArgs = true;
      }
    }(0, 0));

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB). Change the following template settings to use
     * alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type Object
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type RegExp
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type string
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type Object
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type Function
         */
        '_': lodash
      }
    };

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.actions = null;
      this.dir = 1;
      this.dropCount = 0;
      this.filtered = false;
      this.iteratees = null;
      this.takeCount = POSITIVE_INFINITY;
      this.views = null;
      this.wrapped = value;
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var actions = this.actions,
          iteratees = this.iteratees,
          views = this.views,
          result = new LazyWrapper(this.wrapped);

      result.actions = actions ? arrayCopy(actions) : null;
      result.dir = this.dir;
      result.dropCount = this.dropCount;
      result.filtered = this.filtered;
      result.iteratees = iteratees ? arrayCopy(iteratees) : null;
      result.takeCount = this.takeCount;
      result.views = views ? arrayCopy(views) : null;
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      var filtered = this.filtered,
          result = filtered ? new LazyWrapper(this) : this.clone();

      result.dir = this.dir * -1;
      result.filtered = filtered;
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.wrapped.value();
      if (!isArray(array)) {
        return baseWrapperValue(array, this.actions);
      }
      var dir = this.dir,
          isRight = dir < 0,
          length = array.length,
          view = getView(0, length, this.views),
          start = view.start,
          end = view.end,
          dropCount = this.dropCount,
          takeCount = nativeMin(end - start, this.takeCount - dropCount),
          index = isRight ? end : start - 1,
          iteratees = this.iteratees,
          iterLength = iteratees ? iteratees.length : 0,
          resIndex = 0,
          result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              computed = iteratee(value, index, array),
              type = data.type;

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        if (dropCount) {
          dropCount--;
        } else {
          result[resIndex++] = value;
        }
      }
      return isRight ? result.reverse() : result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a cache object to store key/value pairs.
     *
     * @private
     * @static
     * @name Cache
     * @memberOf _.memoize
     */
    function MapCache() {
      this.__data__ = {};
    }

    /**
     * Removes `key` and its value from the cache.
     *
     * @private
     * @name delete
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed successfully, else `false`.
     */
    function mapDelete(key) {
      return this.has(key) && delete this.__data__[key];
    }

    /**
     * Gets the cached value for `key`.
     *
     * @private
     * @name get
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the cached value.
     */
    function mapGet(key) {
      return key == '__proto__' ? undefined : this.__data__[key];
    }

    /**
     * Checks if a cached value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapHas(key) {
      return key != '__proto__' && hasOwnProperty.call(this.__data__, key);
    }

    /**
     * Adds `value` to `key` of the cache.
     *
     * @private
     * @name set
     * @memberOf _.memoize.Cache
     * @param {string} key The key of the value to cache.
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache object.
     */
    function mapSet(key, value) {
      if (key != '__proto__') {
        this.__data__[key] = value;
      }
      return this;
    }

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates a cache object to store unique values.
     *
     * @private
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var length = values ? values.length : 0;

      this.data = { 'hash': nativeCreate(null), 'set': new Set };
      while (length--) {
        this.push(values[length]);
      }
    }

    /**
     * Checks if `value` is in `cache` mimicking the return signature of
     * `_.indexOf` by returning `0` if the value is found, else `-1`.
     *
     * @private
     * @param {Object} cache The cache to search.
     * @param {*} value The value to search for.
     * @returns {number} Returns `0` if `value` is found, else `-1`.
     */
    function cacheIndexOf(cache, value) {
      var data = cache.data,
          result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

      return result ? 0 : -1;
    }

    /**
     * Adds `value` to the cache.
     *
     * @private
     * @name push
     * @memberOf SetCache
     * @param {*} value The value to cache.
     */
    function cachePush(value) {
      var data = this.data;
      if (typeof value == 'string' || isObject(value)) {
        data.set.add(value);
      } else {
        data.hash[value] = true;
      }
    }

    /*------------------------------------------------------------------------*/

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function arrayCopy(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * callback shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.map` for arrays without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * A specialized version of `_.max` for arrays without support for iteratees.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     */
    function arrayMax(array) {
      var index = -1,
          length = array.length,
          result = NEGATIVE_INFINITY;

      while (++index < length) {
        var value = array[index];
        if (value > result) {
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.min` for arrays without support for iteratees.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     */
    function arrayMin(array) {
      var index = -1,
          length = array.length,
          result = POSITIVE_INFINITY;

      while (++index < length) {
        var value = array[index];
        if (value < result) {
          result = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the first element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initFromArray) {
      var index = -1,
          length = array.length;

      if (initFromArray && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * callback shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initFromArray] Specify using the last element of `array`
     *  as the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initFromArray) {
      var length = array.length;
      if (initFromArray && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Used by `_.defaults` to customize its `_.assign` use.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignDefaults(objectValue, sourceValue) {
      return typeof objectValue == 'undefined' ? sourceValue : objectValue;
    }

    /**
     * Used by `_.template` to customize its `_.assign` use.
     *
     * **Note:** This method is like `assignDefaults` except that it ignores
     * inherited property values when checking if a property is `undefined`.
     *
     * @private
     * @param {*} objectValue The destination object property value.
     * @param {*} sourceValue The source object property value.
     * @param {string} key The key associated with the object and source values.
     * @param {Object} object The destination object.
     * @returns {*} Returns the value to assign to the destination object.
     */
    function assignOwnDefaults(objectValue, sourceValue, key, object) {
      return (typeof objectValue == 'undefined' || !hasOwnProperty.call(object, key))
        ? sourceValue
        : objectValue;
    }

    /**
     * The base implementation of `_.assign` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize assigning values.
     * @returns {Object} Returns the destination object.
     */
    function baseAssign(object, source, customizer) {
      var props = keys(source);
      if (!customizer) {
        return baseCopy(source, object, props);
      }
      var index = -1,
          length = props.length

      while (++index < length) {
        var key = props[index],
            value = object[key],
            result = customizer(value, source[key], key, object, source);

        if ((result === result ? result !== value : value === value) ||
            (typeof value == 'undefined' && !(key in object))) {
          object[key] = result;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.at` without support for strings and individual
     * key arguments.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {number[]|string[]} [props] The property names or indexes of elements to pick.
     * @returns {Array} Returns the new array of picked elements.
     */
    function baseAt(collection, props) {
      var index = -1,
          length = collection.length,
          isArr = isLength(length),
          propsLength = props.length,
          result = Array(propsLength);

      while(++index < propsLength) {
        var key = props[index];
        if (isArr) {
          key = parseFloat(key);
          result[index] = isIndex(key, length) ? collection[key] : undefined;
        } else {
          result[index] = collection[key];
        }
      }
      return result;
    }

    /**
     * Copies the properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Array} props The property names to copy.
     * @returns {Object} Returns `object`.
     */
    function baseCopy(source, object, props) {
      if (!props) {
        props = object;
        object = {};
      }
      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];
        object[key] = source[key];
      }
      return object;
    }

    /**
     * The base implementation of `_.bindAll` without support for individual
     * method name arguments.
     *
     * @private
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {string[]} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     */
    function baseBindAll(object, methodNames) {
      var index = -1,
          length = methodNames.length;

      while (++index < length) {
        var key = methodNames[index];
        object[key] = createWrapper(object[key], BIND_FLAG, object);
      }
      return object;
    }

    /**
     * The base implementation of `_.callback` which supports specifying the
     * number of arguments to provide to `func`.
     *
     * @private
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function baseCallback(func, thisArg, argCount) {
      var type = typeof func;
      if (type == 'function') {
        return (typeof thisArg != 'undefined' && isBindable(func))
          ? bindCallback(func, thisArg, argCount)
          : func;
      }
      if (func == null) {
        return identity;
      }
      // Handle "_.property" and "_.matches" style callback shorthands.
      return type == 'object'
        ? baseMatches(func, !argCount)
        : baseProperty(argCount ? baseToString(func) : func);
    }

    /**
     * The base implementation of `_.clone` without support for argument juggling
     * and `this` binding `customizer` functions.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The object `value` belongs to.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates clones with source counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
      var result;
      if (customizer) {
        result = object ? customizer(value, key, object) : customizer(value);
      }
      if (typeof result != 'undefined') {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return arrayCopy(value, result);
        }
      } else {
        var tag = objToString.call(value),
            isFunc = tag == funcTag;

        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = initCloneObject(isFunc ? {} : value);
          if (!isDeep) {
            return baseCopy(value, result, keys(value));
          }
        } else {
          return cloneableTags[tag]
            ? initCloneByTag(value, tag, isDeep)
            : (object ? value : {});
        }
      }
      // Check for circular references and return corresponding clone.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == value) {
          return stackB[length];
        }
      }
      // Add the source value to the stack of traversed objects and associate it with its clone.
      stackA.push(value);
      stackB.push(result);

      // Recursively populate clone (susceptible to call stack limits).
      (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
        result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
      });
      return result;
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} prototype The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function Object() {}
      return function(prototype) {
        if (isObject(prototype)) {
          Object.prototype = prototype;
          var result = new Object;
          Object.prototype = null;
        }
        return result || context.Object();
      };
    }());

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts an index
     * of where to slice the arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Object} args The `arguments` object to slice and provide to `func`.
     * @returns {number} Returns the timer id.
     */
    function baseDelay(func, wait, args, fromIndex) {
      if (!isFunction(func)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, baseSlice(args, fromIndex)); }, wait);
    }

    /**
     * The base implementation of `_.difference` which accepts a single array
     * of values to exclude.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values) {
      var length = array ? array.length : 0,
          result = [];

      if (!length) {
        return result;
      }
      var index = -1,
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf,
          cache = isCommon && values.length >= 200 && createCache(values),
          valuesLength = values.length;

      if (cache) {
        indexOf = cacheIndexOf;
        isCommon = false;
        values = cache;
      }
      outer:
      while (++index < length) {
        var value = array[index];

        if (isCommon && value === value) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === value) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (indexOf(values, value) < 0) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    function baseEach(collection, iteratee) {
      var length = collection ? collection.length : 0;
      if (!isLength(length)) {
        return baseForOwn(collection, iteratee);
      }
      var index = -1,
          iterable = toObject(collection);

      while (++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    }

    /**
     * The base implementation of `_.forEachRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object|string} Returns `collection`.
     */
    function baseEachRight(collection, iteratee) {
      var length = collection ? collection.length : 0;
      if (!isLength(length)) {
        return baseForOwnRight(collection, iteratee);
      }
      var iterable = toObject(collection);
      while (length--) {
        if (iteratee(iterable[length], length, iterable) === false) {
          break;
        }
      }
      return collection;
    }

    /**
     * The base implementation of `_.every` without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of `_.filter` without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.find`, `_.findLast`, `_.findKey`, and `_.findLastKey`,
     * without support for callback shorthands and `this` binding, which iterates
     * over `collection` using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @param {boolean} [retKey] Specify returning the key of the found element
     *  instead of the element itself.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFind(collection, predicate, eachFunc, retKey) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = retKey ? key : value;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with added support for restricting
     * flattening and specifying the start index.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param {boolean} [isStrict] Restrict flattening to arrays and `arguments` objects.
     * @param {number} [fromIndex=0] The index to start from.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, isDeep, isStrict, fromIndex) {
      var index = (fromIndex || 0) - 1,
          length = array.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];

        if (isObjectLike(value) && isLength(value.length) && (isArray(value) || isArguments(value))) {
          if (isDeep) {
            // Recursively flatten arrays (susceptible to call stack limits).
            value = baseFlatten(value, isDeep, isStrict);
          }
          var valIndex = -1,
              valLength = value.length;

          result.length += valLength;
          while (++valIndex < valLength) {
            result[++resIndex] = value[valIndex];
          }
        } else if (!isStrict) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForIn` and `baseForOwn` which iterates
     * over `object` properties returned by `keysFunc` invoking `iteratee` for
     * each property. Iterator functions may exit iteration early by explicitly
     * returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    function baseFor(object, iteratee, keysFunc) {
      var index = -1,
          iterable = toObject(object),
          props = keysFunc(object),
          length = props.length;

      while (++index < length) {
        var key = props[index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    function baseForRight(object, iteratee, keysFunc) {
      var iterable = toObject(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[length];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    }

    /**
     * The base implementation of `_.forIn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForIn(object, iteratee) {
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * The base implementation of `_.forOwn` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for callback
     * shorthands and `this` binding.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from those provided.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the new array of filtered property names.
     */
    function baseFunctions(object, props) {
      var index = -1,
          length = props.length,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var key = props[index];
        if (isFunction(object[key])) {
          result[++resIndex] = key;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invoke` which requires additional arguments
     * to be provided as an array of arguments rather than individually.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {Array} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     */
    function baseInvoke(collection, methodName, args) {
      var index = -1,
          isFunc = typeof methodName == 'function',
          length = collection ? collection.length : 0,
          result = isLength(length) ? Array(length) : [];

      baseEach(collection, function(value) {
        var func = isFunc ? methodName : (value != null && value[methodName]);
        result[++index] = func ? func.apply(value, args) : undefined;
      });
      return result;
    }

    /**
     * The base implementation of `_.isEqual` without support for `this` binding
     * `customizer` functions.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isWhere] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, customizer, isWhere, stackA, stackB) {
      // Exit early for identical values.
      if (value === other) {
        // Treat `+0` vs. `-0` as not equal.
        return value !== 0 || (1 / value == 1 / other);
      }
      var valType = typeof value,
          othType = typeof other;

      // Exit early for unlike primitive values.
      if ((valType != 'function' && valType != 'object' && othType != 'function' && othType != 'object') ||
          value == null || other == null) {
        // Return `false` unless both values are `NaN`.
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, baseIsEqual, customizer, isWhere, stackA, stackB);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @param {boolean} [isWhere] Specify performing partial comparisons.
     * @param {Array} [stackA=[]] Tracks traversed `value` objects.
     * @param {Array} [stackB=[]] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, equalFunc, customizer, isWhere, stackA, stackB) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = arrayTag,
          othTag = arrayTag;

      if (!objIsArr) {
        objTag = objToString.call(object);
        if (objTag == argsTag) {
          objTag = objectTag;
        } else if (objTag != objectTag) {
          objIsArr = isTypedArray(object);
        }
      }
      if (!othIsArr) {
        othTag = objToString.call(other);
        if (othTag == argsTag) {
          othTag = objectTag;
        } else if (othTag != objectTag) {
          othIsArr = isTypedArray(other);
        }
      }
      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && !(objIsArr || objIsObj)) {
        return equalByTag(object, other, objTag);
      }
      var valWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (valWrapped || othWrapped) {
        return equalFunc(valWrapped ? object.value() : object, othWrapped ? other.value() : other, customizer, isWhere, stackA, stackB);
      }
      if (!isSameTag) {
        return false;
      }
      // Assume cyclic values are equal.
      // For more information on detecting circular references see https://es5.github.io/#JO.
      stackA || (stackA = []);
      stackB || (stackB = []);

      var length = stackA.length;
      while (length--) {
        if (stackA[length] == object) {
          return stackB[length] == other;
        }
      }
      // Add `object` and `other` to the stack of traversed objects.
      stackA.push(object);
      stackB.push(other);

      var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isWhere, stackA, stackB);

      stackA.pop();
      stackB.pop();

      return result;
    }

    /**
     * The base implementation of `_.isMatch` without support for callback
     * shorthands or `this` binding.
     *
     * @private
     * @param {Object} source The object to inspect.
     * @param {Array} props The source property names to match.
     * @param {Array} values The source values to match.
     * @param {Array} strictCompareFlags Strict comparison flags for source values.
     * @param {Function} [customizer] The function to customize comparing objects.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, props, values, strictCompareFlags, customizer) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      var index = -1,
          noCustomizer = !customizer;

      while (++index < length) {
        if ((noCustomizer && strictCompareFlags[index])
              ? values[index] !== object[props[index]]
              : !hasOwnProperty.call(object, props[index])
            ) {
          return false;
        }
      }
      index = -1;
      while (++index < length) {
        var key = props[index];
        if (noCustomizer && strictCompareFlags[index]) {
          var result = hasOwnProperty.call(object, key);
        } else {
          var objValue = object[key],
              srcValue = values[index];

          result = customizer ? customizer(objValue, srcValue, key) : undefined;
          if (typeof result == 'undefined') {
            result = baseIsEqual(srcValue, objValue, customizer, true);
          }
        }
        if (!result) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.map` without support for callback shorthands
     * or `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var result = [];
      baseEach(collection, function(value, key, collection) {
        result.push(iteratee(value, key, collection));
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which supports specifying whether
     * `source` should be cloned.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @param {boolean} [isCloned] Specify cloning the source object.
     * @returns {Function} Returns the new function.
     */
    function baseMatches(source, isCloned) {
      var props = keys(source),
          length = props.length;

      if (length == 1) {
        var key = props[0],
            value = source[key];

        if (isStrictComparable(value)) {
          return function(object) {
            return object != null && value === object[key] && hasOwnProperty.call(object, key);
          };
        }
      }
      if (isCloned) {
        source = baseClone(source, true);
      }
      var values = Array(length),
          strictCompareFlags = Array(length);

      while (length--) {
        value = source[props[length]];
        values[length] = value;
        strictCompareFlags[length] = isStrictComparable(value);
      }
      return function(object) {
        return baseIsMatch(object, props, values, strictCompareFlags);
      };
    }

    /**
     * The base implementation of `_.merge` without support for argument juggling,
     * multiple sources, and `this` binding `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {Function} [customizer] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {Object} Returns the destination object.
     */
    function baseMerge(object, source, customizer, stackA, stackB) {
      var isSrcArr = isLength(source.length) && (isArray(source) || isTypedArray(source));

      (isSrcArr ? arrayEach : baseForOwn)(source, function(srcValue, key, source) {
        if (isObjectLike(srcValue)) {
          stackA || (stackA = []);
          stackB || (stackB = []);
          return baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
        }
        var value = object[key],
            result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
            isCommon = typeof result == 'undefined';

        if (isCommon) {
          result = srcValue;
        }
        if ((isSrcArr || typeof result != 'undefined') &&
            (isCommon || (result === result ? result !== value : value === value))) {
          object[key] = result;
        }
      });
      return object;
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize merging properties.
     * @param {Array} [stackA=[]] Tracks traversed source objects.
     * @param {Array} [stackB=[]] Associates values with source counterparts.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
      var length = stackA.length,
          srcValue = source[key];

      while (length--) {
        if (stackA[length] == srcValue) {
          object[key] = stackB[length];
          return;
        }
      }
      var value = object[key],
          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
          isCommon = typeof result == 'undefined';

      if (isCommon) {
        result = srcValue;
        if (isLength(srcValue.length) && (isArray(srcValue) || isTypedArray(srcValue))) {
          result = isArray(value)
            ? value
            : (value ? arrayCopy(value) : []);
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          result = isArguments(value)
            ? toPlainObject(value)
            : (isPlainObject(value) ? value : {});
        }
      }
      // Add the source value to the stack of traversed objects and associate
      // it with its merged value.
      stackA.push(srcValue);
      stackB.push(result);

      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
      } else if (result === result ? result !== value : value === value) {
        object[key] = result;
      }
    }

    /**
     * The base implementation of `_.property` which does not coerce `key` to a string.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * index arguments.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     */
    function basePullAt(array, indexes) {
      var length = indexes.length,
          result = baseAt(array, indexes);

      indexes.sort(baseCompareAscending);
      while (length--) {
        var index = parseFloat(indexes[length]);
        if (index != previous && isIndex(index)) {
          var previous = index;
          splice.call(array, index, 1);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.random` without support for argument juggling
     * and returning floating-point numbers.
     *
     * @private
     * @param {number} min The minimum possible value.
     * @param {number} max The maximum possible value.
     * @returns {number} Returns the random number.
     */
    function baseRandom(min, max) {
      return min + floor(nativeRandom() * (max - min + 1));
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight` without support
     * for callback shorthands or `this` binding, which iterates over `collection`
     * using the provided `eachFunc`.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initFromCollection Specify using the first or last element
     *  of `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initFromCollection, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initFromCollection
          ? (initFromCollection = false, value)
          : iteratee(accumulator, value, index, collection)
      });
      return accumulator;
    }

    /**
     * The base implementation of `setData` without support for hot loop detection.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      start = start == null ? 0 : (+start || 0);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (typeof end == 'undefined' || end > length) ? length : (+end || 0);
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : (end - start);

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for callback shorthands
     * or `this` binding.
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.uniq` without support for callback shorthands
     * and `this` binding.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The function invoked per iteration.
     * @returns {Array} Returns the new duplicate-value-free array.
     */
    function baseUniq(array, iteratee) {
      var index = -1,
          indexOf = getIndexOf(),
          length = array.length,
          isCommon = indexOf == baseIndexOf,
          isLarge = isCommon && length >= 200,
          seen = isLarge && createCache(),
          result = [];

      if (seen) {
        indexOf = cacheIndexOf;
        isCommon = false;
      } else {
        isLarge = false;
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value, index, array) : value;

        if (isCommon && value === value) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (indexOf(seen, computed) < 0) {
          if (iteratee || isLarge) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * returned by `keysFunc`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      var index = -1,
          length = props.length,
          result = Array(length);

      while (++index < length) {
        result[index] = object[props[index]];
      }
      return result;
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to peform to resolve the unwrapped value.
     * @returns {*} Returns the resolved unwrapped value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      var index = -1,
          length = actions.length;

      while (++index < length) {
        var args = [result],
            action = actions[index];

        push.apply(args, action.args);
        result = action.func.apply(action.thisArg, args);
      }
      return result;
    }

    /**
     * Performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest, instead
     *  of the lowest, index at which a value should be inserted into `array`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndex(array, value, retHighest) {
      var low = 0,
          high = array ? array.length : low;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (retHighest ? (computed <= value) : (computed < value)) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return binaryIndexBy(array, value, identity, retHighest);
    }

    /**
     * This function is like `binaryIndex` except that it invokes `iteratee` for
     * `value` and each element of `array` to compute their sort ranking. The
     * iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [retHighest] Specify returning the highest, instead
     *  of the lowest, index at which a value should be inserted into `array`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function binaryIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array ? array.length : 0,
          valIsNaN = value !== value,
          valIsUndef = typeof value == 'undefined';

      while (low < high) {
        var mid = floor((low + high) / 2),
            computed = iteratee(array[mid]),
            isReflexive = computed === computed;

        if (valIsNaN) {
          var setLow = isReflexive || retHighest;
        } else if (valIsUndef) {
          setLow = isReflexive && (retHighest || typeof computed != 'undefined');
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * A specialized version of `baseCallback` which only supports `this` binding
     * and specifying the number of arguments to provide to `func`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {number} [argCount] The number of arguments to provide to `func`.
     * @returns {Function} Returns the callback.
     */
    function bindCallback(func, thisArg, argCount) {
      if (typeof func != 'function') {
        return identity;
      }
      if (typeof thisArg == 'undefined') {
        return func;
      }
      switch (argCount) {
        case 1: return function(value) {
          return func.call(thisArg, value);
        };
        case 3: return function(value, index, collection) {
          return func.call(thisArg, value, index, collection);
        };
        case 4: return function(accumulator, value, index, collection) {
          return func.call(thisArg, accumulator, value, index, collection);
        };
        case 5: return function(value, other, key, object, source) {
          return func.call(thisArg, value, other, key, object, source);
        };
      }
      return function() {
        return func.apply(thisArg, arguments);
      };
    }

    /**
     * Creates a clone of the given array buffer.
     *
     * @private
     * @param {ArrayBuffer} buffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function bufferClone(buffer) {
      return bufferSlice.call(buffer, 0);
    }
    if (!bufferSlice) {
      // PhantomJS has `ArrayBuffer` and `Uint8Array` but not `Float64Array`.
      bufferClone = !(ArrayBuffer && Uint8Array) ? constant(null) : function(buffer) {
        var byteLength = buffer.byteLength,
            floatLength = Float64Array ? floor(byteLength / FLOAT64_BYTES_PER_ELEMENT) : 0,
            offset = floatLength * FLOAT64_BYTES_PER_ELEMENT,
            result = new ArrayBuffer(byteLength);

        if (floatLength) {
          var view = new Float64Array(result, 0, floatLength);
          view.set(new Float64Array(buffer, 0, floatLength));
        }
        if (byteLength != offset) {
          view = new Uint8Array(result, offset);
          view.set(new Uint8Array(buffer, offset));
        }
        return result;
      };
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders) {
      var holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          leftIndex = -1,
          leftLength = partials.length,
          result = Array(argsLength + leftLength);

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        result[holders[argsIndex]] = args[argsIndex];
      }
      while (argsLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array|Object} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders) {
      var holdersIndex = -1,
          holdersLength = holders.length,
          argsIndex = -1,
          argsLength = nativeMax(args.length - holdersLength, 0),
          rightIndex = -1,
          rightLength = partials.length,
          result = Array(argsLength + rightLength);

      while (++argsIndex < argsLength) {
        result[argsIndex] = args[argsIndex];
      }
      var pad = argsIndex;
      while (++rightIndex < rightLength) {
        result[pad + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        result[pad + holders[holdersIndex]] = args[argsIndex++];
      }
      return result;
    }

    /**
     * Creates a function that aggregates a collection, creating an accumulator
     * object composed from the results of running each element in the collection
     * through an iteratee. The `setter` sets the keys and values of the accumulator
     * object. If `initializer` is provided initializes the accumulator object.
     *
     * @private
     * @param {Function} setter The function to set keys and values of the accumulator object.
     * @param {Function} [initializer] The function to initialize the accumulator object.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee, thisArg) {
        var result = initializer ? initializer() : {};
        iteratee = getCallback(iteratee, thisArg, 3);

        if (isArray(collection)) {
          var index = -1,
              length = collection.length;

          while (++index < length) {
            var value = collection[index];
            setter(result, value, iteratee(value, index, collection), collection);
          }
        } else {
          baseEach(collection, function(value, key, collection) {
            setter(result, value, iteratee(value, key, collection), collection);
          });
        }
        return result;
      };
    }

    /**
     * Creates a function that assigns properties of source object(s) to a given
     * destination object.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return function() {
        var length = arguments.length,
            object = arguments[0];

        if (length < 2 || object == null) {
          return object;
        }
        if (length > 3 && isIterateeCall(arguments[1], arguments[2], arguments[3])) {
          length = 2;
        }
        // Juggle arguments.
        if (length > 3 && typeof arguments[length - 2] == 'function') {
          var customizer = bindCallback(arguments[--length - 1], arguments[length--], 5);
        } else if (length > 2 && typeof arguments[length - 1] == 'function') {
          customizer = arguments[--length];
        }
        var index = 0;
        while (++index < length) {
          var source = arguments[index];
          if (source) {
            assigner(object, source, customizer);
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with the `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to bind.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new bound function.
     */
    function createBindWrapper(func, thisArg) {
      var Ctor = createCtorWrapper(func);

      function wrapper() {
        return (this instanceof wrapper ? Ctor : func).apply(thisArg, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a `Set` cache object to optimize linear searches of large arrays.
     *
     * @private
     * @param {Array} [values] The values to cache.
     * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
     */
    var createCache = !(nativeCreate && Set) ? constant(null) : function(values) {
      return new SetCache(values);
    };

    /**
     * Creates a function that produces compound words out of the words in a
     * given string.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        var index = -1,
            array = words(deburr(string)),
            length = array.length,
            result = '';

        while (++index < length) {
          result = callback(result, array[index], index);
        }
        return result;
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtorWrapper(Ctor) {
      return function() {
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, arguments);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that gets the extremum value of a collection.
     *
     * @private
     * @param {Function} arrayFunc The function to get the extremum value from an array.
     * @param {boolean} [isMin] Specify returning the minimum, instead of the maximum,
     *  extremum value.
     * @returns {Function} Returns the new extremum function.
     */
    function createExtremum(arrayFunc, isMin) {
      return function(collection, iteratee, thisArg) {
        if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
          iteratee = null;
        }
        var func = getCallback(),
            noIteratee = iteratee == null;

        if (!(func === baseCallback && noIteratee)) {
          noIteratee = false;
          iteratee = func(iteratee, thisArg, 3);
        }
        if (noIteratee) {
          var isArr = isArray(collection);
          if (!isArr && isString(collection)) {
            iteratee = charAtCallback;
          } else {
            return arrayFunc(isArr ? collection : toIterable(collection));
          }
        }
        return extremumBy(collection, iteratee, isMin);
      };
    }

    /**
     * Creates a function that wraps `func` and invokes it with optional `this`
     * binding of, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybridWrapper(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & ARY_FLAG,
          isBind = bitmask & BIND_FLAG,
          isBindKey = bitmask & BIND_KEY_FLAG,
          isCurry = bitmask & CURRY_FLAG,
          isCurryBound = bitmask & CURRY_BOUND_FLAG,
          isCurryRight = bitmask & CURRY_RIGHT_FLAG;

      var Ctor = !isBindKey && createCtorWrapper(func),
          key = func;

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it to other functions.
        var length = arguments.length,
            index = length,
            args = Array(length);

        while (index--) {
          args[index] = arguments[index];
        }
        if (partials) {
          args = composeArgs(args, partials, holders);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight);
        }
        if (isCurry || isCurryRight) {
          var placeholder = wrapper.placeholder,
              argsHolders = replaceHolders(args, placeholder);

          length -= argsHolders.length;
          if (length < arity) {
            var newArgPos = argPos ? arrayCopy(argPos) : null,
                newArity = nativeMax(arity - length, 0),
                newsHolders = isCurry ? argsHolders : null,
                newHoldersRight = isCurry ? null : argsHolders,
                newPartials = isCurry ? args : null,
                newPartialsRight = isCurry ? null : args;

            bitmask |= (isCurry ? PARTIAL_FLAG : PARTIAL_RIGHT_FLAG);
            bitmask &= ~(isCurry ? PARTIAL_RIGHT_FLAG : PARTIAL_FLAG);

            if (!isCurryBound) {
              bitmask &= ~(BIND_FLAG | BIND_KEY_FLAG);
            }
            var result = createHybridWrapper(func, bitmask, thisArg, newPartials, newsHolders, newPartialsRight, newHoldersRight, newArgPos, ary, newArity);
            result.placeholder = placeholder;
            return result;
          }
        }
        var thisBinding = isBind ? thisArg : this;
        if (isBindKey) {
          func = thisBinding[key];
        }
        if (argPos) {
          args = reorder(args, argPos);
        }
        if (isAry && ary < args.length) {
          args.length = ary;
        }
        return (this instanceof wrapper ? (Ctor || createCtorWrapper(func)) : func).apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates the pad required for `string` based on the given padding length.
     * The `chars` string may be truncated if the number of padding characters
     * exceeds the padding length.
     *
     * @private
     * @param {string} string The string to create padding for.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the pad for `string`.
     */
    function createPad(string, length, chars) {
      var strLength = string.length;
      length = +length;

      if (strLength >= length || !nativeIsFinite(length)) {
        return '';
      }
      var padLength = length - strLength;
      chars = chars == null ? ' ' : baseToString(chars);
      return repeat(chars, ceil(padLength / chars.length)).slice(0, padLength);
    }

    /**
     * Creates a function that wraps `func` and invokes it with the optional `this`
     * binding of `thisArg` and the `partials` prepended to those provided to
     * the wrapper.
     *
     * @private
     * @param {Function} func The function to partially apply arguments to.
     * @param {number} bitmask The bitmask of flags. See `createWrapper` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to the new function.
     * @returns {Function} Returns the new bound function.
     */
    function createPartialWrapper(func, bitmask, thisArg, partials) {
      var isBind = bitmask & BIND_FLAG,
          Ctor = createCtorWrapper(func);

      function wrapper() {
        // Avoid `arguments` object use disqualifying optimizations by
        // converting it to an array before providing it `func`.
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(argsLength + leftLength);

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return (this instanceof wrapper ? Ctor : func).apply(isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to reference.
     * @param {number} bitmask The bitmask of flags.
     *  The bitmask may be composed of the following flags:
     *     1 - `_.bind`
     *     2 - `_.bindKey`
     *     4 - `_.curry` or `_.curryRight` of a bound function
     *     8 - `_.curry`
     *    16 - `_.curryRight`
     *    32 - `_.partial`
     *    64 - `_.partialRight`
     *   128 - `_.rearg`
     *   256 - `_.ary`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrapper(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & BIND_KEY_FLAG;
      if (!isBindKey && !isFunction(func)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);
        partials = holders = null;
      }
      length -= (holders ? holders.length : 0);
      if (bitmask & PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = null;
      }
      var data = !isBindKey && getData(func),
          newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];

      if (data && data !== true) {
        mergeData(newData, data);
        bitmask = newData[1];
        arity = newData[9];
      }
      newData[9] = arity == null
        ? (isBindKey ? 0 : func.length)
        : (nativeMax(arity - length, 0) || 0);

      if (bitmask == BIND_FLAG) {
        var result = createBindWrapper(newData[0], newData[2]);
      } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !newData[4].length) {
        result = createPartialWrapper.apply(null, newData);
      } else {
        result = createHybridWrapper.apply(null, newData);
      }
      var setter = data ? baseSetData : setData;
      return setter(result, newData);
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing arrays.
     * @param {boolean} [isWhere] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, equalFunc, customizer, isWhere, stackA, stackB) {
      var index = -1,
          arrLength = array.length,
          othLength = other.length,
          result = true;

      if (arrLength != othLength && !(isWhere && othLength > arrLength)) {
        return false;
      }
      // Deep compare the contents, ignoring non-numeric properties.
      while (result && ++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        result = undefined;
        if (customizer) {
          result = isWhere
            ? customizer(othValue, arrValue, index)
            : customizer(arrValue, othValue, index);
        }
        if (typeof result == 'undefined') {
          // Recursively compare arrays (susceptible to call stack limits).
          if (isWhere) {
            var othIndex = othLength;
            while (othIndex--) {
              othValue = other[othIndex];
              result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
              if (result) {
                break;
              }
            }
          } else {
            result = (arrValue && arrValue === othValue) || equalFunc(arrValue, othValue, customizer, isWhere, stackA, stackB);
          }
        }
      }
      return !!result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} value The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag) {
      switch (tag) {
        case boolTag:
        case dateTag:
          // Coerce dates and booleans to numbers, dates to milliseconds and booleans
          // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
          return +object == +other;

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case numberTag:
          // Treat `NaN` vs. `NaN` as equal.
          return (object != +object)
            ? other != +other
            // But, treat `-0` vs. `+0` as not equal.
            : (object == 0 ? ((1 / object) == (1 / other)) : object == +other);

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings primitives and string
          // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
          return object == baseToString(other);
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {boolean} [isWhere] Specify performing partial comparisons.
     * @param {Array} [stackA] Tracks traversed `value` objects.
     * @param {Array} [stackB] Tracks traversed `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, equalFunc, customizer, isWhere, stackA, stackB) {
      var objProps = keys(object),
          objLength = objProps.length,
          othProps = keys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isWhere) {
        return false;
      }
      var hasCtor,
          index = -1;

      while (++index < objLength) {
        var key = objProps[index],
            result = hasOwnProperty.call(other, key);

        if (result) {
          var objValue = object[key],
              othValue = other[key];

          result = undefined;
          if (customizer) {
            result = isWhere
              ? customizer(othValue, objValue, key)
              : customizer(objValue, othValue, key);
          }
          if (typeof result == 'undefined') {
            // Recursively compare objects (susceptible to call stack limits).
            result = (objValue && objValue === othValue) || equalFunc(objValue, othValue, customizer, isWhere, stackA, stackB);
          }
        }
        if (!result) {
          return false;
        }
        hasCtor || (hasCtor = key == 'constructor');
      }
      if (!hasCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor && ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Gets the extremum value of `collection` invoking `iteratee` for each value
     * in `collection` to generate the criterion by which the value is ranked.
     * The `iteratee` is invoked with three arguments; (value, index, collection).
     *
     * @private
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {boolean} [isMin] Specify returning the minimum, instead of the
     *  maximum, extremum value.
     * @returns {*} Returns the extremum value.
     */
    function extremumBy(collection, iteratee, isMin) {
      var exValue = isMin ? POSITIVE_INFINITY : NEGATIVE_INFINITY,
          computed = exValue,
          result = computed;

      baseEach(collection, function(value, index, collection) {
        var current = iteratee(value, index, collection);
        if ((isMin ? current < computed : current > computed) || (current === exValue && current === result)) {
          computed = current;
          result = value;
        }
      });
      return result;
    }

    /**
     * Gets the appropriate "callback" function. If the `_.callback` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseCallback` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function} Returns the chosen function or its result.
     */
    function getCallback(func, thisArg, argCount) {
      var result = lodash.callback || callback;
      result = result === callback ? baseCallback : result;
      return argCount ? result(func, thisArg, argCount) : result;
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the appropriate "indexOf" function. If the `_.indexOf` method is
     * customized this function returns the custom method, otherwise it returns
     * the `baseIndexOf` function. If arguments are provided the chosen function
     * is invoked with them and its result is returned.
     *
     * @private
     * @returns {Function|number} Returns the chosen function or its result.
     */
    function getIndexOf(collection, target, fromIndex) {
      var result = lodash.indexOf || indexOf;
      result = result === indexOf ? baseIndexOf : result;
      return collection ? result(collection, target, fromIndex) : result;
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} [transforms] The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms ? transforms.length : 0;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add array properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      var Ctor = object.constructor;
      if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
        Ctor = Object;
      }
      return new Ctor;
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return bufferClone(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          var buffer = object.buffer;
          return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          var result = new Ctor(object.source, reFlags.exec(object));
          result.lastIndex = object.lastIndex;
      }
      return result;
    }

    /**
     * Checks if `func` is eligible for `this` binding.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is eligible, else `false`.
     */
    function isBindable(func) {
      var support = lodash.support,
          result = !(support.funcNames ? func.name : support.funcDecomp);

      if (!result) {
        var source = fnToString.call(func);
        if (!support.funcNames) {
          result = !reFuncName.test(source);
        }
        if (!result) {
          // Check if `func` references the `this` keyword and store the result.
          result = reThis.test(source) || isNative(func);
          baseSetData(func, result);
        }
      }
      return result;
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      value = +value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return value > -1 && value % 1 == 0 && value < length;
    }

    /**
     * Checks if the provided arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number') {
        var length = object.length,
            prereq = isLength(length) && isIndex(index, length);
      } else {
        prereq = type == 'string' && index in value;
      }
      return prereq && object[index] === value;
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     */
    function isLength(value) {
      return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && (value === 0 ? ((1 / value) > 0) : !isObject(value));
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers required to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and `_.rearg`
     * augment function arguments, making the order in which they are executed important,
     * preventing the merging of metadata. However, we make an exception for a safe
     * common case where curried functions have `_.ary` and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask;

      var arityFlags = ARY_FLAG | REARG_FLAG,
          bindFlags = BIND_FLAG | BIND_KEY_FLAG,
          comboFlags = arityFlags | bindFlags | CURRY_BOUND_FLAG | CURRY_RIGHT_FLAG;

      var isAry = bitmask & ARY_FLAG && !(srcBitmask & ARY_FLAG),
          isRearg = bitmask & REARG_FLAG && !(srcBitmask & REARG_FLAG),
          argPos = (isRearg ? data : source)[7],
          ary = (isAry ? data : source)[8];

      var isCommon = !(bitmask >= REARG_FLAG && srcBitmask > bindFlags) &&
        !(bitmask > bindFlags && srcBitmask >= REARG_FLAG);

      var isCombo = (newBitmask >= arityFlags && newBitmask <= comboFlags) &&
        (bitmask < REARG_FLAG || ((isRearg || isAry) && argPos.length <= ary));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= (bitmask & BIND_FLAG) ? 0 : CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : arrayCopy(value);
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : arrayCopy(source[4]);
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : arrayCopy(value);
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : arrayCopy(source[6]);
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = arrayCopy(value);
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * A specialized version of `_.pick` that picks `object` properties specified
     * by the `props` array.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} props The property names to pick.
     * @returns {Object} Returns the new object.
     */
    function pickByArray(object, props) {
      object = toObject(object);

      var index = -1,
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index];
        if (key in object) {
          result[key] = object[key];
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.pick` that picks `object` properties `predicate`
     * returns truthy for.
     *
     * @private
     * @param {Object} object The source object.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Object} Returns the new object.
     */
    function pickByCallback(object, predicate) {
      var result = {};
      baseForIn(object, function(value, key, object) {
        if (predicate(value, key, object)) {
          result[key] = value;
        }
      });
      return result;
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = arrayCopy(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity function
     * to avoid garbage collection pauses in V8. See [V8 issue 2070](https://code.google.com/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = (function() {
      var count = 0,
          lastCalled = 0;

      return function(key, value) {
        var stamp = now(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return key;
          }
        } else {
          count = 0;
        }
        return baseSetData(key, value);
      };
    }());

    /**
     * A fallback implementation of `_.isPlainObject` which checks if `value`
     * is an object created by the `Object` constructor or has a `[[Prototype]]`
     * of `null`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     */
    function shimIsPlainObject(value) {
      var Ctor,
          support = lodash.support;

      // Exit early for non `Object` objects.
      if (!(isObjectLike(value) && objToString.call(value) == objectTag) ||
          (!hasOwnProperty.call(value, 'constructor') &&
            (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
        return false;
      }
      // IE < 9 iterates inherited properties before own properties. If the first
      // iterated property is an object's own property then there are no inherited
      // enumerable properties.
      var result;
      // In most environments an object's own properties are iterated before
      // its inherited properties. If the last iterated property is an object's
      // own property then there are no inherited enumerable properties.
      baseForIn(value, function(subValue, key) {
        result = key;
      });
      return typeof result == 'undefined' || hasOwnProperty.call(value, result);
    }

    /**
     * A fallback implementation of `Object.keys` which creates an array of the
     * own enumerable property names of `object`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the array of property names.
     */
    function shimKeys(object) {
      var props = keysIn(object),
          propsLength = props.length,
          length = propsLength && object.length,
          support = lodash.support;

      var allowIndexes = length && isLength(length) &&
        (isArray(object) || (support.nonEnumArgs && isArguments(object)));

      var index = -1,
          result = [];

      while (++index < propsLength) {
        var key = props[index];
        if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to an array-like object if it is not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Array|Object} Returns the array-like object.
     */
    function toIterable(value) {
      if (value == null) {
        return [];
      }
      if (!isLength(value.length)) {
        return values(value);
      }
      return isObject(value) ? value : Object(value);
    }

    /**
     * Converts `value` to an object if it is not one.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {Object} Returns the object.
     */
    function toObject(value) {
      return isObject(value) ? value : Object(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `collection` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to process.
     * @param {numer} [size=1] The length of each chunk.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new array containing chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if (guard ? isIterateeCall(array, size, guard) : size == null) {
        size = 1;
      } else {
        size = nativeMax(+size || 1, 1);
      }
      var index = 0,
          length = array ? array.length : 0,
          resIndex = -1,
          result = Array(ceil(length / size));

      while (index < length) {
        result[++resIndex] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array ? array.length : 0,
          resIndex = -1,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[++resIndex] = value;
        }
      }
      return result;
    }

    /**
     * Creates an array excluding all values of the provided arrays using
     * `SameValueZero` for equality comparisons.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The arrays of values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.difference([1, 2, 3], [5, 2, 10]);
     * // => [1, 3]
     */
    function difference() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var value = arguments[index];
        if (isArray(value) || isArguments(value)) {
          break;
        }
      }
      return baseDifference(value, baseFlatten(arguments, false, true, ++index));
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per element.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRightWhile([1, 2, 3], function(n) { return n > 1; });
     * // => [1]
     *
     * var users = [
     *   { 'user': 'barney',  'status': 'busy', 'active': false },
     *   { 'user': 'fred',    'status': 'busy', 'active': true },
     *   { 'user': 'pebbles', 'status': 'away', 'active': true }
     * ];
     *
     * // using the "_.property" callback shorthand
     * _.pluck(_.dropRightWhile(users, 'active'), 'user');
     * // => ['barney']
     *
     * // using the "_.matches" callback shorthand
     * _.pluck(_.dropRightWhile(users, { 'status': 'away' }), 'user');
     * // => ['barney', 'fred']
     */
    function dropRightWhile(array, predicate, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      predicate = getCallback(predicate, thisArg, 3);
      while (length-- && predicate(array[length], length, array)) {}
      return baseSlice(array, 0, length + 1);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * bound to `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per element.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropWhile([1, 2, 3], function(n) { return n < 3; });
     * // => [3]
     *
     * var users = [
     *   { 'user': 'barney',  'status': 'busy', 'active': true },
     *   { 'user': 'fred',    'status': 'busy', 'active': false },
     *   { 'user': 'pebbles', 'status': 'away', 'active': true }
     * ];
     *
     * // using the "_.property" callback shorthand
     * _.pluck(_.dropWhile(users, 'active'), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the "_.matches" callback shorthand
     * _.pluck(_.dropWhile(users, { 'status': 'busy' }), 'user');
     * // => ['pebbles']
     */
    function dropWhile(array, predicate, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var index = -1;
      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length && predicate(array[index], index, array)) {}
      return baseSlice(array, index);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for, instead of the element itself.
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.findIndex(users, function(chr) { return chr.age < 40; });
     * // => 0
     *
     * // using the "_.matches" callback shorthand
     * _.findIndex(users, { 'age': 1 });
     * // => 2
     *
     * // using the "_.property" callback shorthand
     * _.findIndex(users, 'active');
     * // => 1
     */
    function findIndex(array, predicate, thisArg) {
      var index = -1,
          length = array ? array.length : 0;

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.findLastIndex(users, function(chr) { return chr.age < 40; });
     * // => 2
     *
     * // using the "_.matches" callback shorthand
     * _.findLastIndex(users, { 'age': 40 });
     * // => 1
     *
     * // using the "_.property" callback shorthand
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, thisArg) {
      var length = array ? array.length : 0;
      predicate = getCallback(predicate, thisArg, 3);
      while (length--) {
        if (predicate(array[length], length, array)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias head
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.first([1, 2, 3]);
     * // => 1
     *
     * _.first([]);
     * // => undefined
     */
    function first(array) {
      return array ? array[0] : undefined;
    }

    /**
     * Flattens a nested array. If `isDeep` is `true` the array is recursively
     * flattened, otherwise it is only flattened a single level.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {boolean} [isDeep] Specify a deep flatten.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, [[4]]];
     *
     * // using `isDeep`
     * _.flatten([1, [2], [3, [[4]]]], true);
     * // => [1, 2, 3, 4];
     */
    function flatten(array, isDeep, guard) {
      var length = array ? array.length : 0;
      if (guard && isIterateeCall(array, isDeep, guard)) {
        isDeep = false;
      }
      return length ? baseFlatten(array, isDeep) : [];
    }

    /**
     * Recursively flattens a nested array.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to recursively flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2], [3, [[4]]]]);
     * // => [1, 2, 3, 4];
     */
    function flattenDeep(array) {
      var length = array ? array.length : 0;
      return length ? baseFlatten(array, true) : [];
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using `SameValueZero` for equality comparisons. If `fromIndex` is negative,
     * it is used as the offset from the end of `array`. If `array` is sorted
     * providing `true` for `fromIndex` performs a faster binary search.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=0] The index to search from or `true`
     *  to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 1
     *
     * // using `fromIndex`
     * _.indexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 4
     *
     * // performing a binary search
     * _.indexOf([4, 4, 5, 5, 6, 6], 5, true);
     * // => 2
     */
    function indexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      } else if (fromIndex) {
        var index = binaryIndex(array, value),
            other = array[index];

        return (value === value ? value === other : other !== other) ? index : -1;
      }
      return baseIndexOf(array, value, fromIndex);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      return dropRight(array, 1);
    }

    /**
     * Creates an array of unique values in all provided arrays using `SameValueZero`
     * for equality comparisons.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of shared values.
     * @example
     *
     * _.intersection([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2]
     */
    function intersection() {
      var args = [],
          argsIndex = -1,
          argsLength = arguments.length,
          caches = [],
          indexOf = getIndexOf(),
          isCommon = indexOf == baseIndexOf;

      while (++argsIndex < argsLength) {
        var value = arguments[argsIndex];
        if (isArray(value) || isArguments(value)) {
          args.push(value);
          caches.push(isCommon && value.length >= 120 && createCache(argsIndex && value));
        }
      }
      argsLength = args.length;
      var array = args[0],
          index = -1,
          length = array ? array.length : 0,
          result = [],
          seen = caches[0];

      outer:
      while (++index < length) {
        value = array[index];
        if ((seen ? cacheIndexOf(seen, value) : indexOf(result, value)) < 0) {
          argsIndex = argsLength;
          while (--argsIndex) {
            var cache = caches[argsIndex];
            if ((cache ? cacheIndexOf(cache, value) : indexOf(args[argsIndex], value)) < 0) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(value);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array ? array.length : 0;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to search.
     * @param {*} value The value to search for.
     * @param {boolean|number} [fromIndex=array.length-1] The index to search from
     *  or `true` to perform a binary search on a sorted array.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
     * // => 4
     *
     * // using `fromIndex`
     * _.lastIndexOf([1, 2, 3, 1, 2, 3], 2, 3);
     * // => 1
     *
     * // performing a binary search
     * _.lastIndexOf([4, 4, 5, 5, 6, 6], 5, true);
     * // => 3
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array ? array.length : 0;
      if (!length) {
        return -1;
      }
      var index = length;
      if (typeof fromIndex == 'number') {
        index = (fromIndex < 0 ? nativeMax(length + fromIndex, 0) : nativeMin(fromIndex || 0, length - 1)) + 1;
      } else if (fromIndex) {
        index = binaryIndex(array, value, true) - 1;
        var other = array[index];
        return (value === value ? value === other : other !== other) ? index : -1;
      }
      if (value !== value) {
        return indexOfNaN(array, index, true);
      }
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * Removes all provided values from `array` using `SameValueZero` for equality
     * comparisons.
     *
     * **Notes:**
     *  - Unlike `_.without`, this method mutates `array`.
     *  - `SameValueZero` comparisons are like strict equality comparisons, e.g. `===`,
     *    except that `NaN` matches `NaN`. See the [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     *    for more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3, 1, 2, 3];
     * _.pull(array, 2, 3);
     * console.log(array);
     * // => [1, 1]
     */
    function pull() {
      var array = arguments[0];
      if (!(array && array.length)) {
        return array;
      }
      var index = 0,
          indexOf = getIndexOf(),
          length = arguments.length;

      while (++index < length) {
        var fromIndex = 0,
            value = arguments[index];

        while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * Removes elements from `array` corresponding to the given indexes and returns
     * an array of the removed elements. Indexes may be specified as an array of
     * indexes or as individual arguments.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [5, 10, 15, 20];
     * var evens = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => [5, 15]
     *
     * console.log(evens);
     * // => [10, 20]
     */
    function pullAt(array) {
      return basePullAt(array || [], baseFlatten(arguments, false, false, 1));
    }

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is bound to
     * `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) { return n % 2 == 0; });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate, thisArg) {
      var index = -1,
          length = array ? array.length : 0,
          result = [];

      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          splice.call(array, index--, 1);
          length--;
        }
      }
      return result;
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @alias tail
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.rest([1, 2, 3]);
     * // => [2, 3]
     */
    function rest(array) {
      return drop(array, 1);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This function is used instead of `Array#slice` to support node
     * lists in IE < 9 and to ensure dense arrays are returned.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value` should
     * be inserted into `array` in order to maintain its sort order. If an iteratee
     * function is provided it is invoked for `value` and each element of `array`
     * to compute their sort ranking. The iteratee is bound to `thisArg` and
     * invoked with one argument; (value).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     *
     * _.sortedIndex([4, 4, 5, 5, 6, 6], 5);
     * // => 2
     *
     * var dict = { 'data': { 'thirty': 30, 'forty': 40, 'fifty': 50 } };
     *
     * // using an iteratee function
     * _.sortedIndex(['thirty', 'fifty'], 'forty', function(word) {
     *   return this.data[word];
     * }, dict);
     * // => 1
     *
     * // using the "_.property" callback shorthand
     * _.sortedIndex([{ 'x': 30 }, { 'x': 50 }], { 'x': 40 }, 'x');
     * // => 1
     */
    function sortedIndex(array, value, iteratee, thisArg) {
      var func = getCallback(iteratee);
      return (func === baseCallback && iteratee == null)
        ? binaryIndex(array, value)
        : binaryIndexBy(array, value, func(iteratee, thisArg, 1));
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 4, 5, 5, 6, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value, iteratee, thisArg) {
      var func = getCallback(iteratee);
      return (func === baseCallback && iteratee == null)
        ? binaryIndex(array, value, true)
        : binaryIndexBy(array, value, func(iteratee, thisArg, 1), true);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      if (guard ? isIterateeCall(array, n, guard) : n == null) {
        n = 1;
      }
      n = length - (+n || 0);
      return baseSlice(array, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is bound to `thisArg`
     * and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per element.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRightWhile([1, 2, 3], function(n) { return n > 1; });
     * // => [2, 3]
     *
     * var users = [
     *   { 'user': 'barney',  'status': 'busy', 'active': false },
     *   { 'user': 'fred',    'status': 'busy', 'active': true },
     *   { 'user': 'pebbles', 'status': 'away', 'active': true }
     * ];
     *
     * // using the "_.property" callback shorthand
     * _.pluck(_.takeRightWhile(users, 'active'), 'user');
     * // => ['fred', 'pebbles']
     *
     * // using the "_.matches" callback shorthand
     * _.pluck(_.takeRightWhile(users, { 'status': 'away' }), 'user');
     * // => ['pebbles']
     */
    function takeRightWhile(array, predicate, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      predicate = getCallback(predicate, thisArg, 3);
      while (length-- && predicate(array[length], length, array)) {}
      return baseSlice(array, length + 1);
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is bound to
     * `thisArg` and invoked with three arguments; (value, index, array).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per element.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeWhile([1, 2, 3], function(n) { return n < 3; });
     * // => [1, 2]
     *
     * var users = [
     *   { 'user': 'barney',  'status': 'busy', 'active': true },
     *   { 'user': 'fred',    'status': 'busy', 'active': false },
     *   { 'user': 'pebbles', 'status': 'away', 'active': true }
     * ];
     *
     * // using the "_.property" callback shorthand
     * _.pluck(_.takeWhile(users, 'active'), 'user');
     * // => ['barney']
     *
     * // using the "_.matches" callback shorthand
     * _.pluck(_.takeWhile(users, { 'status': 'busy' }), 'user');
     * // => ['barney', 'fred']
     */
    function takeWhile(array, predicate, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      var index = -1;
      predicate = getCallback(predicate, thisArg, 3);
      while (++index < length && predicate(array[index], index, array)) {}
      return baseSlice(array, 0, index);
    }

    /**
     * Creates an array of unique values, in order, of the provided arrays using
     * `SameValueZero` for equality comparisons.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([1, 2, 3], [5, 2, 1, 4], [2, 1]);
     * // => [1, 2, 3, 5, 4]
     */
    function union() {
      return baseUniq(baseFlatten(arguments, false, true));
    }

    /**
     * Creates a duplicate-value-free version of an array using `SameValueZero`
     * for equality comparisons. Providing `true` for `isSorted` performs a faster
     * search algorithm for sorted arrays. If an iteratee function is provided it
     * is invoked for each value in the array to generate the criterion by which
     * uniqueness is computed. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments; (value, index, array).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @alias unique
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {boolean} [isSorted] Specify the array is sorted.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     *  If a property name or object is provided it is used to create a "_.property"
     *  or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new duplicate-value-free array.
     * @example
     *
     * _.uniq([1, 2, 1]);
     * // => [1, 2]
     *
     * // using `isSorted`
     * _.uniq([1, 1, 2], true);
     * // => [1, 2]
     *
     * // using an iteratee function
     * _.uniq([1, 2.5, 1.5, 2], function(n) { return this.floor(n); }, Math);
     * // => [1, 2.5]
     *
     * // using the "_.property" callback shorthand
     * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniq(array, isSorted, iteratee, thisArg) {
      var length = array ? array.length : 0;
      if (!length) {
        return [];
      }
      // Juggle arguments.
      if (typeof isSorted != 'boolean' && isSorted != null) {
        thisArg = iteratee;
        iteratee = isIterateeCall(array, isSorted, thisArg) ? null : isSorted;
        isSorted = false;
      }
      var func = getCallback();
      if (!(func === baseCallback && iteratee == null)) {
        iteratee = func(iteratee, thisArg, 3);
      }
      return (isSorted && getIndexOf() == baseIndexOf)
        ? sortedUniq(array, iteratee)
        : baseUniq(array, iteratee);
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-`_.zip`
     * configuration.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     *
     * _.unzip(zipped);
     * // => [['fred', 'barney'], [30, 40], [true, false]]
     */
    function unzip(array) {
      var index = -1,
          length = (array && array.length && arrayMax(arrayMap(array, getLength))) >>> 0,
          result = Array(length);

      while (++index < length) {
        result[index] = arrayMap(array, baseProperty(index));
      }
      return result;
    }

    /**
     * Creates an array excluding all provided values using `SameValueZero` for
     * equality comparisons.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {Array} array The array to filter.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.without([1, 2, 1, 0, 3, 1, 4], 0, 1);
     * // => [2, 3, 4]
     */
    function without(array) {
      return baseDifference(array, baseSlice(arguments, 1));
    }

    /**
     * Creates an array that is the symmetric difference of the provided arrays.
     * See [Wikipedia](https://en.wikipedia.org/wiki/Symmetric_difference) for
     * more details.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of values.
     * @example
     *
     * _.xor([1, 2, 3], [5, 2, 1, 4]);
     * // => [3, 5, 4]
     *
     * _.xor([1, 2, 5], [2, 3, 5], [3, 4, 5]);
     * // => [1, 4, 5]
     */
    function xor() {
      var index = -1,
          length = arguments.length;

      while (++index < length) {
        var array = arguments[index];
        if (isArray(array) || isArguments(array)) {
          var result = result
            ? baseDifference(result, array).concat(baseDifference(array, result))
            : array;
        }
      }
      return result ? baseUniq(result) : [];
    }

    /**
     * Creates an array of grouped elements, the first of which contains the first
     * elements of the given arrays, the second of which contains the second elements
     * of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['fred', 'barney'], [30, 40], [true, false]);
     * // => [['fred', 30, true], ['barney', 40, false]]
     */
    function zip() {
      var length = arguments.length,
          array = Array(length);

      while (length--) {
        array[length] = arguments[length];
      }
      return unzip(array);
    }

    /**
     * Creates an object composed from arrays of property names and values. Provide
     * either a single two dimensional array, e.g. `[[key1, value1], [key2, value2]]`
     * or two arrays, one of property names and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @alias object
     * @category Array
     * @param {Array} props The property names.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['fred', 'barney'], [30, 40]);
     * // => { 'fred': 30, 'barney': 40 }
     */
    function zipObject(props, values) {
      var index = -1,
          length = props ? props.length : 0,
          result = {};

      if (length && !values && !isArray(props[0])) {
        values = [];
      }
      while (++index < length) {
        var key = props[index];
        if (values) {
          result[key] = values[index];
        } else if (key) {
          result[key[0]] = key[1];
        }
      }
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object that wraps `value` with explicit method
     * chaining enabled.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` object.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _.chain(users)
     *   .sortBy('age')
     *   .map(function(chr) { return chr.user + ' is ' + chr.age; })
     *   .first()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor is
     * bound to `thisArg` and invoked with one argument; (value). The purpose of
     * this method is to "tap into" a method chain in order to perform operations
     * on intermediate results within the chain.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) { array.pop(); })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor, thisArg) {
      interceptor.call(thisArg, value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     *
     * @static
     * @memberOf _
     * @category Chain
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @param {*} [thisArg] The `this` binding of `interceptor`.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _([1, 2, 3])
     *  .last()
     *  .thru(function(value) { return [value]; })
     *  .value();
     * // => [3]
     */
    function thru(value, interceptor, thisArg) {
      return interceptor.call(thisArg, value);
    }

    /**
     * Enables explicit method chaining on the wrapper object.
     *
     * @name chain
     * @memberOf _
     * @category Chain
     * @returns {*} Returns the `lodash` object.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // without explicit chaining
     * _(users).first();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // with explicit chaining
     * _(users).chain()
     *   .first()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Reverses the wrapped array so the first element becomes the last, the
     * second element becomes the second to last, and so on.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @category Chain
     * @returns {Object} Returns the new reversed `lodash` object.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        return new LodashWrapper(value.reverse());
      }
      return this.thru(function(value) {
        return value.reverse();
      });
    }

    /**
     * Produces the result of coercing the unwrapped value to a string.
     *
     * @name toString
     * @memberOf _
     * @category Chain
     * @returns {string} Returns the coerced string value.
     * @example
     *
     * _([1, 2, 3]).toString();
     * // => '1,2,3'
     */
    function wrapperToString() {
      return (this.value() + '');
    }

    /**
     * Executes the chained sequence to extract the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @alias toJSON, valueOf
     * @category Chain
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements corresponding to the given keys, or indexes,
     * of `collection`. Keys may be specified as individual arguments or as arrays
     * of keys.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(number|number[]|string|string[])} [props] The property names
     *  or indexes of elements to pick, specified individually or in arrays.
     * @returns {Array} Returns the new array of picked elements.
     * @example
     *
     * _.at(['a', 'b', 'c', 'd', 'e'], [0, 2, 4]);
     * // => ['a', 'c', 'e']
     *
     * _.at(['fred', 'barney', 'pebbles'], 0, 2);
     * // => ['fred', 'pebbles']
     */
    function at(collection) {
      var length = collection ? collection.length : 0;
      if (isLength(length)) {
        collection = toIterable(collection);
      }
      return baseAt(collection, baseFlatten(arguments, false, false, 1));
    }

    /**
     * Checks if `value` is in `collection` using `SameValueZero` for equality
     * comparisons. If `fromIndex` is negative, it is used as the offset from
     * the end of `collection`.
     *
     * **Note:** `SameValueZero` comparisons are like strict equality comparisons,
     * e.g. `===`, except that `NaN` matches `NaN`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero)
     * for more details.
     *
     * @static
     * @memberOf _
     * @alias contains, include
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {*} target The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {boolean} Returns `true` if a matching element is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
     * // => true
     *
     * _.includes('pebbles', 'eb');
     * // => true
     */
    function includes(collection, target, fromIndex) {
      var length = collection ? collection.length : 0;
      if (!isLength(length)) {
        collection = values(collection);
        length = collection.length;
      }
      if (!length) {
        return false;
      }
      if (typeof fromIndex == 'number') {
        fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
      } else {
        fromIndex = 0;
      }
      return (typeof collection == 'string' || !isArray(collection) && isString(collection))
        ? (fromIndex < length && collection.indexOf(target, fromIndex) > -1)
        : (getIndexOf(collection, target, fromIndex) > -1);
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the number of times the key was returned by `iteratee`.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) { return Math.floor(n); });
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy([4.3, 6.1, 6.4], function(n) { return this.floor(n); }, Math);
     * // => { '4': 1, '6': 2 }
     *
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      hasOwnProperty.call(result, key) ? ++result[key] : (result[key] = 1);
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * The predicate is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias all
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes']);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // using the "_.property" callback shorthand
     * _.every(users, 'age');
     * // => true
     *
     * // using the "_.matches" callback shorthand
     * _.every(users, { 'age': 36 });
     * // => false
     */
    function every(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (typeof predicate != 'function' || typeof thisArg != 'undefined') {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias select
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var evens = _.filter([1, 2, 3, 4], function(n) { return n % 2 == 0; });
     * // => [2, 4]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the "_.property" callback shorthand
     * _.pluck(_.filter(users, 'active'), 'user');
     * // => ['fred']
     *
     * // using the "_.matches" callback shorthand
     * _.pluck(_.filter(users, { 'age': 36 }), 'user');
     * // => ['barney']
     */
    function filter(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, predicate);
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is bound to `thisArg` and
     * invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias detect
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.result(_.find(users, function(chr) { return chr.age < 40; }), 'user');
     * // => 'barney'
     *
     * // using the "_.matches" callback shorthand
     * _.result(_.find(users, { 'age': 1 }), 'user');
     * // => 'pebbles'
     *
     * // using the "_.property" callback shorthand
     * _.result(_.find(users, 'active'), 'user');
     * // => 'fred'
     */
    function find(collection, predicate, thisArg) {
      if (isArray(collection)) {
        var index = findIndex(collection, predicate, thisArg);
        return index > -1 ? collection[index] : undefined;
      }
      predicate = getCallback(predicate, thisArg, 3);
      return baseFind(collection, predicate, baseEach);
    }

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) { return n % 2 == 1; });
     * // => 3
     */
    function findLast(collection, predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 3);
      return baseFind(collection, predicate, baseEachRight);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning the first element that has equivalent property
     * values.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'status': 'busy' },
     *   { 'user': 'fred',   'age': 40, 'status': 'busy' }
     * ];
     *
     * _.result(_.findWhere(users, { 'status': 'busy' }), 'user');
     * // => 'barney'
     *
     * _.result(_.findWhere(users, { 'age': 40 }), 'user');
     * // => 'fred'
     */
    function findWhere(collection, source) {
      return find(collection, matches(source));
    }

    /**
     * Iterates over elements of `collection` invoking `iteratee` for each element.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection). Iterator functions may exit iteration early
     * by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a `length` property
     * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
     * may be used for object iteration.
     *
     * @static
     * @memberOf _
     * @alias each
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEach(function(n) { console.log(n); });
     * // => logs each value from left to right and returns the array
     *
     * _.forEach({ 'one': 1, 'two': 2, 'three': 3 }, function(n, key) { console.log(n, key); });
     * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
     */
    function forEach(collection, iteratee, thisArg) {
      return (typeof iteratee == 'function' && typeof thisArg == 'undefined' && isArray(collection))
        ? arrayEach(collection, iteratee)
        : baseEach(collection, bindCallback(iteratee, thisArg, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias eachRight
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array|Object|string} Returns `collection`.
     * @example
     *
     * _([1, 2, 3]).forEachRight(function(n) { console.log(n); }).join(',');
     * // => logs each value from right to left and returns the array
     */
    function forEachRight(collection, iteratee, thisArg) {
      return (typeof iteratee == 'function' && typeof thisArg == 'undefined' && isArray(collection))
        ? arrayEachRight(collection, iteratee)
        : baseEachRight(collection, bindCallback(iteratee, thisArg, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is an array of the elements responsible for generating the key.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) { return Math.floor(n); });
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * _.groupBy([4.2, 6.1, 6.4], function(n) { return this.floor(n); }, Math);
     * // => { '4': [4.2], '6': [6.1, 6.4] }
     *
     * // using the "_.property" callback shorthand
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        result[key] = [value];
      }
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` through `iteratee`. The corresponding value
     * of each key is the last element responsible for generating the key. The
     * iteratee function is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var keyData = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.indexBy(keyData, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) { return String.fromCharCode(object.code); });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.indexBy(keyData, function(object) { return this.fromCharCode(object.code); }, String);
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     */
    var indexBy = createAggregator(function(result, value, key) {
      result[key] = value;
    });

    /**
     * Invokes the method named by `methodName` on each element in `collection`,
     * returning an array of the results of each invoked method. Any additional
     * arguments are provided to each invoked method. If `methodName` is a function
     * it is invoked for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|string} methodName The name of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invoke([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invoke([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    function invoke(collection, methodName) {
      return baseInvoke(collection, methodName, baseSlice(arguments, 2));
    }

    /**
     * Creates an array of values by running each element in `collection` through
     * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments; (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias collect
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * _.map([1, 2, 3], function(n) { return n * 3; });
     * // => [3, 6, 9]
     *
     * _.map({ 'one': 1, 'two': 2, 'three': 3 }, function(n) { return n * 3; });
     * // => [3, 6, 9] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // using the "_.property" callback shorthand
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee, thisArg) {
      var func = isArray(collection) ? arrayMap : baseMap;
      iteratee = getCallback(iteratee, thisArg, 3);
      return func(collection, iteratee);
    }

    /**
     * Gets the maximum value of `collection`. If `collection` is empty or falsey
     * `-Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     *  If a property name or object is provided it is used to create a "_.property"
     *  or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => -Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.max(users, function(chr) { return chr.age; });
     * // => { 'user': 'fred', 'age': 40 };
     *
     * // using the "_.property" callback shorthand
     * _.max(users, 'age');
     * // => { 'user': 'fred', 'age': 40 };
     */
    var max = createExtremum(arrayMax);

    /**
     * Gets the minimum value of `collection`. If `collection` is empty or falsey
     * `Infinity` is returned. If an iteratee function is provided it is invoked
     * for each value in `collection` to generate the criterion by which the value
     * is ranked. The `iteratee` is bound to `thisArg` and invoked with three
     * arguments; (value, index, collection).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [iteratee] The function invoked per iteration.
     *  If a property name or object is provided it is used to create a "_.property"
     *  or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => Infinity
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.min(users, function(chr) { return chr.age; });
     * // => { 'user': 'barney', 'age': 36 };
     *
     * // using the "_.property" callback shorthand
     * _.min(users, 'age');
     * // => { 'user': 'barney', 'age': 36 };
     */
    var min = createExtremum(arrayMin, true);

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, while the second of which
     * contains elements `predicate` returns falsey for. The predicate is bound
     * to `thisArg` and invoked with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * _.partition([1, 2, 3], function(n) { return n % 2; });
     * // => [[1, 3], [2]]
     *
     * _.partition([1.2, 2.3, 3.4], function(n) { return this.floor(n) % 2; }, Math);
     * // => [[1, 3], [2]]
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * // using the "_.matches" callback shorthand
     * _.map(_.partition(users, { 'age': 1 }), function(array) { return _.pluck(array, 'user'); });
     * // => [['pebbles'], ['barney', 'fred']]
     *
     * // using the "_.property" callback shorthand
     * _.map(_.partition(users, 'active'), function(array) { return _.pluck(array, 'user'); });
     * // => [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Gets the value of `key` from all elements in `collection`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {string} key The key of the property to pluck.
     * @returns {Array} Returns the property values.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * _.pluck(users, 'user');
     * // => ['barney', 'fred']
     *
     * var userIndex = _.indexBy(users, 'user');
     * _.pluck(userIndex, 'age');
     * // => [36, 40] (iteration order is not guaranteed)
     */
    function pluck(collection, key) {
      return map(collection, property(key));
    }

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` through `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not provided the first element of `collection` is used as the initial
     * value. The `iteratee` is bound to `thisArg`and invoked with four arguments;
     * (accumulator, value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @alias foldl, inject
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var sum = _.reduce([1, 2, 3], function(sum, n) { return sum + n; });
     * // => 6
     *
     * var mapped = _.reduce({ 'a': 1, 'b': 2, 'c': 3 }, function(result, n, key) {
     *   result[key] = n * 3;
     *   return result;
     * }, {});
     * // => { 'a': 3, 'b': 6, 'c': 9 } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator, thisArg) {
      var func = isArray(collection) ? arrayReduce : baseReduce;
      return func(collection, getCallback(iteratee, thisArg, 4), accumulator, arguments.length < 3, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @alias foldr
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     * _.reduceRight(array, function(flattened, other) { return flattened.concat(other); }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator, thisArg) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce;
      return func(collection, getCallback(iteratee, thisArg, 4), accumulator, arguments.length < 3, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var odds = _.reject([1, 2, 3, 4], function(n) { return n % 2 == 0; });
     * // => [1, 3]
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the "_.property" callback shorthand
     * _.pluck(_.reject(users, 'active'), 'user');
     * // => ['barney']
     *
     * // using the "_.matches" callback shorthand
     * _.pluck(_.reject(users, { 'age': 36 }), 'user');
     * // => ['fred']
     */
    function reject(collection, predicate, thisArg) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      predicate = getCallback(predicate, thisArg, 3);
      return func(collection, function(value, index, collection) {
        return !predicate(value, index, collection);
      });
    }

    /**
     * Gets a random element or `n` random elements from a collection.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to sample.
     * @param {number} [n] The number of elements to sample.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {*} Returns the random sample(s).
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     *
     * _.sample([1, 2, 3, 4], 2);
     * // => [3, 1]
     */
    function sample(collection, n, guard) {
      if (guard ? isIterateeCall(collection, n, guard) : n == null) {
        collection = toIterable(collection);
        var length = collection.length;
        return length > 0 ? collection[baseRandom(0, length - 1)] : undefined;
      }
      var result = shuffle(collection);
      result.length = nativeMin(n < 0 ? 0 : (+n || 0), result.length);
      return result;
    }

    /**
     * Creates an array of shuffled values, using a version of the Fisher-Yates
     * shuffle. See [Wikipedia](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      collection = toIterable(collection);

      var index = -1,
          length = collection.length,
          result = Array(length);

      while (++index < length) {
        var rand = baseRandom(0, index);
        if (index != rand) {
          result[index] = result[rand];
        }
        result[rand] = collection[index];
      }
      return result;
    }

    /**
     * Gets the size of `collection` by returning `collection.length` for
     * array-like values or the number of own enumerable properties for objects.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the size of `collection`.
     * @example
     *
     * _.size([1, 2]);
     * // => 2
     *
     * _.size({ 'one': 1, 'two': 2, 'three': 3 });
     * // => 3
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      var length = collection ? collection.length : 0;
      return isLength(length) ? length : keys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * The function returns as soon as it finds a passing value and does not iterate
     * over the entire collection. The predicate is bound to `thisArg` and invoked
     * with three arguments; (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @alias any
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * // using the "_.property" callback shorthand
     * _.some(users, 'active');
     * // => true
     *
     * // using the "_.matches" callback shorthand
     * _.some(users, { 'age': 1 });
     * // => false
     */
    function some(collection, predicate, thisArg) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (typeof predicate != 'function' || typeof thisArg != 'undefined') {
        predicate = getCallback(predicate, thisArg, 3);
      }
      return func(collection, predicate);
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection through `iteratee`. This method performs
     * a stable sort, that is, it preserves the original sort order of equal elements.
     * The `iteratee` is bound to `thisArg` and invoked with three arguments;
     * (value, index|key, collection).
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {Array|Function|Object|string} [iteratee=_.identity] The function
     *  invoked per iteration. If a property name or an object is provided it is
     *  used to create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * _.sortBy([1, 2, 3], function(n) { return Math.sin(n); });
     * // => [3, 1, 2]
     *
     * _.sortBy([1, 2, 3], function(n) { return this.sin(n); }, Math);
     * // => [3, 1, 2]
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'pebbles' },
     *   { 'user': 'barney' }
     * ];
     *
     * // using the "_.property" callback shorthand
     * _.pluck(_.sortBy(users, 'user'), 'user');
     * // => ['barney', 'fred', 'pebbles']
     */
    function sortBy(collection, iteratee, thisArg) {
      var index = -1,
          length = collection ? collection.length : 0,
          result = isLength(length) ? Array(length) : [];

      if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
        iteratee = null;
      }
      iteratee = getCallback(iteratee, thisArg, 3);
      baseEach(collection, function(value, key, collection) {
        result[++index] = { 'criteria': iteratee(value, key, collection), 'index': index, 'value': value };
      });
      return baseSortBy(result, compareAscending);
    }

    /**
     * This method is like `_.sortBy` except that it sorts by property names
     * instead of an iteratee function.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to iterate over.
     * @param {...(string|string[])} props The property names to sort by,
     *  specified as individual property names or arrays of property names.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 26 },
     *   { 'user': 'fred',   'age': 30 }
     * ];
     *
     * _.map(_.sortByAll(users, ['user', 'age']), _.values);
     * // => [['barney', 26], ['barney', 36], ['fred', 30], ['fred', 40]]
     */
    function sortByAll(collection) {
      var args = arguments;
      if (args.length > 3 && isIterateeCall(args[1], args[2], args[3])) {
        args = [collection, args[1]];
      }
      var index = -1,
          length = collection ? collection.length : 0,
          props = baseFlatten(args, false, false, 1),
          result = isLength(length) ? Array(length) : [];

      baseEach(collection, function(value, key, collection) {
        var length = props.length,
            criteria = Array(length);

        while (length--) {
          criteria[length] = value == null ? undefined : value[props[length]];
        }
        result[++index] = { 'criteria': criteria, 'index': index, 'value': value };
      });
      return baseSortBy(result, compareMultipleAscending);
    }

    /**
     * Performs a deep comparison between each element in `collection` and the
     * source object, returning an array of all elements that have equivalent
     * property values.
     *
     * @static
     * @memberOf _
     * @category Collection
     * @param {Array|Object|string} collection The collection to search.
     * @param {Object} source The object of property values to match.
     * @returns {Array} Returns the new filtered array.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'status': 'busy', 'pets': ['hoppy'] },
     *   { 'user': 'fred',   'age': 40, 'status': 'busy', 'pets': ['baby puss', 'dino'] }
     * ];
     *
     * _.pluck(_.where(users, { 'age': 36 }), 'user');
     * // => ['barney']
     *
     * _.pluck(_.where(users, { 'pets': ['dino'] }), 'user');
     * // => ['fred']
     *
     * _.pluck(_.where(users, { 'status': 'busy' }), 'user');
     * // => ['barney', 'fred']
     */
    function where(collection, source) {
      return filter(collection, matches(source));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Gets the number of milliseconds that have elapsed since the Unix epoch
     * (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @category Date
     * @example
     *
     * _.defer(function(stamp) { console.log(_.now() - stamp); }, _.now());
     * // => logs the number of milliseconds it took for the deferred function to be invoked
     */
    var now = nativeNow || function() {
      return new Date().getTime();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it is called `n` or more times.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => logs 'done saving!' after the two async saves have completed
     */
    function after(n, func) {
      if (!isFunction(func)) {
        if (isFunction(n)) {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      n = nativeIsFinite(n = +n) ? n : 0;
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that accepts up to `n` arguments ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      if (guard && isIterateeCall(func, n, guard)) {
        n = null;
      }
      n = (func && n == null) ? func.length : nativeMax(+n || 0, 0);
      return createWrapper(func, ARY_FLAG, null, null, null, null, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it is called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery('#add').on('click', _.before(5, addContactToList));
     * // => allows adding up to 4 contacts to the list
     */
    function before(n, func) {
      var result;
      if (!isFunction(func)) {
        if (isFunction(n)) {
          var temp = n;
          n = func;
          func = temp;
        } else {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
      }
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        } else {
          func = null;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and prepends any additional `_.bind` arguments to those provided to the
     * bound function.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind` this method does not set the `length`
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [args] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var greet = function(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * };
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // using placeholders
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    function bind(func, thisArg) {
      var bitmask = BIND_FLAG;
      if (arguments.length > 2) {
        var partials = baseSlice(arguments, 2),
            holders = replaceHolders(partials, bind.placeholder);

        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(func, bitmask, thisArg, partials, holders);
    }

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method. Method names may be specified as individual arguments or as arrays
     * of method names. If no method names are provided all enumerable function
     * properties, own and inherited, of `object` are bound.
     *
     * **Note:** This method does not set the `length` property of bound functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} [methodNames] The object method names to bind,
     *  specified as individual method names or arrays of method names.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'onClick': function() { console.log('clicked ' + this.label); }
     * };
     *
     * _.bindAll(view);
     * jQuery('#docs').on('click', view.onClick);
     * // => logs 'clicked docs' when the element is clicked
     */
    function bindAll(object) {
      return baseBindAll(object,
        arguments.length > 1
          ? baseFlatten(arguments, false, false, 1)
          : functions(object)
      );
    }

    /**
     * Creates a function that invokes the method at `object[key]` and prepends
     * any additional `_.bindKey` arguments to those provided to the bound function.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist.
     * See [Peter Michaux's article](http://michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Object} object The object the method belongs to.
     * @param {string} key The key of the method.
     * @param {...*} [args] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // using placeholders
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    function bindKey(object, key) {
      var bitmask = BIND_FLAG | BIND_KEY_FLAG;
      if (arguments.length > 2) {
        var partials = baseSlice(arguments, 2),
            holders = replaceHolders(partials, bindKey.placeholder);

        bitmask |= PARTIAL_FLAG;
      }
      return createWrapper(key, bitmask, object, partials, holders);
    }

    /**
     * Creates a function that accepts one or more arguments of `func` that when
     * called either invokes `func` returning its result, if all `func` arguments
     * have been provided, or returns a function that accepts one or more of the
     * remaining `func` arguments, and so on. The arity of `func` may be specified
     * if `func.length` is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the `length` property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      if (guard && isIterateeCall(func, arity, guard)) {
        arity = null;
      }
      var result = createWrapper(func, CURRY_FLAG, null, null, null, null, null, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method does not set the `length` property of curried functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // using placeholders
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      if (guard && isIterateeCall(func, arity, guard)) {
        arity = null;
      }
      var result = createWrapper(func, CURRY_RIGHT_FLAG, null, null, null, null, null, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a function that delays invoking `func` until after `wait` milliseconds
     * have elapsed since the last time it was invoked. The created function comes
     * with a `cancel` method to cancel delayed invocations. Provide an options
     * object to indicate that `func` should be invoked on the leading and/or
     * trailing edge of the `wait` timeout. Subsequent calls to the debounced
     * function return the result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the debounced function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} wait The number of milliseconds to delay.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=false] Specify invoking on the leading
     *  edge of the timeout.
     * @param {number} [options.maxWait] The maximum time `func` is allowed to be
     *  delayed before it is invoked.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // avoid costly calculations while the window size is in flux
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // invoke `sendMail` when the click event is fired, debouncing subsequent calls
     * jQuery('#postbox').on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // ensure `batchLog` is invoked once after 1 second of debounced calls
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', _.debounce(batchLog, 250, {
     *   'maxWait': 1000
     * }));
     *
     * // cancel a debounced call
     * var todoChanges = _.debounce(batchLog, 1000);
     * Object.observe(models.todo, todoChanges);
     *
     * Object.observe(models, function(changes) {
     *   if (_.find(changes, { 'user': 'todo', 'type': 'delete'})) {
     *     todoChanges.cancel();
     *   }
     * }, ['delete']);
     *
     * // ...at some point `models.todo` is changed
     * models.todo.completed = true;
     *
     * // ...before 1 second has passed `models.todo` is deleted
     * // which cancels the debounced `todoChanges` call
     * delete models.todo;
     */
    function debounce(func, wait, options) {
      var args,
          maxTimeoutId,
          result,
          stamp,
          thisArg,
          timeoutId,
          trailingCall,
          lastCalled = 0,
          maxWait = false,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = wait < 0 ? 0 : wait;
      if (options === true) {
        var leading = true;
        trailing = false;
      } else if (isObject(options)) {
        leading = options.leading;
        maxWait = 'maxWait' in options && nativeMax(+options.maxWait || 0, wait);
        trailing = 'trailing' in options ? options.trailing : trailing;
      }

      function cancel() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        if (maxTimeoutId) {
          clearTimeout(maxTimeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
      }

      function delayed() {
        var remaining = wait - (now() - stamp);
        if (remaining <= 0 || remaining > wait) {
          if (maxTimeoutId) {
            clearTimeout(maxTimeoutId);
          }
          var isCalled = trailingCall;
          maxTimeoutId = timeoutId = trailingCall = undefined;
          if (isCalled) {
            lastCalled = now();
            result = func.apply(thisArg, args);
            if (!timeoutId && !maxTimeoutId) {
              args = thisArg = null;
            }
          }
        } else {
          timeoutId = setTimeout(delayed, remaining);
        }
      }

      function maxDelayed() {
        if (timeoutId) {
          clearTimeout(timeoutId);
        }
        maxTimeoutId = timeoutId = trailingCall = undefined;
        if (trailing || (maxWait !== wait)) {
          lastCalled = now();
          result = func.apply(thisArg, args);
          if (!timeoutId && !maxTimeoutId) {
            args = thisArg = null;
          }
        }
      }

      function debounced() {
        args = arguments;
        stamp = now();
        thisArg = this;
        trailingCall = trailing && (timeoutId || !leading);

        if (maxWait === false) {
          var leadingCall = leading && !timeoutId;
        } else {
          if (!maxTimeoutId && !leading) {
            lastCalled = stamp;
          }
          var remaining = maxWait - (stamp - lastCalled),
              isCalled = remaining <= 0 || remaining > maxWait;

          if (isCalled) {
            if (maxTimeoutId) {
              maxTimeoutId = clearTimeout(maxTimeoutId);
            }
            lastCalled = stamp;
            result = func.apply(thisArg, args);
          }
          else if (!maxTimeoutId) {
            maxTimeoutId = setTimeout(maxDelayed, remaining);
          }
        }
        if (isCalled && timeoutId) {
          timeoutId = clearTimeout(timeoutId);
        }
        else if (!timeoutId && wait !== maxWait) {
          timeoutId = setTimeout(delayed, wait);
        }
        if (leadingCall) {
          isCalled = true;
          result = func.apply(thisArg, args);
        }
        if (isCalled && !timeoutId && !maxTimeoutId) {
          args = thisArg = null;
        }
        return result;
      }
      debounced.cancel = cancel;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) { console.log(text); }, 'deferred');
     * // logs 'deferred' after one or more milliseconds
     */
    function defer(func) {
      return baseDelay(func, 1, arguments, 1);
    }

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it is invoked.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke the function with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) { console.log(text); }, 1000, 'later');
     * // => logs 'later' after one second
     */
    function delay(func, wait) {
      return baseDelay(func, wait, arguments, 2);
    }

    /**
     * Creates a function that returns the result of invoking the provided
     * functions with the `this` binding of the created function, where each
     * successive invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function add(x, y) {
     *   return x + y;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow(add, square);
     * addSquare(1, 2);
     * // => 9
     */
    function flow() {
      var funcs = arguments,
          length = funcs.length;

      if (!length) {
        return function() {};
      }
      if (!arrayEvery(funcs, isFunction)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var index = 0,
            result = funcs[index].apply(this, arguments);

        while (++index < length) {
          result = funcs[index].call(this, result);
        }
        return result;
      };
    }

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the provided functions from right to left.
     *
     * @static
     * @memberOf _
     * @alias backflow, compose
     * @category Function
     * @param {...Function} [funcs] Functions to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function add(x, y) {
     *   return x + y;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight(square, add);
     * addSquare(1, 2);
     * // => 9
     */
    function flowRight() {
      var funcs = arguments,
          fromIndex = funcs.length - 1;

      if (fromIndex < 0) {
        return function() {};
      }
      if (!arrayEvery(funcs, isFunction)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var index = fromIndex,
            result = funcs[index].apply(this, arguments);

        while (index--) {
          result = funcs[index].call(this, result);
        }
        return result;
      };
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is coerced to a string and used as the
     * cache key. The `func` is invoked with the `this` binding of the memoized
     * function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the ES `Map` method interface
     * of `get`, `has`, and `set`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-properties-of-the-map-prototype-object)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoizing function.
     * @example
     *
     * var upperCase = _.memoize(function(string) {
     *   return string.toUpperCase();
     * });
     *
     * upperCase('fred');
     * // => 'FRED'
     *
     * // modifying the result cache
     * upperCase.cache.set('fred, 'BARNEY');
     * upperCase('fred');
     * // => 'BARNEY'
     *
     * // replacing `_.memoize.Cache`
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'barney' };
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'fred' }
     *
     * _.memoize.Cache = WeakMap;
     * var identity = _.memoize(_.identity);
     *
     * identity(object);
     * // => { 'user': 'fred' }
     * identity(other);
     * // => { 'user': 'barney' }
     */
    function memoize(func, resolver) {
      if (!isFunction(func) || (resolver && !isFunction(resolver))) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var cache = memoized.cache,
            key = resolver ? resolver.apply(this, arguments) : arguments[0];

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, arguments);
        cache.set(key, result);
        return result;
      };
      memoized.cache = new memoize.Cache;
      return memoized;
    }

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (!isFunction(predicate)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        return !predicate.apply(this, arguments);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first call. The `func` is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @type Function
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // `initialize` invokes `createApplication` once
     */
    function once(func) {
      return before(func, 2);
    }

    /**
     * Creates a function that invokes `func` with `partial` arguments prepended
     * to those provided to the new function. This method is like `_.bind` except
     * it does **not** alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the `length` property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [args] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // using placeholders
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    function partial(func) {
      var partials = baseSlice(arguments, 1),
          holders = replaceHolders(partials, partial.placeholder);

      return createWrapper(func, PARTIAL_FLAG, null, partials, holders);
    }

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to those provided to the new function.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method does not set the `length` property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [args] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * var greet = function(greeting, name) {
     *   return greeting + ' ' + name;
     * };
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // using placeholders
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    function partialRight(func) {
      var partials = baseSlice(arguments, 1),
          holders = replaceHolders(partials, partialRight.placeholder);

      return createWrapper(func, PARTIAL_RIGHT_FLAG, null, partials, holders);
    }

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified indexes where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes,
     *  specified as individual indexes or arrays of indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, 2, 0, 1);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     *
     * var map = _.rearg(_.map, [1, 0]);
     * map(function(n) { return n * 3; }, [1, 2, 3]);
     * // => [3, 6, 9]
     */
    function rearg(func) {
      var indexes = baseFlatten(arguments, false, false, 1);
      return createWrapper(func, REARG_FLAG, null, null, null, indexes);
    }

    /**
     * Creates a function that only invokes `func` at most once per every `wait`
     * milliseconds. The created function comes with a `cancel` method to cancel
     * delayed invocations. Provide an options object to indicate that `func`
     * should be invoked on the leading and/or trailing edge of the `wait` timeout.
     * Subsequent calls to the throttled function return the result of the last
     * `func` call.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is invoked
     * on the trailing edge of the timeout only if the the throttled function is
     * invoked more than once during the `wait` timeout.
     *
     * See [David Corbacho's article](http://drupalmotion.com/article/debounce-and-throttle-visual-explanation)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} wait The number of milliseconds to throttle invocations to.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.leading=true] Specify invoking on the leading
     *  edge of the timeout.
     * @param {boolean} [options.trailing=true] Specify invoking on the trailing
     *  edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // avoid excessively updating the position while scrolling
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // invoke `renewToken` when the click event is fired, but not more than once every 5 minutes
     * var throttled =  _.throttle(renewToken, 300000, { 'trailing': false })
     * jQuery('.interactive').on('click', throttled);
     *
     * // cancel a trailing throttled call
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (!isFunction(func)) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (options === false) {
        leading = false;
      } else if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      debounceOptions.leading = leading;
      debounceOptions.maxWait = +wait;
      debounceOptions.trailing = trailing;
      return debounce(func, wait, debounceOptions);
    }

    /**
     * Creates a function that provides `value` to the wrapper function as its
     * first argument. Any additional arguments provided to the function are
     * appended to those provided to the wrapper function. The wrapper is invoked
     * with the `this` binding of the created function.
     *
     * @static
     * @memberOf _
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} wrapper The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      wrapper = wrapper == null ? identity : wrapper;
      return createWrapper(wrapper, PARTIAL_FLAG, null, [value], []);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
     * otherwise they are assigned by reference. If `customizer` is provided it is
     * invoked to produce the cloned values. If `customizer` returns `undefined`
     * cloning is handled by the method instead. The `customizer` is bound to
     * `thisArg` and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the structured clone algorithm.
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps. See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var shallow = _.clone(users);
     * shallow[0] === users[0];
     * // => true
     *
     * var deep = _.clone(users, true);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var body = _.clone(document.body, function(value) {
     *   return _.isElement(value) ? value.cloneNode(false) : undefined;
     * });
     *
     * body === document.body
     * // => false
     * body.nodeName
     * // => BODY
     * body.childNodes.length;
     * // => 0
     */
    function clone(value, isDeep, customizer, thisArg) {
      // Juggle arguments.
      if (typeof isDeep != 'boolean' && isDeep != null) {
        thisArg = customizer;
        customizer = isIterateeCall(value, isDeep, thisArg) ? null : isDeep;
        isDeep = false;
      }
      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
      return baseClone(value, isDeep, customizer);
    }

    /**
     * Creates a deep clone of `value`. If `customizer` is provided it is invoked
     * to produce the cloned values. If `customizer` returns `undefined` cloning
     * is handled by the method instead. The `customizer` is bound to `thisArg`
     * and invoked with two argument; (value [, index|key, object]).
     *
     * **Note:** This method is loosely based on the structured clone algorithm.
     * The enumerable properties of `arguments` objects and objects created by
     * constructors other than `Object` are cloned to plain `Object` objects. An
     * empty object is returned for uncloneable values such as functions, DOM nodes,
     * Maps, Sets, and WeakMaps. See the [HTML5 specification](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to deep clone.
     * @param {Function} [customizer] The function to customize cloning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {*} Returns the deep cloned value.
     * @example
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * var deep = _.cloneDeep(users);
     * deep[0] === users[0];
     * // => false
     *
     * // using a customizer callback
     * var el = _.cloneDeep(document.body, function(value) {
     *   return _.isElement(value) ? value.cloneNode(true) : undefined;
     * });
     *
     * body === document.body
     * // => false
     * body.nodeName
     * // => BODY
     * body.childNodes.length;
     * // => 20
     */
    function cloneDeep(value, customizer, thisArg) {
      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 1);
      return baseClone(value, true, customizer);
    }

    /**
     * Checks if `value` is classified as an `arguments` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * (function() { return _.isArguments(arguments); })();
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    function isArguments(value) {
      var length = isObjectLike(value) ? value.length : undefined;
      return (isLength(length) && objToString.call(value) == argsTag) || false;
    }

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * (function() { return _.isArray(arguments); })();
     * // => false
     */
    var isArray = nativeIsArray || function(value) {
      return (isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag) || false;
    };

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return (value === true || value === false || isObjectLike(value) && objToString.call(value) == boolTag) || false;
    }

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    function isDate(value) {
      return (isObjectLike(value) && objToString.call(value) == dateTag) || false;
    }

    /**
     * Checks if `value` is a DOM element.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return (value && value.nodeType === 1 && isObjectLike(value) &&
        objToString.call(value).indexOf('Element') > -1) || false;
    }
    // Fallback for environments without DOM support.
    if (!support.dom) {
      isElement = function(value) {
        return (value && value.nodeType === 1 && isObjectLike(value) && !isPlainObject(value)) || false;
      };
    }

    /**
     * Checks if a value is empty. A value is considered empty unless it is an
     * `arguments` object, array, string, or jQuery-like collection with a length
     * greater than `0` or an object with own enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Array|Object|string} value The value to inspect.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      var length = value.length;
      if (isLength(length) && (isArray(value) || isString(value) || isArguments(value) ||
          (isObjectLike(value) && isFunction(value.splice)))) {
        return !length;
      }
      return !keys(value).length;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent. If `customizer` is provided it is invoked to compare values.
     * If `customizer` returns `undefined` comparisons are handled by the method
     * instead. The `customizer` is bound to `thisArg` and invoked with three
     * arguments; (value, other [, index|key]).
     *
     * **Note:** This method supports comparing arrays, booleans, `Date` objects,
     * numbers, `Object` objects, regexes, and strings. Functions and DOM nodes
     * are **not** supported. Provide a customizer function to extend support
     * for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var other = { 'user': 'fred' };
     *
     * object == other;
     * // => false
     *
     * _.isEqual(object, other);
     * // => true
     *
     * // using a customizer callback
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqual(array, other, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isEqual(value, other, customizer, thisArg) {
      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
      if (!customizer && isStrictComparable(value) && isStrictComparable(other)) {
        return value === other;
      }
      var result = customizer ? customizer(value, other) : undefined;
      return typeof result == 'undefined' ? baseIsEqual(value, other, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      return (isObjectLike(value) && typeof value.message == 'string' && objToString.call(value) == errorTag) || false;
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on ES `Number.isFinite`. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isfinite)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(10);
     * // => true
     *
     * _.isFinite('10');
     * // => false
     *
     * _.isFinite(true);
     * // => false
     *
     * _.isFinite(Object(10));
     * // => false
     *
     * _.isFinite(Infinity);
     * // => false
     */
    var isFinite = nativeNumIsFinite || function(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    };

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      // Avoid a Chakra JIT bug in compatibility modes of IE 11.
      // See https://github.com/jashkenas/underscore/issues/1621 for more details.
      return typeof value == 'function' || false;
    }
    // Fallback for environments that return incorrect `typeof` operator results.
    if (isFunction(/x/) || (Uint8Array && !isFunction(Uint8Array))) {
      isFunction = function(value) {
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in older versions of Chrome and Safari which return 'function' for regexes
        // and Safari 8 equivalents which return 'object' for typed array constructors.
        return objToString.call(value) == funcTag;
      };
    }

    /**
     * Checks if `value` is the language type of `Object`.
     * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * **Note:** See the [ES5 spec](https://es5.github.io/#x8) for more details.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(1);
     * // => false
     */
    function isObject(value) {
      // Avoid a V8 JIT bug in Chrome 19-20.
      // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
      var type = typeof value;
      return type == 'function' || (value && type == 'object') || false;
    }

    /**
     * Performs a deep comparison between `object` and `source` to determine if
     * `object` contains equivalent property values. If `customizer` is provided
     * it is invoked to compare values. If `customizer` returns `undefined`
     * comparisons are handled by the method instead. The `customizer` is bound
     * to `thisArg` and invoked with three arguments; (value, other, index|key).
     *
     * **Note:** This method supports comparing properties of arrays, booleans,
     * `Date` objects, numbers, `Object` objects, regexes, and strings. Functions
     * and DOM nodes are **not** supported. Provide a customizer function to extend
     * support for comparing other values.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {Object} source The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparing values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.isMatch(object, { 'age': 40 });
     * // => true
     *
     * _.isMatch(object, { 'age': 36 });
     * // => false
     *
     * // using a customizer callback
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatch(object, source, function(value, other) {
     *   return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
     * });
     * // => true
     */
    function isMatch(object, source, customizer, thisArg) {
      var props = keys(source),
          length = props.length;

      customizer = typeof customizer == 'function' && bindCallback(customizer, thisArg, 3);
      if (!customizer && length == 1) {
        var key = props[0],
            value = source[key];

        if (isStrictComparable(value)) {
          return object != null && value === object[key] && hasOwnProperty.call(object, key);
        }
      }
      var values = Array(length),
          strictCompareFlags = Array(length);

      while (length--) {
        value = values[length] = source[props[length]];
        strictCompareFlags[length] = isStrictComparable(value);
      }
      return baseIsMatch(object, props, values, strictCompareFlags, customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is not the same as native `isNaN` which returns `true`
     * for `undefined` and other non-numeric values. See the [ES5 spec](https://es5.github.io/#x15.1.2.4)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some host objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a native function.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (value == null) {
        return false;
      }
      if (objToString.call(value) == funcTag) {
        return reNative.test(fnToString.call(value));
      }
      return (isObjectLike(value) && reHostCtor.test(value)) || false;
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
     * as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isNumber(8.4);
     * // => true
     *
     * _.isNumber(NaN);
     * // => true
     *
     * _.isNumber('8.4');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag) || false;
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * **Note:** This method assumes objects created by the `Object` constructor
     * have no inherited enumerable properties.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    var isPlainObject = !getPrototypeOf ? shimIsPlainObject : function(value) {
      if (!(value && objToString.call(value) == objectTag)) {
        return false;
      }
      var valueOf = value.valueOf,
          objProto = isNative(valueOf) && (objProto = getPrototypeOf(valueOf)) && getPrototypeOf(objProto);

      return objProto
        ? (value == objProto || getPrototypeOf(value) == objProto)
        : shimIsPlainObject(value);
    };

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    function isRegExp(value) {
      return (isObjectLike(value) && objToString.call(value) == regexpTag) || false;
    }

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag) || false;
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    function isTypedArray(value) {
      return (isObjectLike(value) && isLength(value.length) && typedArrayTags[objToString.call(value)]) || false;
    }

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return typeof value == 'undefined';
    }

    /**
     * Converts `value` to an array.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * (function() { return _.toArray(arguments).slice(1); })(1, 2, 3);
     * // => [2, 3]
     */
    function toArray(value) {
      var length = value ? value.length : 0;
      if (!isLength(length)) {
        return values(value);
      }
      if (!length) {
        return [];
      }
      return arrayCopy(value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable
     * properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return baseCopy(value, keysIn(value));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object. Subsequent sources overwrite property assignments of previous sources.
     * If `customizer` is provided it is invoked to produce the assigned values.
     * The `customizer` is bound to `thisArg` and invoked with five arguments;
     * (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize assigning values.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
     * // => { 'user': 'fred', 'age': 40 }
     *
     * // using a customizer callback
     * var defaults = _.partialRight(_.assign, function(value, other) {
     *   return typeof value == 'undefined' ? other : value;
     * });
     *
     * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    var assign = createAssigner(baseAssign);

    /**
     * Creates an object that inherits from the given `prototype` object. If a
     * `properties` object is provided its own enumerable properties are assigned
     * to the created object.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, { 'constructor': Circle });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties, guard) {
      var result = baseCreate(prototype);
      if (guard && isIterateeCall(prototype, properties, guard)) {
        properties = null;
      }
      return properties ? baseCopy(properties, result, keys(properties)) : result;
    }

    /**
     * Assigns own enumerable properties of source object(s) to the destination
     * object for all destination properties that resolve to `undefined`. Once a
     * property is set, additional defaults of the same property are ignored.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
     * // => { 'user': 'barney', 'age': 36 }
     */
    function defaults(object) {
      if (object == null) {
        return object;
      }
      var args = arrayCopy(arguments);
      args.push(assignDefaults);
      return assign.apply(undefined, args);
    }

    /**
     * This method is like `_.findIndex` except that it returns the key of the
     * first element `predicate` returns truthy for, instead of the element itself.
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(chr) { return chr.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // using the "_.matches" callback shorthand
     * _.findKey(users, { 'age': 1 });
     * // => 'pebbles'
     *
     * // using the "_.property" callback shorthand
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 3);
      return baseFind(object, predicate, baseForOwn, true);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * If a property name is provided for `predicate` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `predicate` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to search.
     * @param {Function|Object|string} [predicate=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {string|undefined} Returns the key of the matched element, else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(chr) { return chr.age < 40; });
     * // => returns `pebbles` assuming `_.findKey` returns `barney`
     *
     * // using the "_.matches" callback shorthand
     * _.findLastKey(users, { 'age': 36 });
     * // => 'barney'
     *
     * // using the "_.property" callback shorthand
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate, thisArg) {
      predicate = getCallback(predicate, thisArg, 3);
      return baseFind(object, predicate, baseForOwnRight, true);
    }

    /**
     * Iterates over own and inherited enumerable properties of an object invoking
     * `iteratee` for each property. The `iteratee` is bound to `thisArg` and invoked
     * with three arguments; (value, key, object). Iterator functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'a', 'b', and 'c' (iteration order is not guaranteed)
     */
    function forIn(object, iteratee, thisArg) {
      if (typeof iteratee != 'function' || typeof thisArg != 'undefined') {
        iteratee = bindCallback(iteratee, thisArg, 3);
      }
      return baseFor(object, iteratee, keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
     */
    function forInRight(object, iteratee, thisArg) {
      iteratee = bindCallback(iteratee, thisArg, 3);
      return baseForRight(object, iteratee, keysIn);
    }

    /**
     * Iterates over own enumerable properties of an object invoking `iteratee`
     * for each property. The `iteratee` is bound to `thisArg` and invoked with
     * three arguments; (value, key, object). Iterator functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwn({ '0': 'zero', '1': 'one', 'length': 2 }, function(n, key) {
     *   console.log(key);
     * });
     * // => logs '0', '1', and 'length' (iteration order is not guaranteed)
     */
    function forOwn(object, iteratee, thisArg) {
      if (typeof iteratee != 'function' || typeof thisArg != 'undefined') {
        iteratee = bindCallback(iteratee, thisArg, 3);
      }
      return baseForOwn(object, iteratee);
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * _.forOwnRight({ '0': 'zero', '1': 'one', 'length': 2 }, function(n, key) {
     *   console.log(key);
     * });
     * // => logs 'length', '1', and '0' assuming `_.forOwn` logs '0', '1', and 'length'
     */
    function forOwnRight(object, iteratee, thisArg) {
      iteratee = bindCallback(iteratee, thisArg, 3);
      return baseForRight(object, iteratee, keys);
    }

    /**
     * Creates an array of function property names from all enumerable properties,
     * own and inherited, of `object`.
     *
     * @static
     * @memberOf _
     * @alias methods
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of property names.
     * @example
     *
     * _.functions(_);
     * // => ['all', 'any', 'bind', ...]
     */
    function functions(object) {
      return baseFunctions(object, keysIn(object));
    }

    /**
     * Checks if `key` exists as a direct property of `object` instead of an
     * inherited property.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {string} key The key to check.
     * @returns {boolean} Returns `true` if `key` is a direct property, else `false`.
     * @example
     *
     * _.has({ 'a': 1, 'b': 2, 'c': 3 }, 'b');
     * // => true
     */
    function has(object, key) {
      return object ? hasOwnProperty.call(object, key) : false;
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite property
     * assignments of previous values unless `multiValue` is `true`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to invert.
     * @param {boolean} [multiValue] Allow multiple values per key.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * _.invert({ 'first': 'fred', 'second': 'barney' });
     * // => { 'fred': 'first', 'barney': 'second' }
     *
     * // without `multiValue`
     * _.invert({ 'first': 'fred', 'second': 'barney', 'third': 'fred' });
     * // => { 'fred': 'third', 'barney': 'second' }
     *
     * // with `multiValue`
     * _.invert({ 'first': 'fred', 'second': 'barney', 'third': 'fred' }, true);
     * // => { 'fred': ['first', 'third'], 'barney': ['second'] }
     */
    function invert(object, multiValue, guard) {
      if (guard && isIterateeCall(object, multiValue, guard)) {
        multiValue = null;
      }
      var index = -1,
          props = keys(object),
          length = props.length,
          result = {};

      while (++index < length) {
        var key = props[index],
            value = object[key];

        if (multiValue) {
          if (hasOwnProperty.call(result, value)) {
            result[value].push(key);
          } else {
            result[value] = [key];
          }
        }
        else {
          result[value] = key;
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](https://people.mozilla.org/~jorendorff/es6-draft.html#sec-object.keys)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    var keys = !nativeKeys ? shimKeys : function(object) {
      if (object) {
        var Ctor = object.constructor,
            length = object.length;
      }
      if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
         (typeof object != 'function' && (length && isLength(length)))) {
        return shimKeys(object);
      }
      return isObject(object) ? nativeKeys(object) : [];
    };

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      if (object == null) {
        return [];
      }
      if (!isObject(object)) {
        object = Object(object);
      }
      var length = object.length;
      length = (length && isLength(length) &&
        (isArray(object) || (support.nonEnumArgs && isArguments(object))) && length) || 0;

      var Ctor = object.constructor,
          index = -1,
          isProto = typeof Ctor == 'function' && Ctor.prototype == object,
          result = Array(length),
          skipIndexes = length > 0;

      while (++index < length) {
        result[index] = (index + '');
      }
      for (var key in object) {
        if (!(skipIndexes && isIndex(key, length)) &&
            !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated by
     * running each own enumerable property of `object` through `iteratee`. The
     * iteratee function is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * If a property name is provided for `iteratee` the created "_.property"
     * style callback returns the property value of the given element.
     *
     * If an object is provided for `iteratee` the created "_.matches" style
     * callback returns `true` for elements that have the properties of the given
     * object, else `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function|Object|string} [iteratee=_.identity] The function invoked
     *  per iteration. If a property name or object is provided it is used to
     *  create a "_.property" or "_.matches" style callback respectively.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Object} Returns the new mapped object.
     * @example
     *
     * _.mapValues({ 'a': 1, 'b': 2, 'c': 3} , function(n) { return n * 3; });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * // using the "_.property" callback shorthand
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee, thisArg) {
      var result = {};
      iteratee = getCallback(iteratee, thisArg, 3);

      baseForOwn(object, function(value, key, object) {
        result[key] = iteratee(value, key, object);
      });
      return result;
    }

    /**
     * Recursively merges own enumerable properties of the source object(s), that
     * don't resolve to `undefined` into the destination object. Subsequent sources
     * overwrite property assignments of previous sources. If `customizer` is
     * provided it is invoked to produce the merged values of the destination and
     * source properties. If `customizer` returns `undefined` merging is handled
     * by the method instead. The `customizer` is bound to `thisArg` and invoked
     * with five arguments; (objectValue, sourceValue, key, object, source).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @param {Function} [customizer] The function to customize merging properties.
     * @param {*} [thisArg] The `this` binding of `customizer`.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var users = {
     *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
     * };
     *
     * var ages = {
     *   'data': [{ 'age': 36 }, { 'age': 40 }]
     * };
     *
     * _.merge(users, ages);
     * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
     *
     * // using a customizer callback
     * var object = {
     *   'fruits': ['apple'],
     *   'vegetables': ['beet']
     * };
     *
     * var other = {
     *   'fruits': ['banana'],
     *   'vegetables': ['carrot']
     * };
     *
     * _.merge(object, other, function(a, b) {
     *   return _.isArray(a) ? a.concat(b) : undefined;
     * });
     * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
     */
    var merge = createAssigner(baseMerge);

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable properties of `object` that are not omitted.
     * Property names may be specified as individual arguments or as arrays of
     * property names. If `predicate` is provided it is invoked for each property
     * of `object` omitting the properties `predicate` returns truthy for. The
     * predicate is bound to `thisArg` and invoked with three arguments;
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to omit, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.omit(object, 'age');
     * // => { 'user': 'fred' }
     *
     * _.omit(object, _.isNumber);
     * // => { 'user': 'fred' }
     */
    function omit(object, predicate, thisArg) {
      if (object == null) {
        return {};
      }
      if (typeof predicate != 'function') {
        var props = arrayMap(baseFlatten(arguments, false, false, 1), String);
        return pickByArray(object, baseDifference(keysIn(object), props));
      }
      predicate = bindCallback(predicate, thisArg, 3);
      return pickByCallback(object, function(value, key, object) {
        return !predicate(value, key, object);
      });
    }

    /**
     * Creates a two dimensional array of the key-value pairs for `object`,
     * e.g. `[[key1, value1], [key2, value2]]`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the new array of key-value pairs.
     * @example
     *
     * _.pairs({ 'barney': 36, 'fred': 40 });
     * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
     */
    function pairs(object) {
      var index = -1,
          props = keys(object),
          length = props.length,
          result = Array(length);

      while (++index < length) {
        var key = props[index];
        result[index] = [key, object[key]];
      }
      return result;
    }

    /**
     * Creates an object composed of the picked `object` properties. Property
     * names may be specified as individual arguments or as arrays of property
     * names. If `predicate` is provided it is invoked for each property of `object`
     * picking the properties `predicate` returns truthy for. The predicate is
     * bound to `thisArg` and invoked with three arguments; (value, key, object).
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {Function|...(string|string[])} [predicate] The function invoked per
     *  iteration or property names to pick, specified as individual property
     *  names or arrays of property names.
     * @param {*} [thisArg] The `this` binding of `predicate`.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40 };
     *
     * _.pick(object, 'user');
     * // => { 'user': 'fred' }
     *
     * _.pick(object, _.isString);
     * // => { 'user': 'fred' }
     */
    function pick(object, predicate, thisArg) {
      if (object == null) {
        return {};
      }
      return typeof predicate == 'function'
        ? pickByCallback(object, bindCallback(predicate, thisArg, 3))
        : pickByArray(object, baseFlatten(arguments, false, false, 1));
    }

    /**
     * Resolves the value of property `key` on `object`. If the value of `key` is
     * a function it is invoked with the `this` binding of `object` and its result
     * is returned, else the property value is returned. If the property value is
     * `undefined` the `defaultValue` is used in its place.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to resolve.
     * @param {*} [defaultValue] The value returned if the property value
     *  resolves to `undefined`.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'user': 'fred', 'age': _.constant(40) };
     *
     * _.result(object, 'user');
     * // => 'fred'
     *
     * _.result(object, 'age');
     * // => 40
     *
     * _.result(object, 'status', 'busy');
     * // => 'busy'
     *
     * _.result(object, 'status', _.constant('busy'));
     * // => 'busy'
     */
    function result(object, key, defaultValue) {
      var value = object == null ? undefined : object[key];
      if (typeof value == 'undefined') {
        value = defaultValue;
      }
      return isFunction(value) ? value.call(object) : value;
    }

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own enumerable
     * properties through `iteratee`, with each invocation potentially mutating
     * the `accumulator` object. The `iteratee` is bound to `thisArg` and invoked
     * with four arguments; (accumulator, value, key, object). Iterator functions
     * may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Array|Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * var squares = _.transform([1, 2, 3, 4, 5, 6], function(result, n) {
     *   n *= n;
     *   if (n % 2) {
     *     return result.push(n) < 3;
     *   }
     * });
     * // => [1, 9, 25]
     *
     * var mapped = _.transform({ 'a': 1, 'b': 2, 'c': 3 }, function(result, n, key) {
     *   result[key] = n * 3;
     * });
     * // => { 'a': 3, 'b': 6, 'c': 9 }
     */
    function transform(object, iteratee, accumulator, thisArg) {
      var isArr = isArray(object) || isTypedArray(object);
      iteratee = getCallback(iteratee, thisArg, 4);

      if (accumulator == null) {
        if (isArr || isObject(object)) {
          var Ctor = object.constructor;
          if (isArr) {
            accumulator = isArray(object) ? new Ctor : [];
          } else {
            accumulator = baseCreate(typeof Ctor == 'function' && Ctor.prototype);
          }
        } else {
          accumulator = {};
        }
      }
      (isArr ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Creates an array of the own enumerable property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable property values
     * of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Produces a random number between `min` and `max` (inclusive). If only one
     * argument is provided a number between `0` and the given number is returned.
     * If `floating` is `true`, or either `min` or `max` are floats, a floating-point
     * number is returned instead of an integer.
     *
     * @static
     * @memberOf _
     * @category Number
     * @param {number} [min=0] The minimum possible value.
     * @param {number} [max=1] The maximum possible value.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(min, max, floating) {
      if (floating && isIterateeCall(min, max, floating)) {
        max = floating = null;
      }
      var noMin = min == null,
          noMax = max == null;

      if (floating == null) {
        if (noMax && typeof min == 'boolean') {
          floating = min;
          min = 1;
        }
        else if (typeof max == 'boolean') {
          floating = max;
          noMax = true;
        }
      }
      if (noMin && noMax) {
        max = 1;
        noMax = false;
      }
      min = +min || 0;
      if (noMax) {
        max = min;
        min = 0;
      } else {
        max = +max || 0;
      }
      if (floating || min % 1 || max % 1) {
        var rand = nativeRandom();
        return nativeMin(min + (rand * (max - min + parseFloat('1e-' + ((rand + '').length - 1)))), max);
      }
      return baseRandom(min, max);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to camel case.
     * See [Wikipedia](https://en.wikipedia.org/wiki/CamelCase) for more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar');
     * // => 'fooBar'
     *
     * _.camelCase('__foo_bar__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return index ? (result + word.charAt(0).toUpperCase() + word.slice(1)) : word;
    });

    /**
     * Capitalizes the first character of `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('fred');
     * // => 'Fred'
     */
    function capitalize(string) {
      string = baseToString(string);
      return string && (string.charAt(0).toUpperCase() + string.slice(1));
    }

    /**
     * Deburrs `string` by converting latin-1 supplementary letters to basic latin letters.
     * See [Wikipedia](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = baseToString(string);
      return string && string.replace(reLatin1, deburrLetter);
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search from.
     * @returns {boolean} Returns `true` if `string` ends with `target`, else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = baseToString(string);
      target = (target + '');

      var length = string.length;
      position = (typeof position == 'undefined' ? length : nativeMin(position < 0 ? 0 : (+position || 0), length)) - target.length;
      return position >= 0 && string.indexOf(target, position) == position;
    }

    /**
     * Converts the characters "&", "<", ">", '"', "'", and '`', in `string` to
     * their corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional characters
     * use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't require escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value.
     * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * Backticks are escaped because in Internet Explorer < 9, they can break out
     * of attribute values or HTML comments. See [#102](https://html5sec.org/#102),
     * [#108](https://html5sec.org/#108), and [#133](https://html5sec.org/#133) of
     * the [HTML5 Security Cheatsheet](https://html5sec.org/) for more details.
     *
     * When working with HTML you should always quote attribute values to reduce
     * XSS vectors. See [Ryan Grove's article](http://wonko.com/post/html-escaping)
     * for more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      // Reset `lastIndex` because in IE < 9 `String#replace` does not.
      string = baseToString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "\", "^", "$", ".", "|", "?", "*",
     * "+", "(", ")", "[", "]", "{" and "}" in `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = baseToString(string);
      return (string && reHasRegExpChars.test(string))
        ? string.replace(reRegExpChars, '\\$&')
        : string;
    }

    /**
     * Converts `string` to kebab case (a.k.a. spinal case).
     * See [Wikipedia](https://en.wikipedia.org/wiki/Letter_case#Computers) for
     * more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__foo_bar__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Pads `string` on the left and right sides if it is shorter then the given
     * padding length. The `chars` string may be truncated if the number of padding
     * characters can't be evenly divided by the padding length.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = baseToString(string);
      length = +length;

      var strLength = string.length;
      if (strLength >= length || !nativeIsFinite(length)) {
        return string;
      }
      var mid = (length - strLength) / 2,
          leftLength = floor(mid),
          rightLength = ceil(mid);

      chars = createPad('', rightLength, chars);
      return chars.slice(0, leftLength) + string + chars;
    }

    /**
     * Pads `string` on the left side if it is shorter then the given padding
     * length. The `chars` string may be truncated if the number of padding
     * characters exceeds the padding length.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padLeft('abc', 6);
     * // => '   abc'
     *
     * _.padLeft('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padLeft('abc', 3);
     * // => 'abc'
     */
    function padLeft(string, length, chars) {
      string = baseToString(string);
      return string && (createPad(string, length, chars) + string);
    }

    /**
     * Pads `string` on the right side if it is shorter then the given padding
     * length. The `chars` string may be truncated if the number of padding
     * characters exceeds the padding length.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padRight('abc', 6);
     * // => 'abc   '
     *
     * _.padRight('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padRight('abc', 3);
     * // => 'abc'
     */
    function padRight(string, length, chars) {
      string = baseToString(string);
      return string && (string + createPad(string, length, chars));
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a hexadecimal,
     * in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the ES5 implementation of `parseInt`.
     * See the [ES5 spec](https://es5.github.io/#E) for more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard && isIterateeCall(string, radix, guard)) {
        radix = 0;
      }
      return nativeParseInt(string, radix);
    }
    // Fallback for environments with pre-ES5 implementations.
    if (nativeParseInt(whitespace + '08') != 8) {
      parseInt = function(string, radix, guard) {
        // Firefox < 21 and Opera < 15 follow ES3 for `parseInt`.
        // Chrome fails to trim leading <BOM> whitespace characters.
        // See https://code.google.com/p/v8/issues/detail?id=3109 for more details.
        if (guard ? isIterateeCall(string, radix, guard) : radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        string = trim(string);
        return nativeParseInt(string, radix || (reHexPrefix.test(string) ? 16 : 10));
      };
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=0] The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n) {
      var result = '';
      string = baseToString(string);
      n = +n;
      if (n < 1 || !string || !nativeIsFinite(n)) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = floor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    /**
     * Converts `string` to snake case.
     * See [Wikipedia](https://en.wikipedia.org/wiki/Snake_case) for more details.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--foo-bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to search.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = baseToString(string);
      position = position == null ? 0 : nativeMin(position < 0 ? 0 : (+position || 0), string.length);
      return string.lastIndexOf(target, position) == position;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is provided it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes sourceURLs for easier debugging.
     * See the [HTML5 Rocks article on sourcemaps](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for more details.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options] The options object.
     * @param {RegExp} [options.escape] The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate] The "evaluate" delimiter.
     * @param {Object} [options.imports] An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate] The "interpolate" delimiter.
     * @param {string} [options.sourceURL] The sourceURL of the template's compiled source.
     * @param {string} [options.variable] The data object variable name.
     * @param- {Object} [otherOptions] Enables the legacy `options` param signature.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // using the "interpolate" delimiter to create a compiled template
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // using the HTML "escape" delimiter to escape data property values
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // using the "evaluate" delimiter to execute JavaScript and generate HTML
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the internal `print` function in "evaluate" delimiters
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // using the ES delimiter as an alternative to the default "interpolate" delimiter
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // using custom template delimiters
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // using backslashes to treat delimiters as plain text
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // using the `imports` option to import `jQuery` as `jq`
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // using the `sourceURL` option to specify a custom sourceURL for the template
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector
     *
     * // using the `variable` option to ensure a with-statement isn't used in the compiled template
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     *   var __t, __p = '';
     *   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     *   return __p;
     * }
     *
     * // using the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and a stack trace
     * fs.writeFileSync(path.join(cwd, 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, otherOptions) {
      // Based on John Resig's `tmpl` implementation (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (otherOptions && isIterateeCall(string, options, otherOptions)) {
        options = otherOptions = null;
      }
      string = baseToString(string);
      options = baseAssign(baseAssign({}, otherOptions || options), settings, assignOwnDefaults);

      var imports = baseAssign(baseAssign({}, options.imports), settings.imports, assignOwnDefaults),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products requires returning the `match`
        // string in order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar]
     */
    function trim(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string), trimmedRightIndex(string) + 1);
      }
      chars = baseToString(chars);
      return string.slice(charsLeftIndex(string, chars), charsRightIndex(string, chars) + 1);
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimLeft('  abc  ');
     * // => 'abc  '
     *
     * _.trimLeft('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimLeft(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(trimmedLeftIndex(string))
      }
      return string.slice(charsLeftIndex(string, baseToString(chars)));
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimRight('  abc  ');
     * // => '  abc'
     *
     * _.trimRight('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimRight(string, chars, guard) {
      var value = string;
      string = baseToString(string);
      if (!string) {
        return string;
      }
      if (guard ? isIterateeCall(value, chars, guard) : chars == null) {
        return string.slice(0, trimmedRightIndex(string) + 1)
      }
      return string.slice(0, charsRightIndex(string, baseToString(chars)) + 1);
    }

    /**
     * Truncates `string` if it is longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object|number} [options] The options object or maximum string length.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.trunc('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', 24);
     * // => 'hi-diddly-ho there, n...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', { 'length': 24, 'separator': ' ' });
     * // => 'hi-diddly-ho there,...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', { 'length': 24, 'separator': /,? +/ });
     * //=> 'hi-diddly-ho there...'
     *
     * _.trunc('hi-diddly-ho there, neighborino', { 'omission': ' [...]' });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function trunc(string, options, guard) {
      if (guard && isIterateeCall(string, options, guard)) {
        options = null;
      }
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (options != null) {
        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? +options.length || 0 : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        } else {
          length = +options || 0;
        }
      }
      string = baseToString(string);
      if (length >= string.length) {
        return string;
      }
      var end = length - omission.length;
      if (end < 1) {
        return omission;
      }
      var result = string.slice(0, end);
      if (separator == null) {
        return result + omission;
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              newEnd,
              substring = string.slice(0, end);

          if (!separator.global) {
            separator = RegExp(separator.source, (reFlags.exec(separator) || '') + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            newEnd = match.index;
          }
          result = result.slice(0, newEnd == null ? end : newEnd);
        }
      } else if (string.indexOf(separator, end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, `&#39;`, and `&#96;` in `string` to their
     * corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional HTML
     * entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = baseToString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      if (guard && isIterateeCall(string, pattern, guard)) {
        pattern = null;
      }
      string = baseToString(string);
      return string.match(pattern || reWords) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught
     * error object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} func The function to attempt.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // avoid throwing errors for invalid selectors
     * var elements = _.attempt(function() {
     *   return document.querySelectorAll(selector);
     * });
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    function attempt(func) {
      try {
        return func();
      } catch(e) {
        return isError(e) ? e : Error(e);
      }
    }

    /**
     * Creates a function bound to an optional `thisArg`. If `func` is a property
     * name the created callback returns the property value for a given element.
     * If `func` is an object the created callback returns `true` for elements
     * that contain the equivalent object properties, otherwise it returns `false`.
     *
     * @static
     * @memberOf _
     * @alias iteratee
     * @category Utility
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // wrap to create custom callback shorthands
     * _.callback = _.wrap(_.callback, function(callback, func, thisArg) {
     *   var match = /^(.+?)__([gl]t)(.+)$/.exec(func);
     *   if (!match) {
     *     return callback(func, thisArg);
     *   }
     *   return function(object) {
     *     return match[2] == 'gt' ? object[match[1]] > match[3] : object[match[1]] < match[3];
     *   };
     * });
     *
     * _.filter(users, 'age__gt36');
     * // => [{ 'user': 'fred', 'age': 40 }]
     */
    function callback(func, thisArg, guard) {
      if (guard && isIterateeCall(func, thisArg, guard)) {
        thisArg = null;
      }
      return baseCallback(func, thisArg);
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred' };
     * var getter = _.constant(object);
     * getter() === object;
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * This method returns the first argument provided to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'user': 'fred' };
     * _.identity(object) === object;
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function which performs a deep comparison between a given object
     * and `source`, returning `true` if the given object has equivalent property
     * values, else `false`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * var matchesAge = _.matches({ 'age': 36 });
     *
     * _.filter(users, matchesAge);
     * // => [{ 'user': 'barney', 'age': 36 }]
     *
     * _.find(users, matchesAge);
     * // => { 'user': 'barney', 'age': 36 }
     */
    function matches(source) {
      return baseMatches(source, true);
    }

    /**
     * Adds all own enumerable function properties of a source object to the
     * destination object. If `object` is a function then methods are added to
     * its prototype as well.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Function|Object} [object=this] object The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options] The options object.
     * @param {boolean} [options.chain=true] Specify whether the functions added
     *  are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      if (options == null) {
        var isObj = isObject(source),
            props = isObj && keys(source),
            methodNames = props && props.length && baseFunctions(source, props);

        if (!(methodNames ? methodNames.length : isObj)) {
          methodNames = false;
          options = source;
          source = object;
          object = this;
        }
      }
      if (!methodNames) {
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = true,
          index = -1,
          isFunc = isFunction(object),
          length = methodNames.length;

      if (options === false) {
        chain = false;
      } else if (isObject(options) && 'chain' in options) {
        chain = options.chain;
      }
      while (++index < length) {
        var methodName = methodNames[index],
            func = source[methodName];

        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = (function(func) {
            return function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__);
                (result.__actions__ = arrayCopy(this.__actions__)).push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              var args = [this.value()];
              push.apply(args, arguments);
              return func.apply(object, args);
            };
          }(func));
        }
      }
      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      context._ = oldDash;
      return this;
    }

    /**
     * A no-operation function.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @example
     *
     * var object = { 'user': 'fred' };
     * _.noop(object) === undefined;
     * // => true
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function which returns the property value of `key` on a given object.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var users = [
     *   { 'user': 'fred' },
     *   { 'user': 'barney' }
     * ];
     *
     * var getName = _.property('user');
     *
     * _.map(users, getName);
     * // => ['fred', barney']
     *
     * _.pluck(_.sortBy(users, getName), 'user');
     * // => ['barney', 'fred']
     */
    function property(key) {
      return baseProperty(key + '');
    }

    /**
     * The inverse of `_.property`; this method creates a function which returns
     * the property value of a given key on `object`.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {Object} object The object to inspect.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var object = { 'user': 'fred', 'age': 40, 'active': true };
     * _.map(['active', 'user'], _.propertyOf(object));
     * // => [true, 'fred']
     *
     * var object = { 'a': 3, 'b': 1, 'c': 2 };
     * _.sortBy(['a', 'b', 'c'], _.propertyOf(object));
     * // => ['b', 'c', 'a']
     */
    function propertyOf(object) {
      return function(key) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. If `start` is less than `end` a
     * zero-length range is created unless a negative `step` is specified.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the new array of numbers.
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    function range(start, end, step) {
      if (step && isIterateeCall(start, end, step)) {
        end = step = null;
      }
      start = +start || 0;
      step = step == null ? 1 : (+step || 0);

      if (end == null) {
        end = start;
        start = 0;
      } else {
        end = +end || 0;
      }
      // Use `Array(length)` so engines like Chakra and V8 avoid slower modes.
      // See https://youtu.be/XAqIpGU8ZZk#t=17m25s for more details.
      var index = -1,
          length = nativeMax(ceil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (++index < length) {
        result[index] = start;
        start += step;
      }
      return result;
    }

    /**
     * Invokes the iteratee function `n` times, returning an array of the results
     * of each invocation. The `iteratee` is bound to `thisArg` and invoked with
     * one argument; (index).
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [thisArg] The `this` binding of `iteratee`.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * var diceRolls = _.times(3, _.partial(_.random, 1, 6, false));
     * // => [3, 6, 4]
     *
     * _.times(3, function(n) { mage.castSpell(n); });
     * // => invokes `mage.castSpell(n)` three times with `n` of `0`, `1`, and `2` respectively
     *
     * _.times(3, function(n) { this.cast(n); }, mage);
     * // => also invokes `mage.castSpell(n)` three times
     */
    function times(n, iteratee, thisArg) {
      n = +n;

      // Exit early to avoid a JSC JIT bug in Safari 8
      // where `Array(0)` is treated as `Array(1)`.
      if (n < 1 || !nativeIsFinite(n)) {
        return [];
      }
      var index = -1,
          result = Array(nativeMin(n, MAX_ARRAY_LENGTH));

      iteratee = bindCallback(iteratee, thisArg, 1);
      while (++index < n) {
        if (index < MAX_ARRAY_LENGTH) {
          result[index] = iteratee(index);
        } else {
          iteratee(index);
        }
      }
      return result;
    }

    /**
     * Generates a unique ID. If `prefix` is provided the ID is appended to it.
     *
     * @static
     * @memberOf _
     * @category Utility
     * @param {string} [prefix] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return baseToString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    // Ensure `new LodashWrapper` is an instance of `lodash`.
    LodashWrapper.prototype = lodash.prototype;

    // Add functions to the `Map` cache.
    MapCache.prototype['delete'] = mapDelete;
    MapCache.prototype.get = mapGet;
    MapCache.prototype.has = mapHas;
    MapCache.prototype.set = mapSet;

    // Add functions to the `Set` cache.
    SetCache.prototype.push = cachePush;

    // Assign cache to `_.memoize`.
    memoize.Cache = MapCache;

    // Add functions that return wrapped values when chaining.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.callback = callback;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.filter = filter;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.functions = functions;
    lodash.groupBy = groupBy;
    lodash.indexBy = indexBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.invert = invert;
    lodash.invoke = invoke;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.omit = omit;
    lodash.once = once;
    lodash.pairs = pairs;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pluck = pluck;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortByAll = sortByAll;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.times = times;
    lodash.toArray = toArray;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.union = union;
    lodash.uniq = uniq;
    lodash.unzip = unzip;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.where = where;
    lodash.without = without;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.zip = zip;
    lodash.zipObject = zipObject;

    // Add aliases.
    lodash.backflow = flowRight;
    lodash.collect = map;
    lodash.compose = flowRight;
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.extend = assign;
    lodash.iteratee = callback;
    lodash.methods = functions;
    lodash.object = zipObject;
    lodash.select = filter;
    lodash.tail = rest;
    lodash.unique = uniq;

    // Add functions to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add functions that return unwrapped values when chaining.
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.deburr = deburr;
    lodash.endsWith = endsWith;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.findWhere = findWhere;
    lodash.first = first;
    lodash.has = has;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isBoolean = isBoolean;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isMatch = isMatch;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isString = isString;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.max = max;
    lodash.min = min;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padLeft = padLeft;
    lodash.padRight = padRight;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.result = result;
    lodash.runInContext = runInContext;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.startsWith = startsWith;
    lodash.template = template;
    lodash.trim = trim;
    lodash.trimLeft = trimLeft;
    lodash.trimRight = trimRight;
    lodash.trunc = trunc;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.words = words;

    // Add aliases.
    lodash.all = every;
    lodash.any = some;
    lodash.contains = includes;
    lodash.detect = find;
    lodash.foldl = reduce;
    lodash.foldr = reduceRight;
    lodash.head = first;
    lodash.include = includes;
    lodash.inject = reduce;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!lodash.prototype[methodName]) {
          source[methodName] = func;
        }
      });
      return source;
    }()), false);

    /*------------------------------------------------------------------------*/

    // Add functions capable of returning wrapped and unwrapped values when chaining.
    lodash.sample = sample;

    lodash.prototype.sample = function(n) {
      if (!this.__chain__ && n == null) {
        return sample(this.value());
      }
      return this.thru(function(value) {
        return sample(value, n);
      });
    };

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type string
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var isFilter = index == LAZY_FILTER_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee, thisArg) {
        var result = this.clone(),
            filtered = result.filtered,
            iteratees = result.iteratees || (result.iteratees = []);

        result.filtered = filtered || isFilter || (index == LAZY_WHILE_FLAG && result.dir < 0);
        iteratees.push({ 'iteratee': getCallback(iteratee, thisArg, 3), 'type': index });
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      var countName = methodName + 'Count',
          whileName = methodName + 'While';

      LazyWrapper.prototype[methodName] = function(n) {
        n = n == null ? 1 : nativeMax(+n || 0, 0);

        var result = this.clone();
        if (result.filtered) {
          var value = result[countName];
          result[countName] = index ? nativeMin(value, n) : (value + n);
        } else {
          var views = result.views || (result.views = []);
          views.push({ 'size': n, 'type': methodName + (result.dir < 0 ? 'Right' : '') });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };

      LazyWrapper.prototype[methodName + 'RightWhile'] = function(predicate, thisArg) {
        return this.reverse()[whileName](predicate, thisArg).reverse();
      };
    });

    // Add `LazyWrapper` methods for `_.first` and `_.last`.
    arrayEach(['first', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right': '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.rest`.
    arrayEach(['initial', 'rest'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this[dropName](1);
      };
    });

    // Add `LazyWrapper` methods for `_.pluck` and `_.where`.
    arrayEach(['pluck', 'where'], function(methodName, index) {
      var operationName = index ? 'filter' : 'map',
          createCallback = index ? matches : property;

      LazyWrapper.prototype[methodName] = function(value) {
        return this[operationName](createCallback(value));
      };
    });

    LazyWrapper.prototype.dropWhile = function(iteratee, thisArg) {
      var done,
          lastIndex,
          isRight = this.dir < 0;

      iteratee = getCallback(iteratee, thisArg, 3);
      return this.filter(function(value, index, array) {
        done = done && (isRight ? index < lastIndex : index > lastIndex);
        lastIndex = index;
        return done || (done = !iteratee(value, index, array));
      });
    };

    LazyWrapper.prototype.reject = function(iteratee, thisArg) {
      iteratee = getCallback(iteratee, thisArg, 3);
      return this.filter(function(value, index, array) {
        return !iteratee(value, index, array);
      });
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = start == null ? 0 : (+start || 0);
      var result = start < 0 ? this.takeRight(-start) : this.drop(start);

      if (typeof end != 'undefined') {
        end = (+end || 0);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var retUnwrapped = /^(?:first|last)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = arguments,
            chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isLazy = value instanceof LazyWrapper,
            onlyLazy = isLazy && !isHybrid;

        if (retUnwrapped && !chainAll) {
          return onlyLazy
            ? func.call(value)
            : lodash[methodName](this.value());
        }
        var interceptor = function(value) {
          var otherArgs = [value];
          push.apply(otherArgs, args);
          return lodash[methodName].apply(lodash, otherArgs);
        };
        if (isLazy || isArray(value)) {
          var wrapper = onlyLazy ? value : new LazyWrapper(this),
              result = func.apply(wrapper, args);

          if (!retUnwrapped && (isHybrid || result.actions)) {
            var actions = result.actions || (result.actions = []);
            actions.push({ 'func': thru, 'args': [interceptor], 'thisArg': lodash });
          }
          return new LodashWrapper(result, chainAll);
        }
        return this.thru(interceptor);
      };
    });

    // Add `Array.prototype` functions to `lodash.prototype`.
    arrayEach(['concat', 'join', 'pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:join|pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          return func.apply(this.value(), args);
        }
        return this[chainName](function(value) {
          return func.apply(value, args);
        });
      };
    });

    // Add functions to the lazy wrapper.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chaining functions to the lodash wrapper.
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toString = wrapperToString;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add function aliases to the lodash wrapper.
    lodash.prototype.collect = lodash.prototype.map;
    lodash.prototype.head = lodash.prototype.first;
    lodash.prototype.select = lodash.prototype.filter;
    lodash.prototype.tail = lodash.prototype.rest;

    return lodash;
  }

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose lodash to the global object when an AMD loader is present to avoid
    // errors in cases where lodash is loaded by a script tag and not intended
    // as an AMD module. See http://requirejs.org/docs/errors.html#mismatch for
    // more details.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js or RingoJS.
    if (moduleExports) {
      (freeModule.exports = _)._ = _;
    }
    // Export for Narwhal or Rhino -require.
    else {
      freeExports._ = _;
    }
  }
  else {
    // Export for a browser or Rhino.
    root._ = _;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],5:[function(require,module,exports){
//+require all

/**
 * todo убрать compatibility mode
 */
croc.define('croc.Class', {
    __STANDARD_TYPES: {
        'number': true,
        'string': true,
        'object': true,
        'boolean': true,
        'array': true,
        'function': true,
        'integer': true
    },

    /**
     * хеш классов
     */
    classes: {},

    /**
     * Является ли объект инстанцией класса. Класс можно передавать как строку.
     * @param {Object} obj
     * @param {String|Function} cls
     */
    check: function(obj, cls) {
        if (typeof cls === 'string') {
            cls = croc.Class.getClass(cls);
        }
        return !!cls && obj instanceof cls;
    },

    /**
     * Проверить соответствие значения типу
     * @param {Object} type
     * @param value
     * @param [throwError=true]
     * @param [className]
     * @param [propName]
     */
    checkType: function(type, value, throwError, className, propName) {
        if (value !== null) {
            var isOptions = _.isPlainObject(type);

            /**
             * @param [addMessage]
             * @return {boolean}
             */
            var throwErrorFn = function(addMessage) {
                if (throwError === undefined || throwError) {
                    throw new TypeError('' +
                    'Тип переданного значения некорректен! value = ' + value + '. ' +
                    (addMessage || '') +
                    (propName ? ' (' + className + '#' + propName + ')' : ''));
                }
                return false;
            };

            if (isOptions && type.check) {
                var typeCheckIsFn = typeof type.check === 'function';
                if ((typeCheckIsFn && !type.check(value)) || (!typeCheckIsFn && type.check.indexOf(value) === -1)) {
                    return throwErrorFn(Array.isArray(type.check) ? ' Возможные значения: [' + type.check.join(', ') + ']' : null);
                }
            }

            var checkType = isOptions ? type.type : type;
            if (checkType === undefined) {
                return;
            }

            if (Array.isArray(checkType)) {
                if (type.type.every(function(type) { return !this.checkType(type, value, false); }, this)) {
                    return throwErrorFn();
                }
            }
            else {
                if (typeof checkType === 'string' && !croc.Class.__STANDARD_TYPES[checkType]) {
                    checkType = croc.Class.getClass(checkType);
                    if (!checkType) {
                        checkType = {name: isOptions ? type.type : type, $$iface: true};
                    }
                    if (isOptions) {
                        type.type = checkType;
                    }
                }
                if (typeof checkType === 'object' && checkType.$$iface ? !croc.Interface.check(value, checkType.name) :
                        checkType === 'integer' ? typeof value !== 'number' || value % 1 === 0 :
                            checkType === 'array' ? !Array.isArray(value) :
                                typeof checkType === 'string' ? typeof value !== checkType :
                                    !(checkType === Element ? _.isElement(value) : value instanceof checkType)) {
                    return throwErrorFn('Требуемый тип: ' + (checkType.classname || checkType.name || checkType));
                }
            }
        }

        return true;
    },

    /**
     * Создать свойство для объекта
     * @param name
     * @param prop
     * @param dest
     * @param [Cls]
     */
    createProperty: function(name, prop, dest, Cls) {
        if (!prop) {
            prop = {getter: null, setter: null};
        }
        if (typeof prop === 'string') {
            prop = {field: prop, getter: null, setter: null};
        }

        prop.name = name;
        if (prop.inherit && Cls) {
            this._inheritProperty(prop, Cls);
        }

        var getterPrefix = ('__getter' in prop && '__') || ('_getter' in prop && '_') || ('getter' in prop && '');
        var setterPrefix = ('__setter' in prop && '__') || ('_setter' in prop && '_') || ('setter' in prop && '');

        if (getterPrefix === false) {
            getterPrefix = '';
            prop.getter = null;
        }

        if (setterPrefix === false) {
            setterPrefix = '';
            prop.setter = null;
        }

        var ucfPropName = croc.utils.strUcFirst(name);

        //getter
        var getter = getterPrefix === '__' ? prop.__getter :
            getterPrefix === '_' ? prop._getter : getterPrefix === '' ? prop.getter : false;

        if (getter !== false) {
            prop.getterName = getterPrefix + 'get' + ucfPropName;
            dest[prop.getterName] =
                croc.Class.__createPropertyGetter(getter, prop);
        }

        //event
        if (prop.event) {
            prop.event = getterPrefix + 'change' + ucfPropName;
            dest['$$event-' + prop.event] = true;
        }

        //setter
        var setter = setterPrefix === '__' ? prop.__setter :
            setterPrefix === '_' ? prop._setter : setterPrefix === '' ? prop.setter : false;

        if (setter !== false) {
            prop.setterName = setterPrefix + 'set' + ucfPropName;
            dest[prop.setterName] =
                croc.Class.__createPropertySetter(setter, prop, Cls);
        }

        //inital value
        var field = prop.field || '$$prop-' + name;
        if ('value' in prop) {
            dest[field] = prop.value;
        }
        else if (!(field in dest)) {
            dest[field] = null;
        }

        //add option
        if (prop.option && Cls) {
            var config = Cls.config;
            var propOption = typeof prop.option === 'object' ? prop.option : {};
            propOption.name = propOption.name || (typeof prop.option === 'string' ? prop.option : name);
            propOption.property = setterPrefix + name;

            var oldOption = config.options[propOption.name];
            if (oldOption && !_.isPlainObject(oldOption)) {
                oldOption = {value: oldOption};
            }
            propOption = config.options[propOption.name] = oldOption ?
                _.assign({}, propOption, oldOption) : propOption;
            if ('value' in prop) {
                propOption.value = prop.value;
            }
        }

        return prop;
    },

    deferredConstruction: function(instance, options, args) {
        var Cls = instance.constructor;
        var config = Cls.config;
        instance._options = options;
        instance._options = options = croc.Class.__preConstructor.call(instance, config, options || {});
        instance.$$preConstructed = true;
        if (instance.$$compatibilityConstructor) {
            Cls.prototype.__construct__.apply(instance, args);
        }
        else {
            Cls.prototype.__construct__.call(instance, options);
        }
        croc.Class.__postConstructor.call(instance, config, options);
    },

    /**
     * @param name
     * @param config
     * @param {boolean} [compatibilityMode=false] internal!
     * @returns {Function}
     */
    define: function(name, config, compatibilityMode) {
        if (this.classes[name]) {
            return this.classes[name];
        }

        this.__callPreClassCreate(name, config);

        var Cls;
        if (config.type === 'static') {
            Cls = function() {
                throw new Error('Нельзя инстанцировать статический класс "' + name + '"');
            };
            if (config.statics) {
                _.assign(Cls, config.statics);
            }
            this.__saveClass(name, Cls);
            return Cls;
        }

        if (!config.options) {
            config.options = {};
        }
        if (!config.properties) {
            config.properties = {};
        }
        if (config.implement && !Array.isArray(config.implement)) {
            config.implement = [config.implement];
        }
        if (config.include && !Array.isArray(config.include)) {
            config.include = [config.include];
        }

        //base class, constructor
        var baseCls = config.extend;
        if (!baseCls) {
            throw new Error('Не указан базовый класс для класса "' + name + '"');
        }

        Cls = function() {
            var options = this._options = arguments[0];
            if (!(this instanceof Cls)) {
                throw new Error('Инстанция класса конструируется только с new (' + name + ')');
            }
            if (Cls.isMixin) {
                throw new Error('Нельзя конструировать миксин: "' + name + '"');
            }
            if (config.type === 'abstract') {
                throw new Error('Нельзя конструировать абстрактный класс: "' + name + '"');
            }
            if (this.$$compatibilityConstructor) {
                options = {};
            }
            if (options && options.onPreConstruct) {
                options.onPreConstruct.call(this, this);
            }
            if (!this.$$deferConstruct) {
                croc.Class.deferredConstruction(this, options, arguments);
            }
        };

        //save data
        Cls.classname = name;
        Cls.config = config;
        Cls.baseclass = baseCls;

        //statics
        if (config.statics) {
            _.assign(Cls, config.statics);
        }

        //inheritance
        if (baseCls && baseCls !== Object) {
            Cls.prototype = Object.create(baseCls.prototype);
            Cls.prototype.constructor = Cls;
            Cls.superclass = baseCls.prototype;
        }

        if (compatibilityMode) {
            Cls.prototype.$$compatibilityMode = true;
            Cls.compatibilityMode = true;
            if (baseCls && baseCls.prototype.__construct__ && !baseCls.prototype.hasOwnProperty('init')) {
                baseCls.prototype.init = function() {
                    baseCls.prototype.__construct__.call(this, this);
                };
            }
        }

        //prototype
        if (config.members) {
            _.assign(Cls.prototype, config.members);
        }

        //save construct to prototype
        Cls.prototype.construct = Cls.prototype.__construct__ =
            config.construct || baseCls.prototype.__construct__ || baseCls;

        //interfaces
        if (config.implement) {
            config.implement.forEach(function(iface) {
                _.assign(Cls.prototype, iface.ifacesMix);
            });
        }

        //events
        if (config.events) {
            for (var event in config.events) {
                if (config.events.hasOwnProperty(event)) {
                    Cls.prototype['$$event-' + event] = true;
                }
            }
        }

        //mixins
        config.mixins = baseCls.config && baseCls.config.mixins ?
            baseCls.config.mixins.concat(config.include || []) : config.include || [];
        if (config.include) {
            var mixMembers = {};
            config.include.forEach(function(mixin) {
                var propName;

                //todo compatibility mode
                if (!mixin.classname) {
                    for (propName in mixin) {
                        if (!Cls.prototype[propName]) {
                            Cls.prototype[propName] = mixin[propName];
                        }
                    }
                    return;
                }

                for (propName in mixin.prototype) {
                    if (!Cls.prototype[propName]) {
                        mixMembers[propName] = mixin.prototype[propName];
                    }
                }

                var mixinOptions = mixin.config.options;
                for (var optionName in mixinOptions) {
                    if (mixinOptions.hasOwnProperty(optionName) && !config.options.hasOwnProperty(optionName)) {
                        config.options[optionName] = _.assign({}, mixinOptions[optionName]);
                    }
                }

                var mixinCls = mixin;
                do {
                    _.forOwn(mixinCls.config.properties, function(property, propName) {
                        var prop = config.properties[propName];
                        if (prop && prop.inherit) {
                            config.properties[propName] = _.assign({}, property, prop);
                        }
                        else if (!prop) {
                            config.properties[propName] = property;
                        }
                    });
                } while ((mixinCls = mixinCls.baseclass) && mixinCls.config);
            });
            _.assign(Cls.prototype, mixMembers);
        }

        //properties
        if (config.createProperty) {
            Cls.createProperty = config.createProperty;
        }
        else if (baseCls && baseCls.createProperty) {
            Cls.createProperty = baseCls.createProperty;
        }
        this.__createProperties(Cls);

        //options
        croc.Class.__inheritOptions(Cls, config, baseCls);

        if (!compatibilityMode) {
            //destruct
            if (!Cls.prototype.hasOwnProperty('dispose')) {
                Cls.prototype.dispose = function() {
                    if (config.destruct) {
                        config.destruct.call(this);
                    }
                    if (Cls.superclass && Cls.superclass.dispose) {
                        Cls.superclass.dispose.call(this);
                    }
                };
            }

            if (name) {
                this.__saveClass(name, Cls);
            }
        }

        this.__callOnClassCreate(Cls);

        return Cls;
    },

    /**
     * Возвращает класс по его имени
     * @param {string} name
     * @returns {Function}
     */
    getClass: function(name) {
        return (croc.Class && croc.Class.classes[name]) ||
            (croc.Interface && croc.Interface.interfaces[name]) ||
            croc.utils.objAccess(name);
    },

    isSubClass: function(cls, parentCls) {
        return croc.utils.forChain(cls.baseclass, 'baseclass', function(curCls) {
                if (curCls === parentCls) {
                    return true;
                }
            }) || false;
    },

    /**
     * @param prop
     * @param Cls
     * @protected
     */
    _inheritProperty: function(prop, Cls) {
        var baseProp;
        var baseCls = Cls;
        while (!baseProp && (baseCls = baseCls.baseclass)) {
            baseProp = baseCls.config && baseCls.config.properties[prop.name];
        }

        if (baseProp) {
            _.defaults(prop, baseProp);
        }
    },

    /**
     * @param name
     * @param config
     * @param [Cls=null]
     * @private
     */
    __callPreClassCreate: function(name, config, Cls) {
        var baseCls = Cls ? Cls.baseclass : config.extend;

        if (baseCls) {
            this.__callPreClassCreate(name, config, baseCls);
        }

        var preClassCreate = Cls ? Cls.config && Cls.config.preClassCreate : config.preClassCreate;
        if (preClassCreate) {
            preClassCreate(name, config, baseCls);
        }
    },

    /**
     * @param Cls
     * @param [targetCls=null]
     * @private
     */
    __callOnClassCreate: function(Cls, targetCls) {
        var config = Cls.config;
        if (Cls.baseclass) {
            this.__callOnClassCreate(Cls.baseclass, targetCls || Cls);
        }
        if (config && config.onClassCreate) {
            config.onClassCreate(targetCls || Cls);
        }
    },

    /**
     * @param Cls
     * @private
     */
    __createProperties: function(Cls) {
        var properties = Cls.config.properties;
        var createPropContent = Cls.createProperty ? Cls : this;
        for (var propName in properties) {
            properties[propName] = createPropContent.createProperty(propName, properties[propName], Cls.prototype, Cls);
        }
    },

    /**
     * @param getter
     * @param {Object} prop
     * @returns {*}
     * @private
     */
    __createPropertyGetter: function(getter, prop) {
        if (typeof getter === 'function') {
            return getter;
        }
        if (typeof getter === 'string') {
            return function() {
                return this[getter]();
            };
        }

        var key = prop.field || '$$prop-' + prop.name;
        return function() {
            return this[key];
        };
    },

    /**
     * @param setter
     * @param prop
     * @param Cls
     * @returns {*}
     * @private
     */
    __createPropertySetter: function(setter, prop, Cls) {
        if (typeof setter === 'function') {
            return setter;
        }
        if (typeof setter === 'string') {
            return function() {
                return this[setter].apply(this, arguments);
            };
        }

        var key = prop.field || '$$prop-' + prop.name;
        return function(value, internal) {
            var oldValue = this[key];
            if (prop.transform) {
                value = (typeof prop.transform === 'string' ? this[prop.transform] : prop.transform)
                    .call(this, value, oldValue, internal);
                oldValue = this[key];
            }
            if (prop.type || prop.check) {
                croc.Class.checkType(prop, value, true, Cls && Cls.classname, prop.name);
            }
            if (prop.compare ? !prop.compare.call(this, value, oldValue) : value !== oldValue) {
                this[key] = value;

                if (this.$$preConstructed) {
                    if (prop.apply) {
                        (typeof prop.apply === 'string' ? this[prop.apply] : prop.apply)
                            .call(this, value, oldValue, internal);
                    }
                    if (prop.event) {
                        this.fireEvent(prop.event, value, oldValue);
                    }
                }
                return true;
            }
            return false;
        };
    },

    /**
     * @param Cls
     * @param config
     * @param baseCls
     * @private
     */
    __inheritOptions: function(Cls, config, baseCls) {
        var options = baseCls.config && baseCls.config.options ?
            _.assign({}, baseCls.config.options) : {};
        var confOptions = config.options;
        var optionsToProperty = {};

        if (Cls.compatibilityMode) {
            _.forOwn(options, function(value, optionName) {
                if (config.members.hasOwnProperty(optionName)) {
                    confOptions[optionName] = {value: config.members[optionName]};
                }
            });
        }

        if (confOptions) {
            for (var optionName in confOptions) {
                if (confOptions.hasOwnProperty(optionName)) {
                    var confOption = confOptions[optionName];
                    var baseOption = options.hasOwnProperty(optionName) && options[optionName];
                    if (!_.isPlainObject(confOption)) {
                        confOption = confOptions[optionName] = {value: confOption};
                    }
                    var option = _.assign({}, baseOption || {}, confOption);
                    if (baseOption && option.value && baseOption.value && option.value !== baseOption.value) {
                        if (baseOption.extend) {
                            option.value = _.assign({}, baseOption.value, option.value);
                        }
                        else if (baseOption.deepExtend) {
                            option.value = _.assign(true, {}, baseOption.value, option.value);
                        }
                        else if (baseOption.concat) {
                            option.value = baseOption.value.concat(option.value);
                        }
                    }

                    if (!option.name) {
                        option.name = optionName;
                    }
                    if (option.property) {
                        optionsToProperty[optionName] = option;
                    }

                    options[optionName] = option;
                }
            }
        }

        config.options = options;

        if (Object.keys(optionsToProperty).length) {
            Cls.prototype.$$optionsToProperty = baseCls && baseCls.prototype.$$optionsToProperty ?
                _.assign({}, baseCls.prototype.$$optionsToProperty, optionsToProperty) :
                optionsToProperty;
        }
    },

    /**
     * @param config
     * @param passedOptions
     * @private
     */
    __postConstructor: function(config, passedOptions) {
        if (config.mixins) {
            config.mixins.forEach(function(mixin) {
                if (mixin.prototype.__construct__) {
                    mixin.prototype.__construct__.call(this, passedOptions);
                }
            }, this);
        }
    },

    /**
     * @param config
     * @param passedOptions
     * @returns {Object}
     * @private
     */
    __preConstructor: function(config, passedOptions) {
        var curOptions;
        if (this.$$compatibilityMode) {
            _.assign(this, passedOptions);
            curOptions = passedOptions = this;
        }
        else {
            curOptions = this.$$optionsSource || {};
        }

        //mixins
        if (config.mixins) {
            config.mixins.forEach(function(mixin) {
                if (mixin.config.preConstruct) {
                    mixin.config.preConstruct.call(this, passedOptions);
                }
            }, this);
        }

        //process options
        var options = config.options;
        var passedOptionsHash = _.clone(passedOptions);

        var checkOptions = this.$$checkOptions === undefined || this.$$checkOptions;
        var checkRequiredOptions = checkOptions &&
            (this.$$checkRequiredOptions === undefined || this.$$checkRequiredOptions);

        if (!checkRequiredOptions) {
            this.$$missedRequiredOptions = {};
        }

        for (var optionName in options) {
            if (options.hasOwnProperty(optionName)) {
                var option = options[optionName];
                if (option.hide) {
                    continue;
                }
                delete passedOptionsHash[optionName];

                if ((option.type || option.check) && passedOptions[optionName] !== undefined) {
                    croc.Class.checkType(option, passedOptions[optionName], true, this.constructor.classname,
                        option.name);
                }

                if (passedOptions[optionName] !== undefined) {
                    if ('value' in option) {
                        if (option.extend) {
                            curOptions[optionName] = _.assign({}, option.value, passedOptions[optionName]);
                        }
                        else if (option.deepExtend) {
                            curOptions[optionName] = _.merge({}, option.value, passedOptions[optionName]);
                        }
                        else if (option.concat) {
                            curOptions[optionName] = option.value.concat(passedOptions[optionName]);
                        }
                        else {
                            curOptions[optionName] = passedOptions[optionName];
                        }
                    }
                    else {
                        curOptions[optionName] = passedOptions[optionName];
                    }
                }
                else if ('value' in option) {
                    curOptions[optionName] = Array.isArray(option.value) ? option.value.concat() :
                        _.isPlainObject(option.value) ? _.assign({}, option.value) : option.value;
                }
                else if (option.required && !this.$$compatibilityMode) {
                    if (checkRequiredOptions) {
                        throw new Error('Опция "' + optionName + '" необходима для создания экземпляра класса "' + this.constructor.classname + '"');
                    }
                    else {
                        this.$$missedRequiredOptions[optionName] = true;
                    }
                }

                if (option.property) {
                    var property = typeof option.property === 'string' ? option.property : optionName;
                    if (!this.$$propertiesToOptions) {
                        this.$$propertiesToOptions = {};
                    }
                    this.$$propertiesToOptions[property.replace(/^__?/, '')] = option;
                    if (curOptions[optionName] !== undefined) {
                        this.setProperty(property, curOptions[optionName]);
                    }
                }
            }
        }

        if (checkOptions && !this.$$compatibilityMode) {
            for (var hashKey in passedOptionsHash) {
                if (hashKey[0] !== '_') {
                    throw new Error('Лишние опции для конструирования инстанции класса "' +
                    this.constructor.classname + '": ' + Object.keys(passedOptionsHash).join(', '));
                }
            }
        }

        //listeners
        if (curOptions.listeners && (!this.$$compatibilityMode || _.isPlainObject(curOptions.listeners))) {
            this.on(curOptions.listeners);
        }

        return curOptions;
    },

    /**
     * @param name
     * @param Cls
     * @private
     */
    __saveClass: function(name, Cls) {
        croc.utils.objAccess(name, croc.utils.objAccess.setVar, Cls);
        this.classes[name] = Cls;
    }
}, true);
},{}],6:[function(require,module,exports){
//старые классы
croc.extend = function(parent, config) {
    var newConfig = {
        extend: parent,
        members: config
    };

    var hasConstructor = config.hasOwnProperty('constructor');
    if (hasConstructor) {
        config.$$compatibilityConstructor = true;
    }
    if (hasConstructor || config.init) {
        var init = config.init || config.constructor;
        newConfig.construct = function() {
            if (hasConstructor) {
                init.apply(this, arguments);
            }
            else {
                init.call(this, this);
            }
        };
        delete config.init;
        if (hasConstructor) {
            delete config.constructor;
        }
    }

    return croc.Class.define(null, newConfig, true);
};

/**
 * @param {Function} cls
 * @param {...Object} mixins
 */
croc.mix = function(cls, mixins) {
    mixins = Array.prototype.slice.call(arguments, 1);
    for (var i = 0; i < mixins.length; ++i) {
        var mixin = mixins[i];
        if (!mixin) {
            throw new Error('Отсутствует переданный mixin!');
        }

        var prop;
        if (typeof mixin === 'function') {
            for (prop in mixin.prototype) {
                if (!cls.prototype.hasOwnProperty(prop) && prop !== '__construct__' && prop !== 'constructor' &&
                    prop !== 'init') {
                    cls.prototype[prop] = mixin.prototype[prop];
                }
            }

            var options = mixin.config.options;
            if (options) {
                for (prop in options) {
                    if (options.hasOwnProperty(prop)) {
                        var option = options[prop];
                        if (!cls.prototype.hasOwnProperty(prop)) {
                            var value = _.isPlainObject(option) ? option.value : option;
                            if (value !== undefined) {
                                cls.prototype[prop] = Array.isArray(value) ? value.concat() :
                                    _.isPlainObject(value) ? _.assign({}, value) : value;
                            }
                        }
                    }
                }
            }

            cls.config.mixins.push(mixin);
        }
        else {
            for (prop in mixin) {
                if (mixin.hasOwnProperty(prop) && !cls.prototype.hasOwnProperty(prop) &&
                    prop !== 'constructor' && prop !== 'init') {
                    cls.prototype[prop] = mixin[prop];
                }
            }

            if (mixin.hasOwnProperty('constructor')) {
                cls.config.mixins.push({
                    config: {},
                    prototype: {__construct__: mixin.constructor}
                });
            }
        }
    }
};

/**
 * @param {Function} cls
 * @param {...Object} ifaces
 */
croc.implement = function(cls, ifaces) {
    Array.prototype.slice.call(arguments, 1).forEach(function(iface) {
        _.assign(cls.prototype, iface.ifacesMix);
    });
};

},{}],7:[function(require,module,exports){
croc.Class.define('croc.Controller', {
    type: 'abstract',
    extend: croc.Object,
    
    options: {
        app: {},
        model: {}
    },
    
    statics: {
        /**
         * @type {Array.<croc.Controller>}
         * @static
         */
        classes: []
    },
    
    members: {
        getApp: function() {
            return this._options.app;
        },
        
        getModel: function() {
            return this._options.model;
        },
        
        /**
         * Инициализация контроллера
         */
        initFinish: function() {
        },
        
        initModel: function(model) {},
        
        initRender: function() {},
        
        initRoutes: function(app) {},
        
        initStart: function() {}
    },
    
    /**
     * @param Cls
     * @ignore
     */
    onClassCreate: function(Cls) {
        if (Cls.config.type !== 'abstract') {
            croc.Controller.classes.push(Cls);
        }
    }
});

},{}],8:[function(require,module,exports){
/**
 * Базовый интерфейс
 */
croc.Interface.define('croc.IObject', {
    members: {
        /**
         * Создать биндинг свойства prop объекта на свойство targetProp объекта target. Возможно указать mapper для трансформации
         * значения свойства. Возвращает функцию, которая разрывает биндинг при её вызове.
         * @param {String} prop
         * @param {Object} target
         * @param {String} targetProp
         * @param {function(*):*} [mapper=null]
         * @param [context=null]
         * @return {Function}
         */
        bind: function(prop, target, targetProp, mapper, context) {},

        clearListeners: function() {},

        getProperty: function(property) {},

        getUniqueId: function() {},

        /**
         * Очистка объекта
         */
        dispose: function() {},

        /**
         * @param {string} property
         * @param value
         * @param oldValue
         */
        fireChangeProperty: function(property, value, oldValue) {},

        /**
         * @param {string} event
         * @param {...*} args
         * @returns {*}
         */
        fireEvent: function(event, args) {},

        /**
         * Есть ли обработчики данного события
         * @param {string} event
         */
        hasListeners: function(event) {},

        /**
         * Вызывает callback каждый раз, когда значение свойства prop изменяется, а также непосредственно в момент вызова этого
         * метода. Возвращает функцию, которая прекращает прослушивание свойства при её вызове.
         * @param {String} prop
         * @param {Function} callback
         * @param [context=null]
         * @return {Function}
         */
        listenProperty: function(prop, callback, context) {},

        /**
         * @param {string|Object.<string, Function>} eventName
         * @param {Function|Object} [fn=null]
         * @param {Object} [context=null]
         */
        on: function(eventName, fn, context) {},

        /**
         * @param property
         * @param callback
         * @param [context]
         */
        onChangeProperty: function(property, callback, context) {},

        /**
         * Добавить обработчик события, который будет удалён при первом вызове
         * @param {string} event
         * @param {Function} fn
         * @param [scope=null]
         */
        once: function(event, fn, scope) {},

        setProperty: function(property, value) {},

        /**
         * @param eventName
         * @param fn
         * @param [scope]
         */
        un: function(eventName, fn, scope) {}
    }
});

},{}],9:[function(require,module,exports){
croc.define('croc.Interface', {
    interfaces: {},

    /**
     * Проверяет, что instance реализует интерфейс iface.
     * @param {Object} instance
     * @param {string} iface
     * @returns {boolean}
     */
    check: function(instance, iface) {
        if (typeof instance === 'function') {
            throw new TypeError('instance должен быть инстанцией класса, но не функцией');
        }
        return !!instance['$$iface-' + iface];
    },

    define: function(name, config) {
        if (config.extend && !Array.isArray(config.extend)) {
            config.extend = [config.extend];
        }

        var iface = {
            $$iface: true,
            name: name,
            config: config,
            ifacesMix: {}
        };

        iface.ifacesMix['$$iface-' + name] = true;
        if (config.extend) {
            config.extend.forEach(function(baseIFace) {
                _.assign(iface.ifacesMix, baseIFace.ifacesMix);
            });
        }

        croc.utils.objAccess(name, croc.utils.objAccess.setVar, iface);
        croc.Interface.interfaces[name] = iface;
        return iface;
    }
}, true);
},{}],10:[function(require,module,exports){
croc.define('croc.Mixin', {
    define: function(name, config) {
        if (!config.extend) {
            config.extend = Object;
        }
        var mixin = croc.Class.define(name, config);
        mixin.isMixin = true;
        return mixin;
    }
});
},{}],11:[function(require,module,exports){
var EventEmitter = require('events').EventEmitter;

/**
 * Базовый объект для всех объектов приложения
 */
croc.Class.define('croc.Object', {
    extend: EventEmitter,
    implement: croc.IObject,
    
    statics: {
        /**
         * @private
         */
        __marshalClasses: {},
        
        /**
         * Возвращает на основе переданного объекта, модель, в которой свойства соответствуют полям этого объекта (маршалинг)
         * При этом значения свойств также подвергаются маршалингу
         * Если передан массив, то будет возвращён croc.data.ObservableArray
         * @param {Object|Array|*} obj
         * @param {boolean} [deep=true]
         * @returns {croc.Object|croc.data.ObservableArray|*}
         */
        createModel: function(obj, deep) {
            if (obj && (obj instanceof croc.Object)) {
                return obj;
            }
            
            if (deep === undefined) {
                deep = true;
            }
            
            if (Array.isArray(obj)) {
                return new croc.data.ObservableArray({
                    original: deep ? obj.map(function(x) { return croc.Object.createModel(x); }) : obj
                });
            }
            
            if (!_.isPlainObject(obj)) {
                return obj;
            }
            
            var properties = Object.keys(obj);
            var id = properties.sort().join('__marshaling_delimiter__');
            var Cls = this.__marshalClasses[id];
            
            if (!Cls) {
                var config = {
                    extend: croc.Object,
                    construct: function(options) {
                        properties.forEach(function(property) {
                            if (property in options) {
                                this.setProperty(property,
                                    deep ? croc.Object.createModel(options[property]) : options[property]);
                            }
                        }, this);
                    },
                    properties: {},
                    options: {}
                };
                
                _.forOwn(obj, function(val, key) {
                    config.properties[key] = {event: true};
                    config.options[key] = null;
                });
                
                Cls = this.__marshalClasses[id] = croc.Class.define(null, config);
            }
            
            return new Cls(obj);
        },
        
        /**
         * Возвращает имя геттера, сеттера или события для свойства
         * @param {string} part get|set|change
         * @param {string} property
         * @returns {string}
         */
        getPropertyPart: function(part, property) {
            var prefix = '';
            property = property.replace(/^_{0,2}/, function(match) {
                prefix = match;
                return '';
            });
            
            return prefix + part + property[0].toUpperCase() + property.slice(1);
        },
        
        /**
         * Прослушивание нескольких свойств одной функцией
         * @param {croc.IObject} source
         * @param {String} sourceProperty
         * @param {Function} callback
         * @param {Object} [context=null]
         * @return {Function}
         */
        listenProperties: function(source, sourceProperty, /*source2, source2Property, ...*/callback, context) {
            var sources;
            if (Array.isArray(source)) {
                sources = source;
                context = callback;
                callback = sourceProperty;
            }
            else {
                sources = [];
                
                for (var i = 1; i - 1 < arguments.length; i += 2) {
                    var curSource = arguments[i - 1];
                    var curSourceProperty = arguments[i];
                    if (typeof curSourceProperty !== 'string') {
                        callback = curSource;
                        context = curSourceProperty;
                        break;
                    }
                    
                    sources.push([curSource, curSourceProperty]);
                }
            }
            
            if (!context) {
                context = window;
            }
            
            var onChange = function(index) {
                var args = sources.map(function(source, j) {
                    return !source[0] ? undefined :
                        source[1][0] === ':' ? index === j :
                            source[0][croc.Object.getPropertyPart('get', source[1])]();
                });
                callback.apply(context, args);
            };
            
            var unbinders = sources.map(function(source, i) {
                if (source[0]) {
                    return source[0].listenProperty(source[1], _.partial(onChange, i));
                }
                else {
                    onChange(i);
                    return _.noop;
                }
            });
            
            return function() {
                unbinders.forEach(function(x) { x(); });
            };
        },
        
        /**
         * Мерджинг конфигураций для объектов. Умно мерджит секцию listeners, сохраняя все обработчики.
         * @param {Object} target
         * @param {Object} source
         * @returns {Object}
         */
        mergeConf: function(target, source) {
            if (!source) {
                return target;
            }
            
            var listeners;
            if (target.listeners && source.listeners) {
                listeners = _.assign({}, target.listeners);
                _.forOwn(source.listeners, function(listener, event) {
                    if (listeners[event]) {
                        var targetListener = listeners[event];
                        listeners[event] = function() {
                            targetListener.apply(this, arguments);
                            listener.apply(this, arguments);
                        };
                    }
                    else {
                        listeners[event] = listener;
                    }
                });
            }
            
            _.assign(target, source);
            if (listeners) {
                target.listeners = listeners;
            }
            
            return target;
        },
        
        /**
         * Обеспечивает биндинг нескольких свойств различных объектов на одно свойство targetProperty объекта target
         * @param {croc.IObject} source
         * @param {String} sourceProperty
         * @param {Object} target
         * @param {String} targetProperty
         * @param {Function} converter
         * @param {Object} [context=null]
         * @return {Function}
         */
        multiBind: function(source, sourceProperty, /*source2, source2Property, ...*/target, targetProperty, converter,
                            context) {
            var sources;
            if (Array.isArray(source)) {
                sources = source;
                context = converter;
                converter = targetProperty;
                targetProperty = target;
                target = sourceProperty;
            }
            else {
                var args = _.toArray(arguments);
                var tailLength = typeof args[args.length - 3] === 'string' ? 4 : 3;
                var tail = args.slice(args.length - tailLength);
                var sourcesPairs = args.slice(0, args.length - tailLength);
                target = tail[0];
                targetProperty = tail[1];
                converter = tail[2];
                context = tail[3];
                
                sources = [];
                for (var i = 0; i < sourcesPairs.length; i += 2) {
                    sources.push([sourcesPairs[i], sourcesPairs[i + 1]]);
                }
            }
            
            if (!context) {
                context = window;
            }
            
            var setter = croc.Object.getPropertyPart('set', targetProperty);
            //noinspection JSCheckFunctionSignatures,JSValidateTypes
            return croc.Object.listenProperties(sources, function() {
                target[setter](converter.apply(context, arguments));
            });
        },
        
        /**
         * Связывает свойства объектов в обе стороны
         * @param {croc.IObject} source
         * @param {string} sourceProperty
         * @param {croc.IObject} target
         * @param {string} targetProperty
         * @param {function(*):*} [sourceToTargetMapper=undefined]
         * @param {function(*):*} [targetToSourceMapper=undefined]
         * @param {Object} [context=undefined]
         * @returns {Function}
         */
        twoWaysBinding: function(source, sourceProperty, target, targetProperty, sourceToTargetMapper,
                                 targetToSourceMapper, context) {
            if (context) {
                if (sourceToTargetMapper) {
                    sourceToTargetMapper = sourceToTargetMapper.bind(context);
                }
                if (targetToSourceMapper) {
                    targetToSourceMapper = targetToSourceMapper.bind(context);
                }
            }

//            function getName(target) {
//                return target instanceof croc.ui.form.field.TextField ? 'textfield' : target instanceof croc.ui.map.MultiMap ? 'multimap' : target instanceof croc.ui.map.YandexMap ? 'yandexmap' : 'unknown';
//            }
            
            var ignoreValue = {};
            
            function bind(source, sourceProperty, target, targetProperty, mapper, unmapper, context) {
                var targetGetter = croc.Object.getPropertyPart('get', targetProperty);
                var targetSetter = croc.Object.getPropertyPart('set', targetProperty);
                var sourceGetter = croc.Object.getPropertyPart('get', sourceProperty);
                var sourceSetter = croc.Object.getPropertyPart('set', sourceProperty);
                return source.listenProperty(sourceProperty, function(value) {
                    if (target.getUniqueId() in ignoreValue) {
                        delete ignoreValue[target.getUniqueId()];
                        return;
                    }
                    
                    var oldTargetValue = target[targetGetter]();
                    if (mapper) {
                        value = mapper(value, oldTargetValue);
                    }
                    
                    ignoreValue[source.getUniqueId()] = value;
                    target[targetSetter](value);
                    delete ignoreValue[source.getUniqueId()];
                    
                    var newValue = target[targetGetter]();
                    if (newValue !== value) {
                        var sourceValue = unmapper ? unmapper(newValue, source[sourceGetter]()) : newValue;
                        
                        ignoreValue[target.getUniqueId()] = sourceValue;
                        source[sourceSetter](sourceValue);
                        delete ignoreValue[target.getUniqueId()];
                    }
                });
            }
            
            var sourceUnbinder = bind(source, sourceProperty, target, targetProperty, sourceToTargetMapper,
                targetToSourceMapper);
            var targetUnbinder = bind(target, targetProperty, source, sourceProperty, targetToSourceMapper,
                sourceToTargetMapper);
            return function() {
                sourceUnbinder();
                targetUnbinder();
            };
        }
    },
    
    events: {
        /**
         * Объект был разрушен
         */
        dispose: null
    },
    
    options: {
        /**
         * Проверять ли наличие события при попытке его возбуждения, подписки на него
         * @type {boolean}
         */
        checkEvents: true,
        
        /**
         * Объект с обработчиками событий объекта
         * @type {Object}
         */
        listeners: {
            value: {}
        },
        
        /**
         * Метод вызывает до конструирования объекта, но после создания ссылки на него. Можно использовать тогда,
         * когда ссылка на объект нужна внешней среде до его полного конструирования.
         * @type {function(croc.Object)}
         */
        onPreConstruct: null
    },
    
    members: {
        /**
         * Подписаться на событие
         * @param {string} eventName
         * @param {Function|Object} [callback=null]
         * @param {Object} [context=null]
         * @returns {croc.Object}
         */
        addListener: function(eventName, callback, context) {
            if (!this._events) {
                EventEmitter.call(this);
            }
            
            if (context) {
                var oldCallback = callback;
                callback = callback.bind(context);
                callback.listener = oldCallback;
            }
            
            this.__checkEventExists(eventName);
            if (!this.__stmObjEvents) {
                this.__stmObjEvents = {};
            }
            if (!this.__stmObjEvents[eventName]) {
                this._initEvent(eventName);
                this.__stmObjEvents[eventName] = true;
            }
            
            croc.Object.superclass.addListener.call(this, eventName, callback);
            
            return this;
        },
        
        /**
         * Создать биндинг свойства prop объекта на свойство targetProp объекта target. Возможно указать mapper для трансформации
         * значения свойства. Возвращает функцию, которая разрывает биндинг при её вызове.
         * @param {String} prop
         * @param {Object} target
         * @param {String} targetProp
         * @param {function(*):*} [mapper=null]
         * @param [context=null]
         * @return {Function}
         */
        bind: function(prop, target, targetProp, mapper, context) {
            var setter = croc.Object.getPropertyPart('set', targetProp);
            
            return this.listenProperty(prop, function(newValue, oldValue) {
                target[setter](mapper ? mapper.call(context || this, newValue, oldValue) : newValue);
            }, this);
        },
        
        /**
         * Удалить все обработчики событий объекта
         * @param {string} [event]
         */
        clearListeners: function(event) {
            this.__checkEventExists(event);
            this.removeAllListeners(event);
        },
        
        /**
         * Очистка объекта. Не перегружать! Использовать destruct.
         */
        dispose: function() {
            if (this.__stmObjDisposer) {
                this.__stmObjDisposer.disposeAll();
            }
            this.__stmObjDisposed = true;
            this.fireEvent('dispose');
        },
        
        /**
         * Возбудить событие
         * @param {string} event
         * @returns {*}
         */
        emit: function(event) {
            this.__checkEventExists(event);
            croc.Object.superclass.emit.apply(this, arguments);
        },
        
        /**
         * Возбудить событие изменения свойства
         * @param {string} property
         * @param value
         * @param oldValue
         */
        fireChangeProperty: function(property, value, oldValue) {
            this.fireEvent(croc.Object.getPropertyPart('change', property), value, oldValue);
        },
        
        /**
         * Возбудить событие
         * @param {string} event
         * @returns {*}
         */
        fireEvent: function(event) {
            this.emit.apply(this, arguments);
        },
        
        /**
         * Получить значение свойства по его имени
         * @param {string} property
         * @returns {*}
         */
        getProperty: function(property) {
            return this[croc.Object.getPropertyPart('get', property)]();
        },
        
        /**
         * Возвращает уникальный id объекта
         * @returns {Number}
         */
        getUniqueId: function() {
            return croc.utils.objUniqueId(this);
        },
        
        /**
         * Возвращает хранилище пользовательских данных (объект) ассоциированное с переданным объектом. Хранилище
         * уничтожается вместе с данным объектом (forObject).
         * @param {Object} [forObject]
         * @returns {Object}
         */
        getUserData: function(forObject) {
            return croc.utils.objUserData(this, forObject);
        },
        
        /**
         * Есть ли обработчики данного события
         * @param {string} event
         */
        hasListeners: function(event) {
            return EventEmitter.listenerCount(this, event) > 0;
        },
        
        /**
         * Разрушен ли объект
         * @returns {boolean}
         */
        isDisposed: function() {
            return !!this.__stmObjDisposed;
        },
        
        /**
         * Вызывает callback каждый раз, когда значение свойства prop изменяется, а также непосредственно в момент вызова этого
         * метода. Возвращает функцию, которая прекращает прослушивание свойства при её вызове.
         * @param {String} prop
         * @param {Function} callback
         * @param [context=null]
         * @return {Function}
         */
        listenProperty: function(prop, callback, context) {
            //если начинается с :, то это событие
            var isEvent = prop[0] === ':';
            if (isEvent) {
                prop = prop.slice(1);
            }
            
            var event = isEvent ? prop : croc.Object.getPropertyPart('change', prop);
            var curValue = isEvent ? null : this.getProperty(prop);
            
            var handler = function(value, oldValue) {
                if (isEvent) {
                    callback.apply(context || this, arguments);
                }
                else if (value !== curValue) {
                    curValue = value;
                    callback.call(context || this, value, oldValue);
                }
            };
            this.on(event, handler, this);
            if (!isEvent) {
                callback.call(context || this, curValue, curValue);
            }
            
            return function() {
                this.un(event, handler, this);
            }.bind(this);
        },
        
        /**
         * Подписаться на событие
         * @param {string|Object.<string, Function>} eventName
         * @param {Function|Object} [callback=null]
         * @param {Object} [context=null]
         * @returns {function|undefined}
         */
        on: function(eventName, callback, context) {
            if (typeof eventName === "object") {
                var events = eventName;
                context = callback;
                _.forOwn(eventName, function(value, event) {
                    if (typeof events[event] === "function") {
                        // shared options
                        this.on(event, events[event], context);
                    }
                    else {
                        // individual options
                        this.on(event, events[event].fn, events[event].scope || context);
                    }
                }, this);
                return;
            }
            
            this.addListener(eventName, callback, context);
            
            var self = this;
            return function() {
                self.removeListener(eventName, callback);
            };
        },
        
        /**
         * Подписаться на событие изменения значения свойства
         * @param {string} property
         * @param {function(*, *)} callback
         * @param [context]
         */
        onChangeProperty: function(property, callback, context) {
            this.on(croc.Object.getPropertyPart('change', property), callback, context);
        },
        
        /**
         * Добавить обработчик события, который будет удалён при первом вызове
         * @param {string} event
         * @param {Function} fn
         * @param [context=null]
         * @return {function}
         */
        once: function(event, fn, context) {
            var listener;
            var func = function() {
                listener();
                return fn.apply(this, arguments);
            };
            
            listener = this.on(event, func, context);
            return listener;
        },
        
        /**
         * Удаляет хранилище возвращённое методом {@link #getUserData}
         * @param {Object} [forObject]
         */
        removeUserData: function(forObject) {
            return croc.utils.objRemoveUserData(this, forObject);
        },
        
        /**
         * @param type
         * @param listener
         */
        removeListener: function removeListener(type, listener) {
            croc.Object.superclass.removeListener.call(this, type, listener.listener || listener);
        },
        
        /**
         * @param property
         * @param value
         * @param [internal]
         */
        setProperty: function(property, value, internal) {
            this[croc.Object.getPropertyPart('set', property)](value, internal);
        },
        
        /**
         * Отписаться от события
         * @param {string|function} eventName
         * @param {function} [fn]
         */
        un: function(eventName, fn) {
            if (typeof eventName === 'function') {
                eventName();
            }
            else {
                this.__checkEventExists(eventName);
                this.removeListener(eventName, fn);
            }
        },
        
        /**
         * @param {function} func
         * @param [context]
         * @param {number} [wait]
         * @returns {Function}
         */
        debounce: function(func, context, wait) {
            if (typeof context === 'number') {
                wait = context;
                context = null;
            }
            if (!wait) {
                wait = 0;
            }
            return _.debounce(this._getDisposer().wrapFunc(func, context), wait);
        },
        
        /**
         * Создаёт функцию, вызов которой будет запрещён после разрушения объекта
         * @param {function} func
         * @param [context]
         * @returns {Function}
         */
        disposableFunc: function(func, context) {
            return this._getDisposer().wrapFunc(func, context);
        },
        
        /**
         * Проверить, что все необходимые опции были установлены
         * @param {Object} options
         * @protected
         */
        _checkMissedOptions: function(options) {
            _.forOwn(this.$$missedRequiredOptions, function(x, optionName) {
                if (!(optionName in options)) {
                    throw new Error('Опция "' + optionName + '" необходима для создания экземпляра класса "' + this.constructor.classname + '"');
                }
            }, this);
        },
        
        /**
         * Возвращает Disposer для объекта, который очищается при очищении объекта
         * @returns {croc.util.Disposer}
         * @protected
         */
        _getDisposer: function() {
            return this.__stmObjDisposer || (this.__stmObjDisposer = new croc.util.Disposer());
        },
        
        /**
         * Метод вызывается перед тем, как добавляется первый обработчик события
         * @param {string} event
         * @protected
         */
        _initEvent: function(event) {
        },
        
        /**
         * @param event
         * @private
         */
        __checkEventExists: function(event) {
            if (!this.$$compatibilityMode && this._options && this._options.checkEvents && !this['$$event-' + event]) {
                throw new Error('Событие ' + event + ' в классе ' + this.constructor.classname + ' не зарегистрировано.');
            }
        }
    }
});

},{"events":3}],12:[function(require,module,exports){
//+require croc

(function() {
    var g_ajax_cache = {},
        g_fake_ajax_responses = [];
    
    var lastId = 0;

    /**
     * @param params {Object}
     * @param [params.forceCache=true] {Boolean}
     * @param [params.delayRequest=false] {Boolean}
     * @param [params.onRequest=null] {Function}
     * @param [scope]
     * @return {*}
     */
    croc.ajax = function(params, scope) {
        
        var id = ++lastId;

        //fake response
        var fakeResponse;
        var fakeResponseTimeout;
        if (g_fake_ajax_responses.length) {
            $.each(g_fake_ajax_responses, function(i, item) {
                if (croc.utils.objIncludes(params, item.params)) {
                    fakeResponse = item.response;
                    fakeResponseTimeout = item.delay;
                }
            });

            if (fakeResponse && typeof fakeResponse === 'function') {
                fakeResponse = fakeResponse(params);
            }
        }

        var onRequest = params.onRequest;
        var delayRequest = params.delayRequest;
        var forceCache = params.forceCache;

        delete params.onRequest;
        delete params.delayRequest;
        delete params.forceCache;

        var defaultUri = (Stm.env.proxyAjax || Stm.env.project.path) + 'ajx/';
        var defaultCfg = {
            type: 'post',
            dataType: 'json',
            async: true,
            timeout: 50000
        };
        var cfg = _.assign({}, defaultCfg, params);

        if (!cfg.url) {
            return false;
        }
        else if (!/^(https?:)?\/\/.+/.test(cfg.url)) {
            if (cfg.url.charAt(0) !== '/') {
                cfg.url = defaultUri + cfg.url;
            }

            if ($('base').length !== 0) {
                var location = window.location;
                cfg.url = location.protocol + '//' + location.hostname + cfg.url;
            }
        }


        if (cfg.data) {
            $.each(cfg.data, function() {
                if (Array.isArray(this) || _.isPlainObject(this)) {
                    cfg.data = {JSON_STR: JSON.stringify(cfg.data)};
                    return false;
                }
            });
        }

        if (scope) {
            cfg.context = scope;
        }
        
        croc.publish('system.ajax.request', id, cfg);

        //достаём ответ из кеша, если он был закеширован ранее
        var cacheKey;
        var cachedResult;
        var fakeResponseDeferred;

        if (forceCache) {
            cacheKey = croc.utils.objToKey(cfg);
            if (cacheKey in g_ajax_cache) {
                cachedResult = g_ajax_cache[cacheKey];

                if (!cachedResult || typeof cachedResult.always !== 'function') {
                    cachedResult = croc.ajax.createXhrHandler();
                    cachedResult.fromCache = true;
                    cachedResult.resolve(g_ajax_cache[cacheKey]);
                }
            }
        }

        if (fakeResponse !== undefined) {
            var fakeResponseTimeoutHandler = setTimeout(function() {
                var tmp = ['consol', 'lo'];
                if (window[tmp[0] + 'e']) {
                    try {
                        window[tmp[0] + 'e'][tmp[1] + 'g'](
                            'fake response: \n>' + JSON.stringify(cfg) + '\n<' + JSON.stringify(fakeResponse));
                    }
                    catch (ex) {}
                }
                fakeResponseDeferred.resolve(fakeResponse);
            }, fakeResponseTimeout);
            fakeResponseDeferred = croc.ajax.createXhrHandler(function() {
                clearTimeout(fakeResponseTimeoutHandler);
            });
        }

        function sendRequest() {
            if (onRequest) {
                onRequest();
            }

            if (forceCache && !cachedResult && !fakeResponse) {
                cachedResult = g_ajax_cache[cacheKey] = $.ajax(cfg);
            }

            var result = (cachedResult || fakeResponseDeferred || $.ajax(cfg));
            result.then(function(response, status, ajaxResponse) {
                if (!response || (cfg.dataType === 'json' && typeof response !== 'object')) {
                    if (cfg.dataType !== 'script') {
                        croc.publish('system.ajax.response', id, {
                            errcode: -1,
                            $$parseError: true,
                            $$statusCode: ajaxResponse && ajaxResponse.status,
                            $$statusText: ajaxResponse && ajaxResponse.statusText
                        }, cfg);
                    }
                    return;
                }

                //призываем Ктулху, чтобы синхронизировать куки между доменами
                //todo выпилить это из croc и поместить в app
                if ($.type(response) === "object" && 'img_url' in response) {
                    $('<img/>').attr('src', response.img_url).appendTo('body');
                }

                if (forceCache) {
                    if (response.errcode) {
                        delete g_ajax_cache[cacheKey];
                    }
                    else {
                        g_ajax_cache[cacheKey] = response;
                    }
                }

                if (Stm.env.ajaxSuggestFakeResponses && !params.url.match(/^\/d\/tpl\//)) {
                    //noinspection JSHint
                    var tmp = ['consol', 'lo'];
                    window[tmp[0] + 'e'][tmp[1] + 'g'](
                        'croc.ajax.substituteResponse(' + JSON.stringify(params, null, 4) + ', ' +
                            JSON.stringify(response, null, 4) + ');');
                }

                response = typeof response === 'object' ? response : {errcode: -1, $$noResponse: true};
                if (cachedResult && cachedResult.fromCache) {
                    response.$$cache = true;
                }
                else if (fakeResponseDeferred) {
                    response.$$fake = true;
                }
                if (ajaxResponse) {
                    response.$$statusCode = ajaxResponse.status;
                    response.$$statusText = ajaxResponse.statusText;
                }
                croc.publish('system.ajax.response', id, response, cfg);
            }, function(response) {
                if (response.statusText === 'abort') {
                    if (cacheKey) {
                        delete g_ajax_cache[cacheKey];
                    }
                    croc.publish('system.ajax.response', id, {
                        errcode: -1,
                        $$abort: true,
                        $$statusCode: response.status,
                        $$statusText: response.statusText
                    }, cfg);
                }
                else if (response.status === 200) {
                    croc.publish('system.ajax.response', id, {
                        errcode: -1,
                        $$parseError: true,
                        $$statusCode: response.status,
                        $$statusText: response.statusText
                    }, cfg);
                }
                else {
                    croc.publish('system.ajax.response', id, {
                        errcode: -1,
                        $$fail: true,
                        $$statusCode: response.status,
                        $$statusText: response.statusText
                    }, cfg);
                }
            });

            return result;
        }

        //если нужно ждать перед отправкой запроса
        if (delayRequest && !cachedResult) {
            var xhr;
            var delayTimeout = setTimeout(function() {
                xhr = sendRequest();
                croc.utils.defConnect(xhr, delayDeferred);
            }, delayRequest);

            var delayDeferred = croc.ajax.createXhrHandler(function() {
                if (xhr) { xhr.abort(); }
                else { clearTimeout(delayTimeout); }
            });
            return delayDeferred;
        }

        return sendRequest();
    };

    croc.ajax.createXhrHandler = function(abort) {
        var deferred = $.Deferred();
        deferred.abort = abort || function() {};
        return deferred;
    };

    /**
     * Подменить ответ от сервера на произвольный
     * @param {Object} params
     * @param {Object|Function} response
     * @param {number} [delay=500]
     */
    croc.ajax.substituteResponse = function(params, response, delay) {
        g_fake_ajax_responses.push({params: params, response: response, delay: delay || 1000});
    };
})();

},{}],13:[function(require,module,exports){
/**
 * Главный контроллер приложения
 *
 * @message system.page.beforeUnload
 * @message system.page.postBeforeUnload
 */
croc.Class.define('croc.controllers.InitializeOld', {
    extend: croc.Controller,
    members: {
        /**
         * Инициализация контроллера
         */
        initFinish: function() {
            this.__setUpNotifications();
            this.__setUpUnloading();
            
            //prevent b-overlay scroll
            $(document.body).on('mousewheel', '.b-overlay', function(e) {e.stopPropagation();});
        },
        
        initRender: function() {
            this.__renderWidgets();
        },
        
        /**
         * @private
         */
        __renderWidgets: function() {
            $('.js-construct').each(function() {
                var el = $(this);
                if (el.data('xtype')) {
                    croc.ui.Widget.getByElement(el, false, true);
                }
                var plugin = el.data('plugin');
                if (plugin) {
                    var pluginConf = el.data('pluginConf');
                    var plugins = (Array.isArray(plugin) ? plugin : [plugin]).map(function(name, index) {
                        var Plugin = croc.Class.getClass(name);
                        var conf = pluginConf && (Array.isArray(pluginConf) ? pluginConf[index] : pluginConf);
                        return new Plugin(conf ? _.assign({el: el}, conf) : {el: el});
                    }, this);
                    el.data('$$plugins', plugins);
                }
            });
            
            $('.js-generate').each(function() {
                croc.ui.Widget.generateWidget($(this));
            });
        },
        
        /**
         * @private
         */
        __setUpNotifications: function() {
            var Manager = croc.Class.getClass('croc.ui.notifications.Manager');
            if (Manager) {
                var handler = this._getDisposer().addListener(croc, 'system.ajax.response', function(id, response) {
                    if (!response) {
                        return;
                    }
                    
                    var message = response.errcode === 1 || response.$$parseError ? 'Внутренняя ошибка на сервере.' :
                        response.errcode === 2 ? 'Сервис временно недоступен.' :
                            response.$$statusCode >= 400 ? 'При обращении к серверу произошла ошибка.' : null;
                    
                    if (message) {
                        Manager.showNotification(message, 'error');
                    }
                });
                
                this._getDisposer().addListener(croc, 'system.page.postBeforeUnload', function() {
                    handler.remove();
                });
            }
        },
        
        /**
         * @private
         */
        __setUpUnloading: function() {
            this._getDisposer().addListener($(window), 'beforeunload', function() {
                var preventUnloadText;
                var preventUnload = function(text) {
                    preventUnloadText = text;
                };
                croc.publish('system.page.beforeUnload', preventUnload);
                if (preventUnloadText) {
                    return preventUnloadText;
                }
                else {
                    croc.publish('system.page.postBeforeUnload');
                }
            });
        }
    }
});

},{}],14:[function(require,module,exports){
//+ignore croc.utils

if (croc.initialize) {
    croc.reinit = true;
}
if (!croc.define) {
    /**
     * Создать или дополнить объект по с имененм name в глобальной области видимости
     * @param {string} name
     * @param {Object} desc
     * @param {boolean} [dontOverwrite=false]
     */
    croc.define = function(name, desc, dontOverwrite) {
        var result;
        if (croc.utils) {
            result = croc.utils.objAccess(name, croc.utils.objAccess.setVarIfNotExists, desc);
        }
        else {
            var key = name.split('.');
            if (key.length > 2) {
                throw new Error('Пока не подгружен croc.utils невозможно задать ключ длинной более 2-х');
            }
            result = window[key[0]] || (window[key[0]] = {});
            if (key.length > 1) {
                result = result[key[1]] || (result[key[1]] = {});
            }
        }
        if (result !== desc) {
            if (dontOverwrite) {
                _.defaults(result, desc);
            }
            else {
                _.assign(result, desc);
            }
        }
    };
}

/**
 * Инфраструктура клиентского приложения:
 *  - сервисы - не имеют доступа к DOM-элементам, создаются по требованию
 *  - контроллеры - все подключённые контроллеры могут перехватить (с помощью метода hookStage) стадии:
 *  bootstrap, render, load. Метод initFinish каждого контроллера вызывается после загрузки страницы.
 *  - шина событий PubSub
 *
 *  @message system.application.ready
 *  @message system.application.stage
 */
croc.define('croc', {
    isDebug: true,
    isProduction: false,
    
    /**
     * @private
     */
    __publishersOnDemand: {},
    
    /**
     * @private
     */
    __services: [],
    
    /**
     * Диспоузер отчищает при смене страницы
     * @returns {croc.util.Disposer}
     */
    getDisposer: function() {
        return this.__disposer || (this.__disposer = new croc.util.Disposer());
    },
    
    /**
     * Получить необходимый сервис (создаёт его при его отсутствии)
     * @param {Function|string} Cls
     * @returns {*}
     */
    getService: function(Cls) {
        if (typeof Cls === 'string') {
            Cls = croc.utils.objAccess(Cls);
            if (!Cls) {
                return null;
            }
        }
        
        var id = croc.utils.objUniqueId(Cls);
        return this.__services[id] || (this.__services[id] = new Cls());
    },
    
    /**
     * Возвращает все зарегистрированные сервисы
     * @returns {Object.<string, croc.Object>}
     */
    getServices: function() {
        return this.__services;
    },
    
    jqPlugin: function(plugin) {
        if (!plugin.$$crocProcessed) {
            plugin($);
            plugin.$$crocProcessed = true;
        }
    },
    
    initialize: function(app, controllers) {
        var ctrlInstances = (controllers || croc.Controller.classes).map(function(controllerCls) {
            var instance = new controllerCls({app: app});
            if (app) {
                instance.initRoutes(app);
            }
            instance.initStart();
            return instance;
        });
        
        if (app) {
            var modelReady = function(model) {
                //model
                ctrlInstances.forEach(function(controller) {
                    controller._options.model = model;
                    controller.initModel(model);
                });
                
                //finish
                ctrlInstances.forEach(function(controller) {
                    controller.initFinish();
                });
                
                this.publishOnDemandOnce('system.application.ready');
            }.bind(this);
            
            if (app.model) {
                modelReady(app.model);
            }
            app.on('model', modelReady);
            if (this.isClient) {
                app.on('render', function(page) {
                    page.model.set('_page.client', true);
                    modelReady(page.model);
                });
                app.on('finishInit', function() {
                    app.model.set('_page.client', true);
                });
            }
        }
        else {
            $(document).ready(function() {
                //render
                ctrlInstances.forEach(function(controller) {
                    controller.initRender();
                });
                
                //finish
                ctrlInstances.forEach(function(controller) {
                    controller.initFinish();
                });
                
                this.publishOnDemandOnce('system.application.ready');
            }.bind(this));
            
            $(window).load(function() {
                this.publishOnDemandOnce('system.application.load');
            }.bind(this));
        }
    },
    
    /**
     * Лежит ли данная страница на active/dev/production (в следствии у неё есть доступ к контроллерам)
     * @returns {boolean}
     */
    isRemoteServer: function() {
        return !!location.hostname.match(/(^|\.)sotmarket\.ru$/);
    },
    
    /**
     * Creates namespaces to be used for scoping variables and classes so that they are not global. Usage:
     * <pre><code>
     croc.ns('Company', 'Company.data');
     Company.Widget = function() { ... }
     Company.data.CustomStore = function(config) { ... }
     </code></pre>
     * @param {...string} namespaces
     * @deprecated use {@link croc#define}
     */
    ns: function(namespaces) {
        for (var i = 0; i < arguments.length; ++i) {
            croc.utils.objAccess(arguments[i], croc.utils.objAccess.setVarIfNotExists, {});
        }
    },
    
    /**
     * Опубликовать сообщение в шину сообщений
     * @param event
     * @param {...*} args
     */
    publish: function(event, args) {
        this.__getEventBus().fireEvent.apply(this.__getEventBus(), arguments);
    },
    
    /**
     * Опубликовать сообщение в шину сообщений. Все подписчики удаляются после публикации.
     * @param event
     * @param {...*} args
     */
    publishOnce: function(event, args) {
        this.__getEventBus().fireEvent.apply(this.__getEventBus(), arguments);
        this.__getEventBus().clearListeners(event);
    },
    
    /**
     * Опубликовать сообщение в шину сообщений. Подписчик получит сообщение сразу после подписки если он сделал это
     * после публикации сообщения.
     * @param event
     * @param {...*} args
     */
    publishOnDemand: function(event, args) {
        this.publish.apply(this, arguments);
        
        if (!this.__publishersOnDemand[event]) {
            this.__publishersOnDemand[event] = [];
        }
        this.__publishersOnDemand[event].push(Array.prototype.slice.call(arguments, 1));
    },
    
    /**
     * Опубликовать сообщение в шину сообщений. Подписчик получит сообщение сразу после подписки если он сделал это
     * после публикации сообщения. Все подписчики удаляются после публикации.
     * @param event
     * @param {...*} args
     */
    publishOnDemandOnce: function(event, args) {
        this.publishOnce.apply(this, arguments);
        
        if (!this.__publishersOnDemand[event]) {
            this.__publishersOnDemand[event] = [];
        }
        this.__publishersOnDemand[event].push(Array.prototype.slice.call(arguments, 1));
    },
    
    /**
     * Подписаться на сообщения определённого типа шины сообщений
     * @param event
     * @param callback
     * @param context
     * @return {function}
     */
    subscribe: function(event, callback, context) {
        var listener = this.__getEventBus().on.apply(this.__getEventBus(), arguments);
        this.__callPublishersOnDemand(event, callback, context);
        return listener;
    },
    
    /**
     * Подписаться на сообщения определённого типа шины сообщений. После получения сообщения происходит отписка.
     * @param event
     * @param callback
     * @param context
     * @return {function}
     */
    subscribeOnce: function(event, callback, context) {
        var listener = this.__getEventBus().once.apply(this.__getEventBus(), arguments);
        this.__callPublishersOnDemand(event, callback, context);
        return listener;
    },
    
    /**
     * Отписаться от получения сообщений
     * @param event
     * @param callback
     * @param context
     */
    unsubscribe: function(event, callback, context) {
        this.__getEventBus().un.apply(this.__getEventBus(), arguments);
    },
    
    /**
     * Удалить всех подписчиков на шину сообщений
     */
    unsubscribeAll: function() {
        this.__eventBus = null;
        this.__publishersOnDemand = {};
    },
    
    /**
     * @param event
     * @param callback
     * @param context
     * @private
     */
    __callPublishersOnDemand: function(event, callback, context) {
        if (this.__publishersOnDemand[event]) {
            this.__publishersOnDemand[event].forEach(function(args) {
                callback.apply(context || window, args);
            });
        }
    },
    
    /**
     * @returns {croc.Object}
     * @private
     */
    __getEventBus: function() {
        return this.__eventBus || (this.__eventBus = new croc.Object({checkEvents: false}));
    }
}, true);

//todo избавиться от префикса stm, сделать, что-то с конфигом
if (typeof Stm === 'undefined') {
    Stm = {};
}
if (!Stm.env) {
    Stm.env = {
        project: {
            path: '/',
            mainPage: ''
        }
    };
}

},{}],15:[function(require,module,exports){
/**
 * Список элементов, изменения которого можно отследить, но который нельзя изменять
 */
croc.Interface.define('croc.data.IObservableList', {
    extend: croc.IObject,

    events: {
        /**
         * изменение данных массива
         * @param {number} index
         * @param {Array} insert
         * @param {Array} remove
         */
        change: null,

        /**
         * @param item
         * @param {number} index
         */
        updateItem: null
    },

    properties: {
        /**
         * Длина массива
         * @type {number}
         */
        length: {
            type: 'number',
            getter: null,
            event: true
        },

        /**
         * Является ли массив пустым
         * @type {boolean}
         */
        empty: {
            type: 'boolean',
            getter: null,
            event: true
        }
    },

    members: {
        /**
         * Возвращает копию исходного массива
         * @return {Array}
         */
        cloneRawArray: function() {},

        /**
         * Алиас для getArray().forEach(iterator, context)
         * @param {function(*, number)} iterator
         * @param [context=null]
         */
        forEach: function(iterator, context) {},

        /**
         * Возвращает исходный массив
         * @return {Array}
         */
        getArray: function() {},

        /**
         * Алиас для getArray()[index]
         * @param {Number} index
         * @return {*}
         */
        getItem: function(index) {},

        /**
         * Алиас для getArray().length
         * @return {Number}
         */
        getLength: function() {},

        /**
         * Версия массива (количество изменений с момента создания)
         * @returns {number}
         */
        getVersion: function() {},

        /**
         * Алиас для getArray().indexOf(searchElement, fromIndex)
         * @param searchElement
         * @param [fromIndex=0]
         * @return {Number}
         */
        indexOf: function(searchElement, fromIndex) {},

        /**
         * Отслеживать изменения массива (если в массиве есть элементы, то сразу же запускает callback)
         * @param {function(number, Array, Array)} callback
         * @param {Object} [context]
         * @returns {Function}
         */
        listenChanges: function(callback, context) {}
    }
});

},{}],16:[function(require,module,exports){
/**
 * Массив, возбуждающий событие change и changeLength при его изменении
 */
croc.Class.define('croc.data.ObservableArray', {
    extend: croc.Object,
    implement: croc.data.IObservableList,

    statics: {
        /**
         * Синхронизирует два массива source и dest (source сортируется для сохранения порядка)
         * @param {croc.data.ObservableArray|croc.data.IObservableList} source
         * @param {croc.data.ObservableArray} dest
         * @param {Object} [options]
         * @param {boolean} [options.oneWay=false]
         * @param {boolean} [options.weak=false] не сохранять сортировку массивов
         * @param {boolean} [options.weakDuplicates=true] разрешить ли вставку одинаковых элементов в режиме weak
         * @return {Function}
         * @static
         */
        linkArrays: function(source, dest, options) {
            var disposer = new croc.util.Disposer();
            if (!options) {
                options = {};
            }
            if (!('weakDuplicates' in options)) {
                options.weakDuplicates = true;
            }

            if (!options.weak) {
                var sourceArray = source.getArray();
                var remove = [];
                dest.getArray().forEach(function(x, index) {
                    if (sourceArray.indexOf(x) === -1) {
                        remove.push(index);
                    }
                });
                var insert = _.difference(source.getArray(), dest.getArray());

                remove.reverse().forEach(function(i) {
                    dest.removeAt(i);
                });
                insert.forEach(function(item) {
                    dest.push(item);
                });

                if (options.oneWay) {
                    dest.sort(function(a, b) {
                        return source.indexOf(a) - source.indexOf(b);
                    });
                }
                else {
                    source.sort(function(a, b) {
                        return dest.indexOf(a) - dest.indexOf(b);
                    });
                }
            }

            var sync = false;

            function bind(source, dest) {
                disposer.addListeners(source, {
                    change: function(index, remove, insert) {
                        if (sync) {
                            return;
                        }
                        sync = true;
                        if (options.weak) {
                            remove.forEach(function(x) { dest.remove(x); });
                            if (options.weakDuplicates) {
                                dest.append(insert);
                            }
                            else {
                                insert.forEach(function(x) { dest.toggleItem(x, true); });
                            }
                        }
                        else {
                            dest.replaceRange(index, remove.length, insert);
                        }
                        sync = false;
                    },
                    updateItem: function(item, index) {
                        if (sync) {
                            return;
                        }
                        sync = true;
                        if (options.weak) {
                            dest.onUpdateItem(item);
                        }
                        else {
                            dest.onUpdateItemAt(index);
                        }
                        sync = false;
                    }
                });
            }

            bind(source, dest);
            if (!options.oneWay) {
                bind(dest, source);
            }

            return function() {
                disposer.disposeAll();
            };
        },

        /**
         * Отображение массива source на массив dest. Функция mapper трансформирует каждый элемент при отображении. Возвращает
         * функцию, которая разрывает отображение при её вызове.
         * @param {croc.data.IObservableList} source
         * @param {croc.data.ObservableArray} dest
         * @param {function(*):*} [mapper]
         * @param [context]
         * @return {Function}
         * @static
         */
        mapArray: function(source, dest, mapper, context) {
            function map(arr) {
                var mapped = [];
                $.each(arr, function(i, item) {
                    mapped.push(mapper ? mapper.call(context || window, item) : item);
                });

                return mapped;
            }

            var changeListener = source.on('change', function(index, remove, insert) {
                dest.splice.apply(dest, [index, remove.length].concat(map(insert)));
            });

            var updateListener = source.on('updateItem', function(item, index) {
                dest.onUpdateItemAt(index);
            });

            if (source.getLength() > 0) {
                var mapped = map(source.getArray());
                if (!croc.utils.arrEqual(dest.getArray(), mapped)) {
                    dest.replaceAll(mapped);
                }
            }


            return function() {
                changeListener();
                updateListener();
            };
        }
    },

    events: {
        /**
         * изменение данных массива
         * @param {number} index
         * @param {Array} insert
         * @param {Array} remove
         */
        change: null,

        /**
         * @param item
         * @param {number} index
         */
        updateItem: null
    },

    properties: {
        /**
         * Длина массива
         * @type {number}
         */
        length: {
            type: 'number',
            field: '__length',
            __setter: null,
            event: true
        },

        /**
         * Является ли массив пустым
         * @type {boolean}
         */
        empty: {
            type: 'boolean',
            field: '__empty',
            __setter: null,
            event: true
        }
    },

    options: {
        /**
         * Оригинальный массив
         * @type {Array}
         */
        original: null
    },

    construct: function(options) {
        this.__original = options.original || [];
        this.__lastLength = this.__original.length;
        this.__version = 0;
        this.__length = this.__original.length;
        this.__empty = !this.__length;

        croc.data.ObservableArray.superclass.__construct__.apply(this, arguments);
    },

    members: {
        /**
         * Добавление всех элементов из переданного массива в конец текущего
         * @param {Array|croc.data.ObservableArray} items
         */
        append: function(items) {
            if (items instanceof croc.data.ObservableArray) {
                items = items.getArray();
            }
            if (!Array.isArray(items)) {
                throw new TypeError('items должен быть массивом!');
            }
            if (items.length === 0) {
                return;
            }
            var arrayLength = this.__original.length;
            this.__original.splice.apply(this.__original, [this.__original.length, 0].concat(items));
            this.__change(arrayLength, [], items);
        },

        /**
         * Возвращает копию исходного массива
         * @return {Array}
         */
        cloneRawArray: function() {
            return this.__original.concat();
        },

        /**
         * Алиас для getArray().forEach(iterator, context)
         * @param {function(*, number)} iterator
         * @param [context=null]
         */
        forEach: function(iterator, context) {
            $.each(this.__original, function(i, item) {
                iterator.call(context || window, item, i);
            });
        },

        /**
         * Возвращает исходный массив
         * @return {Array}
         */
        getArray: function() {
            return this.__original;
        },

        /**
         * Алиас для getArray()[index]
         * @param {Number} index
         * @return {*}
         */
        getItem: function(index) {
            return this.__original[index];
        },

        /**
         * Алиас для getArray().length
         * @return {Number}
         */
        getLength: function() {
            return this.__original.length;
        },

        /**
         * Версия массива (количество изменений с момента создания)
         * @returns {number}
         */
        getVersion: function() {
            return this.__version;
        },

        /**
         * Алиас для getArray().indexOf(searchElement, fromIndex)
         * @param searchElement
         * @param [fromIndex=0]
         * @return {Number}
         */
        indexOf: function(searchElement, fromIndex) {
            return $.inArray(searchElement, this.__original, fromIndex);
        },

        /**
         * Вставка элемента object в позицию index
         * @param {Number} index
         * @param object
         */
        insert: function(index, object) {
            if (index < 0 || index > this.__original.length) {
                throw new RangeError('Выход за границы массива при вставке');
            }
            this.__original.splice(index, 0, object);
            this.__change(index, [], [object]);
        },

        /**
         * Отслеживать изменения массива (если в массиве есть элементы, то сразу же запускает callback)
         * @param {function(number, Array, Array)} callback
         * @param {Object} [context]
         * @param {boolean} [updateItem=false]
         * @returns {Function}
         */
        listenChanges: function(callback, context, updateItem) {
            var changeListener = this.on('change', callback, context);
            var updateListener = updateItem ? this.on('updateItem', callback, context) : _.noop;
            callback.call(context || window, 0, [], this.getArray());

            return function() {
                changeListener();
                updateListener();
            };
        },

        /**
         * Вставка элемента в конец массива
         * @param object
         */
        push: function(object) {
            this.__original.push(object);
            this.__change(this.__original.length - 1, [], [object]);
        },

        /**
         * Уведомить об изменении элемента массива
         * @param item
         */
        onUpdateItem: function(item) {
            this.fireEvent('updateItem', item, this.indexOf(item));
        },

        /**
         * Уведомить об изменении элемента массива
         * @param {number} index
         */
        onUpdateItemAt: function(index) {
            this.fireEvent('updateItem', this.getItem(index), index);
        },

        /**
         * Удаление элемента object. Возвращает true если такой элемент был найден и удалён.
         * @param object
         * @return {Boolean}
         */
        remove: function(object) {
            var index = this.indexOf(object);
            if (index !== -1) {
                this.removeAt(index);
                return true;
            }
            return false;
        },

        /**
         * Удаление всех элементов из массива
         */
        removeAll: function() {
            if (this.getLength() > 0) {
                this.splice(0, this.__original.length);
            }
        },

        /**
         * Удаление элемента массива в позиции index
         * @param {Number} index
         */
        removeAt: function(index) {
            if (index === -1) {
                return;
            }

            var object = this.__original[index];
            this.__original.splice(index, 1);
            this.__change(index, [object], []);
        },

        /**
         * Заменить все элементы массива переданными
         * @param {Array} items
         */
        replaceAll: function(items) {
            this.splice.apply(this, [0, this.__original.length].concat(items));
        },

        /**
         * Удалить removeCount элементов массива начиная с index и вставить вместо них items. Возвращает массив удалённых
         * элементов.
         * @param {Number} index
         * @param {Number} removeCount
         * @param {Array} items
         * @return {Array}
         */
        replaceRange: function(index, removeCount, items) {
            return this.splice.apply(this, [index, removeCount].concat(items));
        },

        /**
         * Удалить первый элемент массива и вернуть его
         * @return {*}
         */
        shift: function() {
            var result = this.__original.shift();
            this.__change(0, [result], []);
            return result;
        },

        /**
         * Сортировка
         * @param {function(*, *): number} compare
         */
        sort: function(compare) {
            if (this.getLength() > 0) {
                var sorted = this.cloneRawArray().sort(compare);
                if (!croc.utils.arrEqual(sorted, this.getArray())) {
                    this.replaceAll(sorted);
                }
            }
        },

        /**
         * Удалить removeCount элементов массива начиная с index и вставить вместо них varargs. Возвращает массив удалённых
         * элементов.
         * @param {Number} index
         * @param {Number} removeCount
         * @param {...*} varargs
         * @return {Array}
         */
        splice: function(index, removeCount, varargs) {
            var removed = this.__original.splice.apply(this.__original, arguments);
            this.__change(index, removed, Array.prototype.slice.call(arguments, 2));
            return removed;
        },

        /**
         * Если item присутствует в коллекции, то удаляет его и возвращает false, иначе добавляет и возвращает true.
         * @param item
         * @param {boolean} [value]
         * @returns {boolean}
         */
        toggleItem: function(item, value) {
            if (value !== undefined) {
                if (value && this.indexOf(item) === -1) {
                    this.push(item);
                    return true;
                }
                else {
                    return !this.remove(item);
                }
            }

            if (!this.remove(item)) {
                this.push(item);
                return true;
            }
            return false;
        },

        /**
         * Вставить переданные элементы в начало массива
         * @param {...*} varargs
         */
        unshift: function(varargs) {
            this.__original.unshift.apply(this.__original, arguments);
            this.__change(0, [], _.toArray(arguments));
        },

        /**
         * @param index
         * @param remove
         * @param insert
         * @private
         */
        __change: function(index, remove, insert) {
            if (remove.length === 0 && insert.length === 0) {
                return;
            }
            ++this.__version;
            this.__checkLength();
            this.fireEvent('change', index, remove, insert);
        },

        /**
         * @private
         */
        __checkLength: function() {
            this.__setLength(this.__original.length);
            this.__setEmpty(!this.__original.length);
        }
    }
});
},{}],17:[function(require,module,exports){
croc.ns('croc.data');

/**
 * Модель выделенных в списке элементов
 */
croc.Class.define('croc.data.SelectionModel', {
    extend: croc.data.ObservableArray,

    options: {
        /**
         * @type {croc.data.IObservableList}
         */
        list: {
            required: true
        }
    },

    construct: function(options) {
        croc.data.SelectionModel.superclass.__construct__.apply(this, arguments);

        /**
         * @type {croc.data.IObservableList}
         * @private
         */
        this.__list = options.list;

        this.__list.on('change', function(index, remove, insert) {
            remove.forEach(function(item) {
                if (this.indexOf(item) !== -1 && insert.indexOf(item) === -1) {
                    this.remove(item);
                }
            }, this);
        }, this);
    },

    members: {
        /**
         * Возвращает первый выделенный элемент
         * @returns {Object}
         */
        getFirstItem: function() {
            return this.getItem(0);
        },

        /**
         * Возвращает индекс первого выделенного элемента
         * @returns {number}
         */
        getFirstItemIndex: function() {
            return this.getLength() > 0 ? this.__list.indexOf(this.getFirstItem()) : -1;
        },

        /**
         * Назначить единственный выделенный элемент
         * @param item
         */
        setSingleItem: function(item) {
            if (!item) {
                this.removeAll();
            }
            else {
                this.replaceAll([item]);
            }
        },

        /**
         * Назначить единственным выделенным элементом элемент с переданным индексом (можно передавать -1)
         * @param {number} index
         */
        setSingleItemIndex: function(index) {
            if (index === -1) {
                this.removeAll();
            }
            else {
                this.replaceAll([this.__list.getItem(index)]);
            }
        }
    }
});

},{}],18:[function(require,module,exports){
(function (global){
//+ignore croc

if (typeof global === 'undefined') {
    window.global = window;
}
global.jQuery = global.$ = require("./../../../bower_components/jquery/dist/jquery.js");
global._ = require('lodash');
if (typeof window === 'undefined') {
    global.window = global;
}
if (typeof croc === 'undefined') {
    global.croc = {
        isServer: false,
        isClient: true
    };
}
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./../../../bower_components/jquery/dist/jquery.js":2,"lodash":4}],19:[function(require,module,exports){
/**
 * Сервис для загрузки ресурсов (например, скриптов)
 */
croc.Class.define('croc.services.Resources', {
    extend: croc.Object,

    statics: {
        /**
         * @static
         */
        LOAD_TIMEOUT: 10000,

        /**
         * todo struct вынести отдельно
         * @static
         */
        scripts: {
            addthis: {
                url: '//s7.addthis.com/js/250/addthis_widget.js#pubid=ra-4ecf799e475ebeb7',
                check: 'addthis',
                postRequest: function() {
                    window.addthis_share = {
                        url: 'http://www.sotmarket.ru/',
                        title: 'Сотмаркет - интернет-магазин мобильной техники и аксессуаров',
                        description: 'Любая мобильная электроника и аксессуары в интернет-магазине Сотмаркет. ' +
                        'Доставка в любой регион, гарантия. Тел.: +7 (495) 780-98-98',
                        templates: {
                            twitter: 'Сотмаркет - интернет-магазин мобильной техники и аксессуаров {{url}}'
                        }
                    };

                    addthis.init();
                }
            },

            facebook: {
                url: '//connect.facebook.net/en_US/all.js#xfbml=1&appId={id}',
                urlData: function() {
                    return {
                        id: Stm.env.apiKeys.likeButton.fb
                    };
                },
                awaitLoading: false,
                preRequest: function() {
                    if (!$('#fb-root').length) {
                        $('<div id="fb-root"></div>').appendTo('body');
                    }
                },
                postRequest: function() {
                    var deferred = $.Deferred();
                    var init = function() {
                        if (window.FB) {
                            deferred.resolve();
                        }
                        else {
                            deferred.reject();
                        }
                    };

                    if (typeof FB !== 'undefined') {
                        deferred.resolve();
                    }
                    else if (window.fbAsyncInit) {
                        var oldInit = window.fbAsyncInit;
                        window.fbAsyncInit = function() {
                            oldInit();
                            init();
                        };
                    }
                    else {
                        window.fbAsyncInit = init;
                    }

                    return deferred;
                }
            },

            gmaps: {
                check: 'google.maps',
                request: function(instance) {
                    var deferred = $.Deferred();
                    window.StmGmapsInitialize = function() {
                        window.StmGmapsInitialize = undefined;
                        deferred.resolve();
                    };

                    instance.loadScript('_gmaps').fail(function() {
                        deferred.reject();
                    });

                    return deferred;
                }
            },

            gplus: {
                url: 'https://apis.google.com/js/plusone.js',
                check: 'gapi.plusone.render'
            },

            odnoklassniki: {
                url: 'http://connect.ok.ru/connect.js',
                check: 'OK.CONNECT'
            },

            twitter: {
                url: '//platform.twitter.com/widgets.js',
                check: 'twttr.widgets'
            },

            vk: {
                url: '//vk.com/js/api/openapi.js?98',
                check: 'VK',
                postRequest: function() {
                    VK.init({
                        apiId: Stm.env.apiKeys.likeButton.vk,
                        onlyWidgets: true
                    });
                }
            },

            ymaps: {
                url: '//api-maps.yandex.ru/2.0/?load=package.full&lang=ru-RU&ns=ymaps',
                check: 'ymaps',
                postRequest: function() {
                    var deferred = $.Deferred();
                    if (!ymaps.ready) {
                        deferred.reject();
                    }
                    else {
                        ymaps.ready(function() {
                            deferred.resolve();
                        });
                    }

                    return deferred;
                }
            },

            _gmaps: {
                url: '//maps.googleapis.com/maps/api/js?v=3.exp&sensor=false&language=ru&libraries=places&callback=StmGmapsInitialize'
            }
        }
    },

    construct: function() {
        this.__scriptsDeferreds = {};
        this.__tplDeferreds = {};
        croc.services.Resources.superclass.__construct__.apply(this, arguments);
    },

    members: {
        /**
         * Загрузить ресурс
         * @param {string} name
         * @returns {$.Deferred}
         */
        loadScript: function(name) {
            if (this.__scriptsDeferreds[name]) {
                return this.__scriptsDeferreds[name];
            }

            var deferred;
            var config = croc.services.Resources.scripts[name];

            if (!config) {
                throw new Error('Запрошен неверный ресурс: ' + name);
            }

            //prerequest
            if (config.preRequest) {
                config.preRequest();
            }

            //request
            var requestDeferred;
            if (config.request) {
                requestDeferred = deferred = config.request(this, config) || $.Deferred().resolve();
            }
            else {
                requestDeferred = deferred =
                    this.__loadScript(config.urlData ? config.url.render(config.urlData(config)) : config.url);
                if (config.awaitLoading === false) {
                    deferred = $.Deferred().resolve();
                }
            }

            //check
            if (config.check) {
                deferred = deferred.then(function() {
                    return croc.utils.objAccess(config.check) ? $.Deferred().resolve() : $.Deferred().reject();
                }, croc.utils.defRejectCallback);
            }

            //post request
            if (config.postRequest) {
                deferred = deferred.then(function() {
                    return config.postRequest(this);
                }.bind(this), croc.utils.defRejectCallback);
            }

            this.__scriptsDeferreds[name] = deferred;
            deferred.fail(function() {
                delete this.__scriptsDeferreds[name];
            }.bind(this));

            var rejectTimeout = this._getDisposer().setTimeout(function() {
                if (requestDeferred.state() === 'pending') {
                    if (requestDeferred.abort) {
                        requestDeferred.abort();
                    }
                    else {
                        requestDeferred.reject();
                    }
                }
                else if (deferred.reject) {
                    deferred.reject();
                }
                else if (deferred.abort) {
                    deferred.abort();
                }
            }, croc.services.Resources.LOAD_TIMEOUT);
            deferred.always(function() {
                rejectTimeout.remove();
            });

            return deferred;
        },

        /**
         * Загрузить шаблон из d/tpl
         * @returns {$.Deferred}
         */
        loadTemplate: function(name) {
            var ext = name.substr(name.length - 4);
            if (ext !== '.tpl' && ext !== '.php') {
                name += '.tpl';
            }

            if (this.__tplDeferreds[name]) {
                return this.__tplDeferreds[name];
            }

            var debugKey = Stm.env.IS_PROTOTYPE ? '&debug_tpl=1' : '';
            //noinspection UnnecessaryLocalVariableJS
            var deferred = this.__tplDeferreds[name] = this._getDisposer().ajax({
                //TODO: доработать анализатор, чтобы d/tpl был настраеваемым для подпроектов
                url: (Stm.env.project.tplPath || Stm.env.project.path) + 'd/tpl/' + name + '?' + new Date().getTime() + debugKey,
                type: 'get',
                dataType: 'html'
            });

            return deferred;
        },

        /**
         * @param {string} url
         * @returns {$.Deferred}
         * @private
         */
        __loadScript: function(url) {
            var deferred = $.Deferred();
            var script = document.createElement('script');
            script.src = url;
            script.async = true;
            if (croc.util.Browser.isIE('<10')) {
                script.defer = true;
            }
            document.body.appendChild(script);

            script.onload = function() {
                if (!script.executed) { // выполнится только один раз
                    script.executed = true;
                    deferred.resolve();
                }
            };

            script.onerror = function() {
                deferred.reject();
            };

            script.onreadystatechange = function() {
                if (script.readyState === "complete" || script.readyState === "loaded") {
                    setTimeout(script.onload, 0);
                }
            };

            deferred.abort = function() {
                $(script).remove();
                deferred.reject();
            };

            return deferred;
        }
    }
});

},{}],20:[function(require,module,exports){
/**
 * Виджет, который может быть контейнером для дочерних виджетов
 * meta-данные дочерних виджетов:
 * noWrap: не оборачивать разметку виджета
 */
croc.Class.define('croc.ui.Container', {
    extend: croc.ui.Widget,

    events: {
        /**
         * добавление нового элемента, подписавшись на это событие
         * можно изменить meta-данные виджета
         * @param {croc.ui.Widget} item
         * @param {Object} meta
         */
        beforeAddItem: null,

        /**
         * Новый дочерний элемент был добавлен
         * @param {croc.ui.Widget} item
         */
        itemAdded: null,

        /**
         * @param {croc.ui.Widget} item
         */
        removeItem: null
    },

    options: {
        /**
         * Автоматически сканировать DOM на предмет дочерних виджетов
         * @type {boolean}
         */
        autoScan: {
            type: 'boolean'
        },

        /**
         * алиас к itemsDefaults[defSection], где defSection - секция по-умолчанию
         * @type {Object}
         */
        dItemDefaults: {
            extend: true
        },

        /**
         * Конфигурация по-умолчанию добавляемая к items
         * @type {Object.<string, object>|object}
         */
        itemDefaults: {
            value: {},
            deepExtend: true
        },

        /**
         * Список дочерних виджетов (или их описаний)
         * @type {object|croc.ui.Widget|Array.<object|croc.ui.Widget>|Object.<string, object|croc.ui.Widget|Array.<object|croc.ui.Widget>>}
         */
        items: null,

        /**
         * Если true то полагается на идентификаторы дочерних виджетов, а не на порядок их следования в секции
         * при связывании дочерних виджетов с найденными элементами
         * @type {boolean}
         * @protected
         */
        _useChildrenIdentifiers: true,

        /**
         * Если контейнер является враппером над одним виджетом без внешнего html. Если передано true,
         * то считается что оборачивается секция по умолчанию, иначе должна быть передана оборачиваемая
         * секция.
         * @type {string|boolean}
         */
        _wrapSection: {}
    },

    construct: function(options) {
        this.__items = {};
        this.__itemsControllers = {};
        this.__itemsHash = {};
        this.__independentItems = {};
        this.__useChildrenIdentifiers = options._useChildrenIdentifiers;
        this.__wrapSection = options._wrapSection === true ? this.getDefaultItemsSection() : options._wrapSection;

        if (!options.items) {
            options.items = {};
        }

        croc.ui.Container.superclass.__construct__.apply(this, arguments);
    },

    destruct: function() {
        _.forOwn(this.__items, function(items) {
            items.forEach(function(x) { x.dispose(); });
        });
        _.forOwn(this.__itemsControllers, function(controller) {
            controller.dispose();
        });
    },

    members: {
        /**
         * Добавить новый дочерний виджет
         * @param {string|croc.ui.Widget|object|jQuery|Array.<croc.ui.Widget|object|jQuery>} [section=null] опустить для секции по-умолчанию
         * @param {croc.ui.Widget|object|jQuery|Array.<croc.ui.Widget|object|jQuery>} [items]
         * @param {croc.ui.Widget} [beforeItem=undefined] вставить элемент до переданного
         * @return {Array.<croc.ui.Widget>}
         */
        add: function(section, items, beforeItem) {

            if (typeof section !== 'string') {
                beforeItem = items;
                items = section;
                section = this.getDefaultItemsSection();
            }

            if (typeof beforeItem === 'number') {
                beforeItem = this.getItems(section)[beforeItem];
            }

            if (!Array.isArray(items)) {
                items = [items];
            }

            items = items.map(function(item) {
                //если виджет передан как плоский объект либо элемент
                if (!(item instanceof croc.ui.Widget)) {
                    if (item instanceof jQuery) {
                        item = {el: item};
                    }
                    if (!item.xtype && item.el) {
                        item = _.assign({}, item);
                        var addConf = this._getConfByElement(section, item.el);
                        if (addConf && !(addConf instanceof croc.ui.Widget)) {
                            _.assign(item, addConf);
                        }
                    }
                    item = this.__getItemConf(section, item, item.el);
                    var type = croc.ui.WidgetsManager.getInstance().getWidgetType(item.xtype);
                    return new type(item);
                }
                else {
                    item._setParentWidgetAndSection(this, section);
                    return item;
                }
            }, this);

            var itemsArray = this.__items[section] || (this.__items[section] = []);
            itemsArray.splice.apply(itemsArray,
                [beforeItem ? itemsArray.indexOf(beforeItem) : itemsArray.length, 0].concat(items));

            var addItemsHtml = function(items) {
                var childClass = this.__getChildClass(section);
                var itemsHtmlDeferreds = items.map(function(item) {
                    item._childClass = childClass;
                    return $.when(item.createHtml()).then(function(html) {
                        var wrapperTpl = this.__getItemWrapperTemplate(section, item);
                        if (wrapperTpl !== '{item}') {
                            item._hasWrapper = true;
                            return wrapperTpl.render({item: html});
                        }
                        return html;
                    }.bind(this));
                }, this);

                $.when.apply($, itemsHtmlDeferreds).done(function() {
                    var elements = $(Array.prototype.join.call(arguments, '').trim());

                    var itemsElements = elements.find('.' + childClass).add(elements.filter('.' + childClass));

                    var wrappedEls = [];
                    itemsElements.each(function(i, el) {
                        items[i]._transformElement($(el));
                    }.bind(this));
                    this._insertItems(section, elements, beforeItem && beforeItem.getElement(), items);
                    items.forEach(function(item, index) {
                        item._setElement(itemsElements.eq(index));
                        item._baseInit();
                        this.__completeAddItem(item);
                    }, this);
                }.bind(this));
            }.bind(this);

            //отфильтровываем элементы, разметку, которых не нужно генерировать
            var itemsToInsert = items.filter(function(item) {
                //если элемент уже передан
                if (item.getElement()) {
                    //помечаем его независимым (контейнер не отвечает за его удаление)
                    this.__independentItems[croc.utils.objUniqueId(item)] = true;
                    this.__completeAddItem(item);
                    return false;
                }
                //фаза рендеринга ужа начата
                else if (item.isHtmlGenerated()) {
                    item.once('changeRendered', function() {
                        //помечаем его независимым (контейнер не отвечает за его удаление)
                        this.__independentItems[croc.utils.objUniqueId(item)] = true;
                        this.__completeAddItem(item);
                    }, this);
                    return false;
                }
                return true;
            }, this);

            //поэлементная вставка
            if (this.getElement() && itemsToInsert.length) {
                addItemsHtml(itemsToInsert);
            }

            return items;
        },

        /**
         * Создаёт html-разметку компонента
         * @return {$.Deferred}
         */
        createHtml: function() {
            return croc.ui.Container.superclass.createHtml.call(this, function(widgetHtml) {
                var options = this._options;
                var htmlDeferreds = [];
                var delimiter = '{item}';
                
                var addWrappedCls = '';
                if (this.__wrapSection && widgetHtml) {
                    addWrappedCls = widgetHtml;
                    widgetHtml = '{items:' + this.getDefaultItemsSection() + '}';
                }

                var oldItems = options.items;
                options.items = {};
                _.forOwn(oldItems, function(items, section) {
                    options.items[section] = items && items.concat();
                    this.__items[section] = [];
                }, this);

                //в опциях может приходить как виджет, так и его описание
                //добавляет разметку виджета в htmlDeferreds, сам виджет в sectionWidgets и возвращает
                //враппер виджета
                var processWidget = function(sectionWidgets, section, item) {
                    if (item instanceof croc.ui.Widget) {
                        item._setParentWidgetAndSection(this, section);
                    }
                    else {
                        item = this.__getItemConf(section, item);
                        var type = croc.ui.WidgetsManager.getInstance().getWidgetType(item.xtype);
                        //noinspection JSValidateTypes
                        item = new type(item);
                    }

                    item._childClass = this.__getChildClass(section, item.getIdentifier());
                    if (section === this.__wrapSection) {
                        item._wrapped = true;
                        item._addClasses = addWrappedCls;
                    }

                    sectionWidgets.push(item);
                    htmlDeferreds.push(item.createHtml());
                    var wrapper = this.__getItemWrapperTemplate(section, item);
                    if (wrapper !== '{item}') {
                        item._hasWrapper = true;
                    }
                    return wrapper;
                }.bind(this);

                //ищем в разметке {items:секция:идентификатор}, возвращаем на их место {item}, чтобы потом заменить
                //на реальную разметку виджетов (их deferred складываются в htmlDeferreds
                widgetHtml = widgetHtml.replace(/\{items(?::([^\{}"':]+)?)?(?::([^\{}"':]+))?}/g,
                    function(match, section, identifier) {
                        if (!section) {
                            section = this.getDefaultItemsSection();
                        }
                        var sectionItems = options.items[section];
                        var sectionWidgets = this.__items[section];
                        if (!sectionWidgets) {
                            sectionWidgets = this.__items[section] = [];
                        }

                        var controller = this.__itemsControllers[section];
                        if (controller) {
                            if (controller.isOptimized()) {
                                htmlDeferreds.push(
                                    controller.generateHtml(null, this.__getItemWrapperTemplate.bind(this)));
                                return delimiter;
                            }
                            else {
                                sectionItems = controller.generateWidgets();
                            }
                        }

                        if (!sectionItems) {
                            return '';
                        }

                        //если в шаблоне был указан идентификатор, то берём только соответствующий виджет
                        if (identifier) {
                            var item = this.__getWidgetByIdentifier(sectionItems, identifier, true);
                            if (!item) {
                                throw new Error('Не найден виджет с id ' + identifier);
                            }

                            return processWidget(sectionWidgets, section, item);
                        }

                        //компонуем всю секцию виджетов
                        var result = sectionItems.map(function(item) {
                            return processWidget(sectionWidgets, section, item);
                        }, this).join('');

                        options.items[section] = [];
                        return result;

                    }.bind(this));

                return htmlDeferreds.length === 0 ? widgetHtml :
                    //ждём готовности шаблонов для каждого дочернего виджета
                    $.when.apply($, htmlDeferreds).then(function() {
                        var itemsHtml = arguments;
                        var resultHtml = [];

                        //подставляем вместо разделителей шаблоны дочерних виджетов 
                        widgetHtml.split(delimiter).forEach(function(html, index) {
                            resultHtml.push(html);
                            if (itemsHtml[index]) {
                                resultHtml.push(itemsHtml[index]);
                            }
                        });

                        return resultHtml.join('');
                    });
            }.bind(this));
        },

        /**
         * Получить все дочерние виджеты в виде хэша
         * @returns {Object.<string, croc.ui.Widget>}
         */
        getAllItems: function() {
            return this.__items || {};
        },

        /**
         * Секция дочерних элементов по-умолчанию
         * @return {String}
         * @protected
         */
        getDefaultItemsSection: function() {
            return 'items';
        },

        /**
         * Получить дочерний виджет по его идентификатору
         * @param {string} identifier
         * @returns {croc.ui.Widget}
         */
        getItem: function(identifier) {
            return this.__itemsHash[identifier];
        },

        /**
         * Возвращает индекс дочернего виджета
         * @param {croc.ui.Widget} widget
         * @returns {*}
         */
        getItemIndex: function(widget) {
            return this.__items[widget.getParentSection()].indexOf(widget);
        },

        /**
         * Получить все дочерние виджеты
         * @param {string} [section=null]
         * @returns {Array.<croc.ui.Widget>}
         */
        getItems: function(section) {
            return (this.__items && this.__items[section || this.getDefaultItemsSection()]) || [];
        },

        /**
         * Получить элементы дочерних виджетов, как jQuery-коллекцию
         * @param {string} [section=null]
         * @returns {jQuery}
         */
        getItemsElements: function(section) {
            return $(this.getItems(section).map(function(x) { return x.getElement()[0]; }));
        },

        /**
         * Уведомить виджет о том, что размеры рамок изменились
         * @param {string} [reason]
         */
        onResize: function(reason) {
            _.forOwn(this.__items, function(items, section) {
                items.forEach(function(item) {
                    if (item.getElement()) {
                        item.onResize('parentResize');
                    }
                });
            });

            croc.ui.Container.superclass.onResize.apply(this, arguments);
        },

        /**
         * Удалить дочерний виджет
         * @param {croc.ui.Widget|string} item
         * @param {boolean} [removeElement=true]
         */
        removeItem: function(item, removeElement) {
            if (typeof item === 'string') {
                item = this.getItem(item);
            }

            croc.utils.arrRemove(this.__items[item.getParentSection()], item);

            item.dispose();

            var itemId = croc.utils.objUniqueId(item);
            if (this.__independentItems[itemId]) {
                delete this.__independentItems[itemId];
            }
            else if (item.getElement() && (removeElement === undefined || removeElement)) {
                this._removeItemElement(item);
            }

            this._onRemoveItem(item);

            item._setParentWidgetAndSection(null, null);

            this.fireEvent('removeItem', item);
        },

        /**
         * Вызывать в onPropertiesInitialized!
         * @param {string|croc.data.IObservableList} [section]
         * @param {croc.data.IObservableList|Object} [model]
         * @param {Object} [options]
         * @returns {croc.ui.ContainerItemsController}
         */
        setItemsController: function(section, model, options) {
            if (!options) {
                options = model;
                model = section;
                section = this.getDefaultItemsSection();
            }

            var controller = new croc.ui.ContainerItemsController(_.assign({
                container: this,
                model: model
            }, options));

            this.__itemsControllers[section] = controller;

            return controller;
        },

        /**
         * Применить изменение состояния видимости виджета
         * @param {boolean} value
         * @private
         */
        _applyShown: function(value) {
            croc.ui.Container.superclass._applyShown.apply(this, arguments);
            if (value && this.getElement()) {
                var iterateChildren = function(container) {
                    _.forOwn(container.getAllItems(), function(items) {
                        items.forEach(function(item) {
                            if (item.getElement() && item.hasListeners('appear') && item.getElement().is(':visible')) {
                                item.fireEvent('appear');
                            }
                            if (item instanceof croc.ui.Container) {
                                iterateChildren(item);
                            }
                        });
                    });
                };
                iterateChildren(this);
            }
        },

        /**
         * Возвращает конфигурация виджета по его элементу. Конфигурация как минимум должна содержать xtype.
         * @param {string} section
         * @param {jQuery} element
         * @return {object}
         * @protected
         */
        _getConfByElement: function(section, element) {
            return this.__itemsControllers[section] ?
                this.__itemsControllers[section].generateWidgetByElement(element) : {};
        },

        /**
         * Шаблон для обрамления дочернего элемента. Должен присутствовать маркер {item}. На обрамляющем элементе
         * должен быть класс js-wrapper.
         * @param {string} section
         * @param {croc.ui.Widget} item дочерний виджет
         * @returns {string}
         * @protected
         */
        _getItemWrapperTemplate: function(section, item) { return '{item}'; },

        /**
         * Шаблон для элемента
         * @param {Object} options
         * @return {$.Deferred|string}
         * @protected
         */
        _getTemplate: function(options) {
            return this.__wrapSection ? '{cls}' : croc.ui.Container.superclass._getTemplate.apply(this, arguments);
        },

        /**
         * Инициализация виджета после его отрисовки в DOM
         * @return {$.Deferred|undefined}
         * @protected
         */
        _initWidget: function() {
            //инициализируем уже сконструированные дочерние виджеты их элементами
            if (this.isHtmlGenerated()) {
                _.forOwn(this.__items, function(widgets) {
                    widgets.forEach(function(item) {
                        item._setElement(this.__itemsElements[croc.utils.objUniqueId(item)]);
                        item._baseInit();
                        this.__completeAddItem(item);
                    }.bind(this));
                }, this);

                delete this.__itemsElements;

                //если у элемента есть parent id, то запускаем сканирование на дочерние виджеты в разметке
                if (this.getHostId()) {
                    this._rescanItems(true);
                }
            }
            else {
                _.forOwn(this._options.items, function(items, section) {
                    this.__items[section] = [];
                }, this);
                this._rescanItems(true);
            }

            _.forOwn(this.__itemsControllers, function(controller) {
                controller.onInitWidget();
            });
        },

        /**
         * Вставить дочерние элементы в определённую секцию
         * @param {string} section
         * @param {jQuery} elements
         * @param {jQuery} beforeElement
         * @param {Array.<croc.ui.Widget>} widgets
         * @protected
         */
        _insertItems: function(section, elements, beforeElement, widgets) {
            if (this.__itemsControllers[section]) {
                this.__itemsControllers[section].insertItem(elements, beforeElement);
            }
            else if (beforeElement) {
                beforeElement.before(elements);
            }
            else {
                this.getElement().append(elements);
            }
        },

        /**
         * Метод вызывается при добавлении нового дочернего элемента
         * @param {string} section
         * @param {croc.ui.Widget} item
         * @protected
         */
        _onAddItem: function(section, item) {},

        /**
         * Выполняется когда свойства виджета уже инициализированы
         * @param {Object} options
         * @protected
         */
        _onPropertiesInitialized: function(options) {
            croc.ui.Container.superclass._onPropertiesInitialized.apply(this, arguments);

            var defSection = this.getDefaultItemsSection();

            //defaults
            if (options.dItemDefaults) {
                if (!options.hasOwnProperty('itemDefaults')) {
                    options.itemDefaults = _.cloneDeep(options.itemDefaults);
                }
                options.itemDefaults[defSection] = options.itemDefaults[defSection] ?
                    _.assign({}, options.itemDefaults[defSection], options.dItemDefaults) :
                    options.dItemDefaults;
            }

            //items
            if (!options.items) {
                options.items = {};
            }

            if (Array.isArray(options.items) || options.items instanceof croc.ui.Widget) {
                var items = options.items;
                options.items = {};
                options.items[defSection] = items;
            }

            if (!options.items[defSection]) {
                options.items[defSection] = [];
            }

            _.forOwn(options.itemDefaults, function(items, section) {
                if (!options.items[section]) {
                    options.items[section] = [];
                }
            }, this);
        },

        /**
         * Метод вызывается при удалении дочернего виджета
         * @param {croc.ui.Widget} item
         * @protected
         */
        _onRemoveItem: function(item) {},

        /**
         * Удалить дочерний элемент
         * @param {croc.ui.Widget} item
         * @protected
         */
        _removeItemElement: function(item) {
            item.getWrapperElement().remove();
        },

        /**
         * Просканировать контейнер на новые дочерние элементы
         * @param {boolean} [getConfFromItems=false] internal!
         * @param {boolean} [autoOnly=false] internal!
         * @protected
         */
        _rescanItems: function(getConfFromItems, autoOnly) {
            var itemsElements = !autoOnly && this._scanForItemsElements(this.getElement(), this._options);
            var hostId = this.getHostId();

            //пытаемся автоматически подхватить детей (класс js-{hostId}-child с необязательным атрибутом data-section)
            if ((!itemsElements || this._options.autoScan) && hostId) {
                itemsElements = itemsElements || {};
                this.getElement().find('.js-' + hostId + '-child').each(function(i, el) {
                    el = $(el);
                    var section = el.data('section') || this.getDefaultItemsSection();
                    if (!itemsElements[section]) {
                        itemsElements[section] = el;
                    }
                    else {
                        itemsElements[section] = itemsElements[section].add(el);
                    }
                }.bind(this));
            }

            if (itemsElements) {
                _.forOwn(itemsElements, function(elements, section) {
                    var sectionWrapped = this.__wrapSection === section;

                    //если нужно автоматом подхватить детей
                    if (elements === 'auto' && hostId) {
                        var selector = '.js-' + hostId + '-child[data-section=' + section + ']';
                        if (section === this.getDefaultItemsSection()) {
                            selector += ',.js-' + hostId + '-child:not([data-section])';
                        }
                        elements = $(selector);
                    }

                    var resultItems = this.__items[section] || (this.__items[section] = []);
                    var sectionItems = this._options.items[section] || [];
                    var processElement = function(el, i, identifier) {
                        el = $(el);
                        var widget;

                        if (el.hasClass('js-generate')) {
                            widget = croc.ui.Widget.generateWidget(el, this._options.configure);
                            resultItems.push(widget);
                            widget._setParentWidgetAndSection(this, section);
                            this.__completeAddItem(widget);
                            return;
                        }

                        if (!sectionWrapped) {
                            widget = croc.ui.Widget.getByElement(el);
                            if (widget) {
                                if (widget.getParentWidget() !== this) {
                                    resultItems.push(widget);
                                    widget._setParentWidgetAndSection(this, section);
                                    this.__completeAddItem(widget);
                                }
                                return;
                            }
                        }

                        var conf = this._getConfByElement(section, el);
                        if (!(conf instanceof croc.ui.Widget)) {
                            if (identifier) {
                                conf.identifier = identifier.toString();
                            }
                            else if (!sectionWrapped) {
                                identifier = el.data('confIdentifier') || (el.data('conf') && el.data('conf').identifier);

                                if (identifier) {
                                    conf.identifier = identifier.toString();
                                }
                            }

                            // пытаемся взять конфигурацию для виджета из this._options.items, полагаясь либо на положение элемента
                            // в секции либо на совпадение идентификаторов
                            if (getConfFromItems && sectionItems && sectionItems.length) {
                                var gotById = false;
                                if (this.__useChildrenIdentifiers && conf.identifier && sectionItems.length > 1) {
                                    gotById = this.__getWidgetByIdentifier(sectionItems, conf.identifier, true);
                                }

                                if (gotById) {
                                    conf = gotById;
                                }
                                else {
                                    var sectionItem = sectionItems[0];
                                    var sectionItemIdentifier = sectionItem instanceof croc.ui.Widget ?
                                        sectionItem.getIdentifier() : sectionItem.identifier;
                                    if (!sectionItemIdentifier || !identifier || sectionItemIdentifier === identifier) {
                                        conf = sectionItem;
                                        sectionItems.shift();
                                    }
                                }
                            }
                        }

                        var generateEl = el.data('generate');
                        if (conf && conf instanceof croc.ui.Widget) {
                            widget = conf;
                            if (sectionWrapped) {
                                widget._wrapped = true;
                            }
                            if (!generateEl) {
                                widget._setElement(el);
                                widget._setParentWidgetAndSection(this, section);
                                if (!widget.getRendered()) {
                                    widget._baseInit();
                                }
                            }
                        }
                        else {
                            conf = this.__getItemConf(section, conf, el);
                            if (!conf.xtype) {
                                return;
                            }
                            if (generateEl) {
                                delete conf.el;
                            }
                            if (sectionWrapped) {
                                conf._wrapped = true;
                            }
                            var type = croc.ui.WidgetsManager.getInstance().getWidgetType(conf.xtype);
                            widget = new type(conf);
                        }

                        if (widget) {
                            //если нужно сгенерировать новый элемент для виджета
                            if (generateEl) {
                                $.when(widget.createHtml()).done(function(html) {
                                    var newEl = $(html);
                                    el.replaceWith(newEl);
                                    widget._transformElement(newEl);
                                    widget._setElement(newEl);
                                    widget._setParentWidgetAndSection(this, section);
                                    widget._baseInit();
                                    resultItems.push(widget);
                                    this.__completeAddItem(widget);
                                }.bind(this));
                            }
                            else {
                                resultItems.push(widget);
                                this.__completeAddItem(widget);
                            }
                        }
                    }.bind(this);

                    if (elements instanceof jQuery) {
                        elements.each(function(i, el) { processElement(el, i); });
                    }
                    else {
                        var index = 0;
                        _.forOwn(elements, function(el, identifier) {
                            processElement(el, index++, identifier);
                        });
                    }
                }, this);
            }
        },

        /**
         * Поиск элементов DOM для всех дочерних элементов
         * @param {jQuery} el
         * @param {Object} options
         * @return {Object.<string, jQuery>}
         * @protected
         */
        _scanForItemsElements: function(el, options) {
            if (this.__wrapSection) {
                var els = {};
                els[this.getDefaultItemsSection()] = el;
                return els;
            }
            else if (Object.keys(this.__itemsControllers).length) {
                var elements = {};
                _.forOwn(this.__itemsControllers, function(controller, section) {
                    elements[section] = controller.isOptimized() ? $() : controller.findItemsElements(el);
                });
                return elements;
            }
            else {
                return null;
            }
        },

        /**
         * Изменить элемент ещё не вставленный в DOM корневой элемент
         * @param {jQuery} el
         * @protected
         */
        _transformElement: function(el) {
            croc.ui.Container.superclass._transformElement.apply(this, arguments);

            //ищем элементы для уже сконструированных дочерних виджетов
//            var itemsElements = this._scanForItemsElements(el, options);

            this.__itemsElements = {};
            _.forOwn(this.__items, function(widgets, section) {
                //дальше мы будем удалять из этого массива виджеты, чтобы дважды не взять один и тот же
                this.__items[section] = widgets.concat();

                //ищем элементы для дочерних виджетов
                var elements;
                var childClass = this.__getChildClass(section);
//                //если элементы найдены через метод _scanForItemsElements
//                if (itemsElements && itemsElements[section]) {
//                    elements = itemsElements[section];
//                }
//                //ищем элементы по уникальному классу для дочерних виджетов, либо определяем, что элемент дочернего
//                //виджета идентичен элементу контейнера
//                else {
                elements = this.__wrapSection !== section ? el.find('[class*=' + childClass + ']') :
                    section === this.getDefaultItemsSection() ? el : $();
//                }

                var elementIndex = 0;
                var initElement = function(i, el) {
                    el = $(el);
                    var widget = /** @type {croc.ui.Widget} */(widgets[elementIndex++]);

                    var concreteChildClassMatch = el[0].className.match(new RegExp(childClass + '([^ ]*)'));
                    var concreteChildClass = concreteChildClassMatch && concreteChildClassMatch[0];
                    var identifier = concreteChildClassMatch && concreteChildClassMatch[1];
                    if (this.__useChildrenIdentifiers && identifier) {
                        var gotById = this.__getWidgetByIdentifier(widgets, identifier, true);
                        if (gotById) {
                            widget = gotById;
                            --elementIndex;
                        }
                    }

                    widget._transformElement(el);
                    this.__itemsElements[croc.utils.objUniqueId(widget)] = el;

                    if (this.__wrapSection === section && concreteChildClass) {
                        el.removeClass(concreteChildClass);
                    }
                }.bind(this);

                if (elements instanceof jQuery) {
                    elements.each(initElement);
                }
                //при сканировании элементов указаны конкретные identifiers {identifier: jQuery}
                else {
                    var index = 0;
                    _.forOwn(elements, function(el) {
                        initElement(index++, el);
                    });
                }
            }, this);
        },

        /**
         * @param {croc.ui.Widget} item
         * @private
         */
        __completeAddItem: function(item) {
            if (item.getIdentifier()) {
                this.__itemsHash[item.getIdentifier()] = item;
            }
            this.fireEvent('beforeAddItem', item, item.getMeta());
            this._onAddItem(item.getParentSection(), item);
            this.fireEvent('itemAdded', item);
        },

        /**
         * @param {string} section
         * @param {string} [identifier]
         * @private
         */
        __getChildClass: function(section, identifier) {
            return this.__wrapSection ? this._childClass :
                'stm-child-' + croc.utils.objUniqueId(this) + '-' + section + '-' + (identifier || '');
        },

        /**
         * @param {string} section
         * @param {object} item
         * @param {jQuery} [el=undefined]
         * @private
         */
        __getItemConf: function(section, item, el) {
            var conf = {_parentWidget: this, _parentSection: section};
            if (el) {
                conf.el = el;
            }
            if (this.$$compatibilityMode && this.constructor.prototype.itemDefaults &&
                this.constructor.prototype.itemDefaults[section]) {
                _.assign(conf, this.constructor.prototype.itemDefaults[section]);
            }
            if (this._options.itemDefaults[section]) {
                _.assign(conf, this._options.itemDefaults[section]);
            }
            if (item) {
                _.assign(conf, item);
            }

            if (this.__wrapSection !== section && el && el.data('xtype')) {
                conf.xtype = el.data('xtype');
            }

            if (this._options.configure) {
                conf.configure = _.clone(this._options.configure);
            }

            return conf;
        },

        /**
         * @param section
         * @param item
         * @private
         */
        __getItemWrapperTemplate: function(section, item) {
            return item.getMeta && item.getMeta().noWrap ? '{item}' : this._getItemWrapperTemplate(section, item);
        },

        /**
         * @param array
         * @param identifier
         * @param remove
         * @private
         */
        __getWidgetByIdentifier: function(array, identifier, remove) {
            var widget;
            array.some(function(item, i) {
                if ((item instanceof croc.ui.Widget ? item.getIdentifier() : item.identifier) === identifier) {
                    widget = item;
                    if (remove) {
                        array.splice(i, 1);
                    }
                    return true;
                }
            });

            return widget;
        }
    }
});

},{}],21:[function(require,module,exports){
/**
 * Контроллер для связи секции дочерних виджетов контейнера с моделью {@link croc.data.IObservableList}
 */
croc.Class.define('croc.ui.ContainerItemsController', {
    extend: croc.Object,

    statics: {
        /**
         * Функция вставляет новые элементы до элемента с селектором beforeElementSelector
         * Результат передаётся в качестве опции {@link croc.ui.ContainerItemsController.options.insertItemFn}
         * @param {jQuery|croc.ui.Widget} root
         * @param {string|jQuery} beforeElementSelector
         * @returns {Function}
         * @static
         */
        createInsertBeforeFn: function(root, beforeElementSelector) {
            var anchorElement;
            if (typeof beforeElementSelector !== 'string') {
                anchorElement = beforeElementSelector;
            }
            return function(element, beforeElement) {
                if (!anchorElement) {
                    anchorElement = (root instanceof jQuery ? root : root.getElement()).find(beforeElementSelector);
                }
                if (beforeElement) {
                    beforeElement.before(element);
                }
                else {
                    anchorElement.before(element);
                }
            };
        },

        /**
         * Функция вставляет новые элементы последними в контейнер с селектором containerSelector
         * Результат передаётся в качестве опции {@link croc.ui.ContainerItemsController.options.insertItemFn}
         * @param {jQuery|croc.ui.Container} root
         * @param {string|jQuery} containerSelector
         * @returns {Function}
         * @static
         */
        createInsertToContainerFn: function(root, containerSelector) {
            var container;
            if (typeof containerSelector !== 'string') {
                container = containerSelector;
            }
            return function(element, beforeElement) {
                if (!container) {
                    container = (root instanceof jQuery ? root : root.getElement()).find(containerSelector);
                }
                if (beforeElement) {
                    beforeElement.before(element);
                }
                else {
                    container.append(element);
                }
            };
        }
    },

    options: {
        /**
         * Контейнер (виджет)
         * @type {croc.ui.Container}
         */
        container: {
            required: true,
            type: 'croc.ui.Container'
        },

        /**
         * Критерий группировки элементов списка (ключ элемента списка или фукнция)
         * @type {string|function(*):*}
         */
        groupCriteria: null,

        /**
         * Функция либо шаблон для отображения заголовка группы
         * @type {string|function(*):string}
         */
        groupHeaderRenderer: null,

        /**
         * Функция вставки нового элемента
         * @type {function(jQuery, jQuery)}
         */
        insertItemFn: function(element, beforeElement) {
            if (beforeElement) {
                beforeElement.before(element);
            }
            else {
                this.__container.getElement().append(element);
            }
        },

        /**
         * Селектор контейнера для вставки элементов (передаётся вместо insertItemFn)
         * @type {string}
         */
        insertTo: {
            type: 'string'
        },

        /**
         * Функция либо шаблон для отображения элемента
         * @type {string|function(*):string}
         * @required
         */
        itemRenderer: null,

        /**
         * Селектор элементов дочерних виджетов. По-умолчанию insertTo + '>*'
         * @type {string}
         */
        itemsSelector: null,

        /**
         * Массив, элементы которого необходимо отображать
         * @type {croc.data.IObservableList|croc.data.IStreamList|Array}
         */
        model: null,

        /**
         * Вызывается когда виджет был отрисован
         * @type {function(croc.ui.Widget)}
         */
        onItemRendered: {
            type: 'function'
        },

        /**
         * Отключает режим оптимизированного рендеринга. В режиме оптимизированного рендеринга для элементов списка
         * не создаются виджеты, только dom-элементы
         * @type {boolean}
         */
        createWidgets: false,

        /**
         * Перерисовать элемент при изменении его модели
         * @type {boolean}
         */
        rerenderItemOnModelUpdate: true,

        /**
         * Функция восстанавливает элемент массива по DOM-элементу
         * @type {function(jQuery):*}
         */
        restoreItemFn: function(el) { throw 'not implemented!'; },

        /**
         * Секция дочерних виджетов
         * @type {string}
         */
        section: 'items',

        /**
         * Выделенные элементы будут получать указанный класс
         * @type {string}
         */
        selectedItemClass: null,

        /**
         * Функция трансформирующая элемент массива для передачи в {@link #itemRenderer}
         * @type {function(*):*}
         */
        renderDataFn: null
    },

    construct: function(options) {
        this.__container = options.container;
        this.__groupCriteria = options.groupCriteria;
        this.__groupHeaderRenderer = options.groupHeaderRenderer;
        this.__itemRenderer = options.itemRenderer;
        this.__restoreItemFn = options.restoreItemFn;
        this.__onItemRendered = options.onItemRendered;
        this.__section = options.section;
        this.__selectedItemClass = options.selectedItemClass;
        this.__transformItemFn = options.renderDataFn;
        this.__isOptimized = !options.createWidgets;
        this.__rerenderItemOnModelUpdate = options.rerenderItemOnModelUpdate;

        this.__itemsSelector = options.itemsSelector || ((options.insertTo || '') + '>*');

        this.__insertItemFn = options.insertTo ?
            croc.ui.ContainerItemsController.createInsertToContainerFn(this.__container, options.insertTo) :
            options.insertItemFn;

        this.__model = Array.isArray(options.model) ?
            new croc.data.ObservableArray({original: options.model}) :
            options.model;

        croc.ui.ContainerItemsController.superclass.__construct__.apply(this, arguments);

        if (this.__isOptimized && this.__groupCriteria) {
            throw new Error('not implemented!');
        }
        if (!this.__container.getElement() && this.__groupCriteria && this.__model.getArray() > 0) {
            throw new Error('not implemented!');
        }
    },

    members: {
        /**
         * Найти все элементы для дочерних виджетов
         * @param {jQuery} rootEl
         * @returns {jQuery}
         */
        findItemsElements: function(rootEl) {
            return rootEl.find(this.__itemsSelector);
        },

        /**
         * Генерирует html для переданных моделей
         * @param [models]
         * @param {function(string, Object|croc.ui.Widget):string} [wrapperFn]
         * @returns string
         */
        generateHtml: function(models, wrapperFn) {
            return (models || this.__model.getArray())
                .map(function(item) {
                    var html = this.__renderItemHtml(item);
                    if (wrapperFn) {
                        var wrapper = wrapperFn(this.__section, item);
                        if (wrapper !== '{item}') {
                            html = wrapper.render({item: html});
                        }
                    }
                    return html;
                }, this)
                .join('').trim()
                .replace(/\{cls\}/g, '');
        },

        /**
         * Сгенерировать виджет на основе dom-элемента
         * @param {jQuery} el
         * @returns {croc.ui.Widget}
         */
        generateWidgetByElement: function(el) {
            var item = el[0].$$model = this.__restoreItemFn(el);
            return this.__getItemWidget(item, el);
        },

        /**
         * Сгенерировать коллекцию виджетов на основе модели
         * @returns {Array.<croc.ui.Widget>}
         */
        generateWidgets: function() {
            return this.__model.getArray()
                .map(function(x, i) { return this.__getItemWidget(x); }, this);
        },

        /**
         * Получить все дочерние виджеты
         * @returns {Array.<croc.ui.Widget>}
         */
        getItems: function() {
            return this.__container.getItems(this.__section);
        },

        /**
         * Возвращает коллекцию всех dom-элементов списка
         * @returns {jQuery}
         */
        getListElements: function() {
            return $(this.__elements);
        },

        /**
         * Возвращает виджет из списка, который соответствует переданному параметру. Значение параметра в зависимости от типа:
         * croc.ui.Widget - виджет элемента списка
         * jQuery - dom-элемент списка (либо его дочерний элемент любой глубины вложенности)
         * number - индекс элемента списка
         * Object - модель элемента списка (элемент массива, который является моделью списка)
         * @param {croc.ui.Widget|jQuery|number|Object} param
         * @returns {croc.ui.Widget}
         */
        getListItem: function(param) {
            if (param === undefined || param === null) {
                return null;
            }

            if (param instanceof croc.ui.Widget) {
                return param;
            }

            return croc.ui.Widget.getByElement(this.getListItemElement(param));
        },

        /**
         * Возвращает dom-элемент списка по параметру
         * @see #getListItem
         * @param {croc.ui.Widget|jQuery|number|Object} param
         * @returns {jQuery}
         */
        getListItemElement: function(param) {
            if (param === undefined || param === null) {
                return null;
            }
            if (param instanceof croc.ui.Widget) {
                param = param.getWrapperElement();
            }
            if (param instanceof jQuery) {
                return param.closest('.js-list-item-' + this.getUniqueId());
            }

            param = this.getListItemIndex(param);
            var result = this.__elements[param];
            return result ? $(result) : null;
        },

        /**
         * Возвращает индекс элемента списка по параметру
         * @see #getListItem
         * @param {croc.ui.Widget|jQuery|number|Object} param
         * @returns {Number}
         */
        getListItemIndex: function(param) {
            var isStream = croc.Interface.check(this.__model, 'croc.data.IStreamList');

            var index;
            if (typeof param === 'number') {
                index = param;
            }
            else {
                var model = this.getListItemModel(param);
                index = model ? this.__model.indexOf(model) : -1;
                if (model && index === -1 && isStream && this.__model.isSync()) {
                    index = this.__model.indexInStream(model);
                    if (index === null) {
                        index = -1;
                    }
                }
            }

            if (param !== -1 && isStream && this.__model.isSync()) {
                if (index === -1) {
                    while (this.__model.getHasMoreItems() && index === -1 && this.__model.isSync()) {
                        this.__model.prepareMore();
                        index = this.getListItemIndex(param);
                    }
                }
                else if (index >= this.__elements.length) {
                    var count = index - this.__model.getLength() + 1;
                    if (this.__model.getDefaultCount()) {
                        count = Math.ceil(count / this.__model.getDefaultCount()) * this.__model.getDefaultCount();
                    }
                    this.__model.prepareMore(count);
                }
            }

            return index;
        },

        /**
         * Возвращает модель элемента списка по параметру
         * @see #getListItem
         * @param {croc.ui.Widget|jQuery|number|Object} param
         * @returns {Object}
         */
        getListItemModel: function(param) {
            if (param === undefined || param === null) {
                return null;
            }

            if (typeof param === 'number' || param instanceof croc.ui.Widget || param instanceof jQuery) {
                param = this.getListItemElement(param);
            }
            else {
                return param;
            }

            if (!param) {
                return null;
            }

            return param.length ? param[0].$$model : undefined;
        },

        /**
         * Селектор dom-элементов списка
         * @returns {string}
         */
        getListItemsSelector: function() {
            return this.__itemsSelector;
        },

        /**
         * Массив элементов для отображения
         * @type {croc.data.IObservableList|croc.data.IStreamList}
         */
        getModel: function() {
            return this.__model;
        },

        /**
         * Коллекция выделенных элементов
         * @returns {croc.data.SelectionModel}
         */
        getSelection: function() {
            return this.__selection || (this.__selection = new croc.data.SelectionModel({list: this.__model}));
        },

        /**
         * Вставить дочерний элемент
         * @param {jQuery} element
         * @param {jQuery} beforeElement
         * @protected
         */
        insertItem: function(element, beforeElement) {
            this.__insertItemFn(element, beforeElement);
        },

        /**
         * Есть ли группировка элементов по критерию
         * @returns {boolean}
         */
        isGrouped: function() {
            return !!this.__groupCriteria;
        },

        /**
         * Работает ли список в оптимизированном режиме
         * @see croc.ui.ContainerItemsController.options.createWidgets
         * @returns {boolean}
         */
        isOptimized: function() {
            return this.__isOptimized;
        },

        /**
         * Уведомить о том что контейнер инициализирован
         */
        onInitWidget: function() {
            this.__elements = this.__container.getElement().find(this.__itemsSelector).get();
            var elementsReplaced = false;
            var modelLength = this.__model.getLength();

            if (!this.__container.isHtmlGenerated()) {
                if (modelLength === 0 || this.__elements.length !== modelLength) {
                    //restore from html
                    if (modelLength > 0) {
                        this.__elements = [];
                        this.__onChangeModel(0, [], this.__model.getArray());
                        elementsReplaced = true;
                    }
                    else if (this.__isOptimized) {
                        this.__model.replaceAll(this.__elements.map(function(el) {
                            return this.__restoreItemFn($(el));
                        }, this));
                    }
                    else {
                        this.__model.replaceAll(this.getItems().map(function(item) {
                            return item.getWrapperElement()[0].$$model;
                        }, this));
                    }
                }
            }
            else if (modelLength > 0 && !this.__elements.length) {
                this.__onChangeModel(0, [], this.__model.getArray());
                elementsReplaced = true;
            }

            //обработать уже отрисованные дочерние элементы
            if (!elementsReplaced && this.__elements.length > 0) {
                this.__processInsertedElements(this.__elements, this.__model.getArray(), [],
                    !this.isOptimized() && this.getItems());
            }

            //bindings
            this._getDisposer().addListener(this.__model, 'change', this.__onChangeModel, this);

            if (this.__rerenderItemOnModelUpdate) {
                this._getDisposer().addListener(this.__model, 'updateItem', function(item, index) {
                    this.rerenderItem(index);
                }, this);
            }

            this.__bindToListModel();
        },

        /**
         * Перерисовать элемент
         * @param {croc.ui.Widget|jQuery|number|Object} param
         */
        rerenderItem: function(param) {
            var index = this.getListItemIndex(param);
            if (this.isOptimized()) {
                this.getListItemElement(index).remove();
            }
            else {
                this.getListItem(index).destroy();
            }
            this.__elements.splice(index, 1);
            this.__onChangeModel(index, [], [this.__model.getItem(index)]);
        },

        /**
         * Поиск элементов DOM для всех дочерних элементов
         * @param {jQuery} el
         * @return {Object.<string, jQuery>}
         * @protected
         */
        _scanForItemsElements: function(el) {
            return {
                items: el.find(this.__itemsSelector)
            };
        },

        /**
         * @private
         */
        __bindToListModel: function() {
            if (this.__selectedItemClass) {
                this.getSelection().listenChanges(function(index, remove, insert) {
                    if (croc.utils.arrEqual(remove, insert)) {
                        return;
                    }

                    remove.forEach(function(item) {
                        var el = this.getListItemElement(item);
                        if (el) {
                            el.removeClass(this.__selectedItemClass);
                        }
                    }, this);
                    insert.forEach(function(item) {
                        this.getListItemElement(item).addClass(this.__selectedItemClass);
                    }, this);
                }, this);
            }
        },

        /**
         * @returns {*}
         * @private
         */
        __getGroup: function(item) {
            return this.__groupCriteria === 'string' ? item[this.__groupCriteria] : this.__groupCriteria(item);
        },

        /**
         * @param item
         * @returns {croc.ui.Widget}
         * @private
         */
        __getHeaderWidget: function(item) {
            return new croc.ui.Widget({
                htmlTemplate: typeof this.__groupHeaderRenderer === 'function' ?
                    this.__groupHeaderRenderer(item) :
                    this.__groupHeaderRenderer.render(typeof item === 'object' ? item : {item: item})
            });
        },

        /**
         * @param {Object|jQuery} item
         * @param {jQuery} [el]
         * @returns {croc.ui.Widget}
         * @private
         */
        __getItemWidget: function(item, el) {
            var template = this.__renderItemHtml(item, el);
            return template instanceof croc.ui.Widget ? template : new croc.ui.Widget({
                htmlTemplate: el ? null : template,
                el: el || null
            });
        },

        /**
         * @private
         */
        __onChangeModel: function(index, remove, insert) {
            if (remove.length) {
                if (this.__isOptimized) {
                    $(this.__elements.slice(index, index + remove.length)).remove();
                }
                else if (this.__groupCriteria) {
                    if (this.__model.getLength() === 0) {
                        this.getItems().concat().forEach(function(x) { x.destroy(); });
                    }
                    else {
                        throw 'not implemented!';
                    }
                }
                else {
                    this.getItems().slice(index, index + remove.length)
                        .forEach(function(x) { x.destroy(); });
                }

                this.__elements.splice(index, remove.length);
            }

            if (insert.length) {
                var elements;
                var lastLength = this.__model.getLength() - insert.length;
                //нет гарантии что индекс элемента модели совпадает с индексом дочернего виджета
                //пока разрешаем группировку только для вставки элементов в конец списка
                if (this.__groupCriteria && index < lastLength) {
                    throw 'not implemented!';
                }

                if (this.__isOptimized) {
                    elements = $(this.generateHtml(insert));
                    this.insertItem(elements, index >= this.__elements.length ? null : this.getListItemElement(index));
                    elements = elements.get();

                    this.__elements.splice.apply(this.__elements, [index, 0].concat(elements));
                    this.__processInsertedElements(elements, insert, []);
                }
                else {
                    var widgets;
                    var headers = {};
                    if (this.__groupCriteria) {
                        var group = lastLength > 0 && this.__getGroup(this.__model.getItem(lastLength - 1));
                        widgets = [];
                        insert.forEach(function(item, index) {
                            var curGroup = this.__getGroup(item);
                            if (group !== curGroup) {
                                headers[widgets.length] = true;
                                widgets.push(this.__getHeaderWidget(item));
                                group = curGroup;
                            }
                            widgets.push(this.__getItemWidget(item));
                        }, this);
                        this.__container.add(this.__section, widgets);
                    }
                    else {
                        widgets = insert.map(function(x) {return this.__getItemWidget(x);}, this);
                        this.__container.add(this.__section, widgets, this.getItems()[index]);
                    }

                    elements = widgets.map(function(x) { return x.getWrapperElement()[0]; });

                    var addElements = elements;
                    if (this.__groupCriteria) {
                        addElements = addElements.filter(function(element, index) {
                            return !headers[index];
                        });
                    }
                    this.__elements.splice.apply(this.__elements, [index, 0].concat(addElements));

                    this.__processInsertedElements(elements, insert, headers, widgets);
                }
            }
        },

        /**
         * @param {Array.<Element>} elements
         * @param {Array.<Object>} models
         * @param headers
         * @param [widgets]
         * @private
         */
        __processInsertedElements: function(elements, models, headers, widgets) {
            for (var i = 0, modelId = 0; i < elements.length; ++i) {
                var el = elements[i];
                var model = models[modelId];

                if (headers[i]) {
                    el.$$header = true;
                    el.$$model = el.$$group = this.__getGroup(model);
                }
                else {
                    el.$$model = models[modelId];
                    if (this.__groupCriteria) {
                        el.$$group = this.__getGroup(model);
                    }
                    el = $(el);
                    el.addClass('js-list-item-' + this.getUniqueId());

                    if (this.__onItemRendered) {
                        this.__onItemRendered(widgets ? widgets[i] : el);
                    }

                    ++modelId;
                }
            }

            if (this.__selectedItemClass && this.getSelection().getLength() > 0) {
                this.getSelection().forEach(function(item) {
                    var el = this.getListItemElement(item);
                    if (el) {
                        el.addClass(this.__selectedItemClass);
                    }
                }, this);
            }
        },

        /**
         * @param item
         * @param [el]
         * @returns {*}
         * @private
         */
        __renderItemHtml: function(item, el) {
            if (el) {
                var widget = croc.ui.Widget.getByElement(el, true);
                if (widget) {
                    return widget;
                }
            }

            var renderData = this.__transformItemFn ? this.__transformItemFn(item) : item;
            return typeof this.__itemRenderer === 'function' ?
                this.__itemRenderer(renderData, el) :
                this.__itemRenderer.render(typeof renderData === 'object' ? renderData : {item: renderData});
        }
    }
});
},{}],22:[function(require,module,exports){
/**
 * ООП-обёртка над DOM-элементом. Позволяет использовать связывание (binding) для различных
 * свойств и css-классов.
 */
croc.Class.define('croc.ui.Element', {
    extend: croc.Object,

    statics: {
        /**
         * Создать обёртку для DOM-элемента. Если обёртка для этого элемента уже была создана,
         * то используется она (необходимые свойства props добавляется к существующей обёртке)
         * @param {jQuery} el
         * @param {Array.<string>|string} [props]
         * @static
         */
        create: function(el, props) {
            var domWrapper = el.data('domWrapper');
            if (!domWrapper) {
                el.data('domWrapper', domWrapper = new croc.ui.Element({
                    el: el,
                    props: typeof props === 'string' ? [props] : props || null
                }));
            }
            else if (props) {
                this.__createProperties(domWrapper, typeof props === 'string' ? [props] : props);
            }

            return domWrapper;
        },

        /**
         * @param instance
         * @param props
         * @private
         * @static
         */
        __createProperties: function(instance, props) {
            var el = instance.getElement();
            props.forEach(function(prop) {
                var getter = croc.Object.getPropertyPart('get', prop);
                if (instance[getter]) {
                    return;
                }

                instance[getter] = function() {
                    return croc.utils.domGetModifier(el, prop);
                };
                instance[croc.Object.getPropertyPart('set', prop)] = function(value) {
                    croc.utils.domSetModifier(el, prop, value);
                };
            });
        }
    },

    properties: {
        /**
         * Текст внутри элемента
         * @type {string}
         */
        text: {
            getter: function() {
                return this.__el.text();
            },
            setter: function(value) {
                this.__el.text(value !== 0 && !value ? '' : value);
            }
        },

        /**
         * Поканаз ли элемент
         */
        shown: {
            apply: function(value) {
                this.__el.toggleClass('g-hidden', !value);
            }
        },

        /**
         * Css-класс mod_...
         * @type {boolean}
         */
        mod: {
            setter: function(value) {
                croc.utils.domSetModifier(this.__el, 'mod', value);
            },
            getter: function() {
                return croc.utils.domGetModifier(this.__el, 'mod');
            }
        },

        /**
         * Css-класс state_active
         * @type {boolean}
         */
        state_active: {
            setter: function(value) {
                this.__el.toggleClass('state_active', value);
            },
            getter: function() {
                return this.__el.hasClass('state_active');
            }
        },

        /**
         * Css-класс state_hover
         * @type {boolean}
         */
        state_hover: {
            setter: function(value) {
                this.__el.toggleClass('state_hover', value);
            },
            getter: function() {
                return this.__el.hasClass('state_hover');
            }
        }
    },

    options: {
        /**
         * DOM-элемент
         * @type {jQuery}
         */
        el: {
            type: jQuery,
            required: true
        },

        /**
         * Список свойств, которые нужно добавить к обёртке. Свойства соответствуют css-классам
         * элемента. Например, свойство view со значением list соответствует классу view_list. А свойство
         * state_empty соответствует классу state_empty.
         * @type {Array.<string>}
         */
        props: {
            type: 'array'
        }
    },

    construct: function(options) {
        this.__el = options.el;
        croc.ui.Element.superclass.__construct__.apply(this, arguments);

        if (options.props) {
            croc.ui.Element.__createProperties(this, options.props);
        }
    },

    members: {
        /**
         * Обёрнутый DOM-элемент
         * @returns {options.el|*}
         */
        getElement: function() {
            return this.__el;
        }
    }
});

},{}],23:[function(require,module,exports){
/**
 * Базовый интерфейс для всех виджетов, которые имеют привязку к одному единственному элементу
 */
croc.Interface.define('croc.ui.IWidget', {
    extend: croc.IObject,

    events: {
        /**
         * @deprecated
         */
        render: null
    },

    properties: {
        /**
         * @type {string}
         */
        mod: {
            type: 'string'
        },

        /**
         * @type {boolean}
         */
        rendered: {
            getter: null,
            event: true
        },

        /**
         * @type {boolean}
         */
        shown: {
            type: 'boolean',
            event: true
        }
    },

    members: {
        /**
         * Полное разрушение виджета
         */
        destroy: function() {},

        /**
         * Получить DOM-элемент виджета
         * @returns {jQuery}
         */
        getElement: function() {},

        /**
         * Получить/сгенерировать dom id элемента
         * @return {string}
         */
        getId: function() {},

        /**
         * Идентификатор виджета
         * @returns {string}
         */
        getIdentifier: function() {},

        /**
         * Мета-данные виджета
         * @returns {Object}
         */
        getMeta: function() {},

        /**
         * Возвращает индекс виджета у родителя
         * @returns {number}
         */
        getParentIndex: function() {},

        /**
         * Родительская секция
         * @return {string}
         */
        getParentSection: function() {},

        /**
         * Родительский виджет
         * @return {croc.ui.Widget}
         */
        getParentWidget: function() {},

        /**
         * @type {string}
         */
        getWidth: function() {},

        /**
         * Была ли разметка виджета сгенерирована
         * @returns {boolean}
         */
        isHtmlGenerated: function() {},

        /**
         * Изменить ширину виджета
         * @type {number|string}
         */
        setWidth: function(width) {}
    }
});
},{}],24:[function(require,module,exports){
croc.Class.define('croc.ui.Render', {
    type: 'static',

    statics: {
        /**
         * @param config
         * @returns {string}
         */
        icon: function(config) {
            if (config.html) {
                return config.html.render({text: config.text || ''});
            }

            config = _.assign({}, config);
            if (config.button && !config.text) {
                config.cls = config.cls ? config.cls + ' type_button' : 'type_button';
            }
            if (config.size) {
                config.cls = config.cls ? config.cls + ' size_' + config.size : 'size_' + config.size;
            }
            if (!config.text) {
                config.text = '';
            }
            config.content = config.content || '<span class="g-icon-item"></span>';
            if (!config.style) {
                config.style = '';
            }
            if (!config.tag) {
                config.tag = 'span';
            }
            if (!config.attrs) {
                config.attrs = '';
            }

            return (config.side === 'right' ? this.__ICON_HTML_RIGHT : this.__ICON_HTML).render(config);
        },

        /**
         * @param {jQuery} iconEl
         * @returns {{html: (string), text: string}}
         */
        parseIcon: function(iconEl) {
            iconEl = iconEl.clone();
            var wasReplaced = false;
            var text = [];

            iconEl.contents().each(function(node) {
                var el = $(node);
                var isTextNode = node.nodeType === 3;
                if (isTextNode && el.text().trim() === '') {
                    el.remove();
                    return;
                }

                if (!el.hasClass('g-icon-h')) {
                    text.push(isTextNode ? el.text() : node.outerHTML);
                    if (wasReplaced) {
                        el.remove();
                    }
                    else {
                        el.replaceWith('{text}');
                        wasReplaced = true;
                    }
                }
            });

            if (!wasReplaced) {
                if (iconEl.hasClass('side_right')) {
                    iconEl.prepend('{text}');
                }
                else {
                    iconEl.append('{text}');
                }
            }

            return {
                html: iconEl[0].outerHTML,
                text: text.join('')
            };
        },

        pseudoLink: function(config) {
            config = _.assign({}, config);
            config.cls = config.cls ? ' ' + config.cls : '';
            if (!config.tag) {
                config.tag = 'span';
            }
            config.attrs = config.attrs ? ' ' + config.attrs : '';
            if (!config.text) {
                config.text = '';
            }

            return this.__PSEUDO_HTML.render(config);
        },

        __ICON_HTML: '<{tag} {attrs} class="g-icon {cls}"><span class="g-icon-h" style="{style}">{content}</span>{text}</{tag}>',
        __ICON_HTML_RIGHT: '<{tag} {attrs} class="g-icon side_right {cls}">{text}<span class="g-icon-h" style="{style}">{content}</span></{tag}>',
        __PSEUDO_HTML: '<{tag} class="g-pseudo{cls}"{attrs}><span class="g-pseudo-h">{text}</span></{tag}>'
    }
});
},{}],25:[function(require,module,exports){
//+require croc.ui.WidgetsManager

/**
 * Базовый класс для всех виджетов, которые имеют привязку к одному единственному элементу
 */
croc.Class.define('croc.ui.Widget', {
    extend: croc.Object,
    implement: croc.ui.IWidget,

    statics: {
        /**
         * @type {jQuery}
         * @static
         */
        FICTIVE: croc.isClient && $(),

        /**
         * @private
         * @static
         */
        __NONUNIT_CSS_PROPERTIES: {
            'z-index': true,
            'opacity': true
        },

        /**
         * Генерирует виджет на основе тега с классом js-generate
         * @param {jQuery} el
         * @param {Object} [configure]
         * @returns {croc.ui.Widget}
         */
        generateWidget: function(el, configure) {
            var type = croc.ui.WidgetsManager.getInstance().getWidgetType(el.data('xtype'));
            var conf = croc.ui.Widget.getConfFromElement(el);
            conf.replaceEl = el;

            if (type.config && type.config.options) {
                var options = type.config.options;
                _.forOwn(conf, function(value, name) {
                    if (options[name]) {
                        conf[name] = croc.ui.Widget.__castOption(options[name], value);
                    }
                });
            }

            if (configure) {
                conf.configure = configure;
            }

            return new type(conf);
        },

        /**
         * Возвращает виджет по его DOM-элементу
         * @param {jQuery|Element|string} el
         * @param {boolean} [tryToConstruct=false]
         * @param {boolean} [construct=false]
         * @returns {croc.ui.Widget}
         * @static
         */
        getByElement: function(el, tryToConstruct, construct) {
            el = $(el);
            var widget = el.data('$$stmWidget') || null;
            if (widget) {
                return widget;
            }

            if (construct || (tryToConstruct && el.hasClass('js-construct'))) {
                var type = croc.ui.WidgetsManager.getInstance().getWidgetType(el.data('xtype') || 'croc.ui.Widget');
                widget = new type({el: el});
            }
            return widget;
        },

        /**
         * Возвращает ближайший родительский виджет для переданного элемента
         * @param {jQuery} el
         * @returns {croc.ui.Widget}
         */
        getClosestWidget: function(el) {
            var closest = el.closest('.js-widget');
            return closest.length ? this.getByElement(closest) : croc.ui.WidgetsManager.getPageWidget();
        },

        /**
         * Получить конфигурацию виджета на основе его DOM-элемента
         * @param {jQuery} el
         * @returns {Object}
         * @static
         */
        getConfFromElement: function(el) {
            var conf = el.data('widgetConf');
            if (conf) {
                return conf;
            }

            conf = {};

            if (el.data('conf')) {
                _.assign(conf, el.data('conf'));
            }

            if (el[0] && el[0].attributes) {
                Array.prototype.forEach.call(el[0].attributes, function(attr) {
                    if (attr.name.indexOf('data-conf-') === 0) {
                        var key = attr.name.substr('data-conf-'.length)
                            .replace(/-(\w)/g, function($0, $1) {return $1.toUpperCase();});

                        conf[key] = el.data(attr.name.substr('data-'.length));
                    }
                });
            }

            el.data('widgetConf', conf);

            return conf;
        },

        /**
         * Возвращает html для переданного класса виджета
         * @param {Function} widgetCls
         * @param {Object} [conf]
         */
        render: function(widgetCls, conf) {
            return croc.utils.defSync(new widgetCls(conf).createHtml());
        },

        /**
         * Если передан виджет, то возрвщает его элемент, иначе возвращает параметр
         * @param {jQuery|croc.ui.Widget} from
         */
        resolveElement: function(from) {
            return from instanceof croc.ui.Widget ? from.getElement() : from;
        },

        /**
         * @param {Object} option
         * @param value
         * @returns {*}
         * @private
         * @static
         */
        __castOption: function(option, value) {
            if (value === null) {
                return value;
            }

            switch (option.type) {
                case 'string':
                    return value.toString();

                case 'boolean':
                    return value === 'false' ? false : !!value;

                case 'number':
                case 'integer':
                    return parseFloat(value);

                default:
                    return value;
            }
        }
    },

    events: {
        /**
         * Виджет стал видимым (у одного из родителей был вызван setShown(true))
         */
        appear: null,

        /**
         * @deprecated
         */
        render: null,

        /**
         * Попытка отрисовки виджета провалилась
         */
        renderFailed: null,

        /**
         * размеры виджета изменились
         * @param {string} reason
         */
        resize: null
    },

    properties: {
        /**
         * Автоматически вызывать метод onResize при изменении размеров окна
         * @type {boolean}
         */
        autoResize: {
            type: 'boolean',
            value: false,
            option: true,
            apply: '__applyAutoResize'
        },

        /**
         * @type {string}
         */
        mod: {
            type: 'string',
            cssClass: true
        },

        /**
         * @type {boolean}
         */
        rendered: {
            getter: null,
            __setter: null,
            event: true
        },

        /**
         * @type {boolean}
         */
        shown: {
            type: 'boolean',
            field: '__shown',
            apply: '_applyShown',
            value: true,
            option: true,
            event: true
        }
    },

    options: {
        /**
         * Объект {ключ=>функция}. Дочерние виджеты наследуют все функции из этого объекта. При совпадении атрибута
         * data-configure с одним из ключей в этом объекте вызвается соответствующая функция для конфигурации
         * виджета. Используется в случае если иерархия виджетов инициализируется из разметки и какие-либо из
         * их опций невозможно передать через data-атрибуты (например, функции).
         * @type {Object.<string, function(croc.ui.Widget)>}
         */
        configure: {
            type: 'object',
            value: {}
        },

        /**
         * DOM-элемент виджета. Указывается, если виджет инициализируется из разметки.
         * @type {string|Element|jQuery}
         */
        el: {
            //type: ['string', Element, jQuery]
        },

        /**
         * Дополнительные классы для блока через пробел
         * @type {string}
         * todo заменить на array
         */
        extraCls: {
            type: 'string'
        },

        /**
         * Метод сокрытия виджета при изменении свойства {@link #shown}.
         * @type {string}
         */
        hideMethod: {
            check: ['hide', 'detach'],
            value: 'hide'
        },

        /**
         * Идентификатор виджета, по которому будет осуществляться поиск дочерних элементов и субэлементов
         * @type {string}
         */
        hostId: {
            type: 'string'
        },

        /**
         * Шаблон по-умолчанию
         * @type {string|$.Deferred}
         */
        htmlTemplate: {},

        /**
         * Идентификатор виджета, по которому его можно получить из родительского
         * @type {string}
         */
        identifier: {
            type: 'string'
        },

        /**
         * Шаблон включает в себя дочерние шаблоны обёрнутые в тег <script>
         * @type {boolean}
         */
        includesSubTemplates: false,

        /**
         * мета-данные для добавления дочернего виджета
         * @type {object}
         */
        meta: {
            type: 'object',
            value: {},
            deepExtend: true
        },

        /**
         * Модификатор блока (css класс mod_...)
         * @type {string}
         */
        mod: {
            type: 'string',
            property: 'mod'
        },

        /**
         * Элемент-контейнер виджета. Передаётся если разметка виджета должна быть создана динамически.
         * @type {string|Element|jQuery}
         */
        renderTo: {
            //type: ['string', Element, jQuery]
        },

        /**
         * Указывается вместо renderTo, показывает, что новым элементом нужно заменить переданный
         * @type {string|Element|jQuery}
         */
        replaceEl: {
            //type: ['string', Element, jQuery]
        },

        /**
         * Css-стили корневого элемента виджета
         * @type {Object}
         */
        style: {
            type: 'object',
            extend: true
        },
        
        xtype: {},

        /**
         * Ширина виджета
         * @type {number|string}
         */
        width: {
            type: ['number', 'string']
        },

        /**
         * Враппер виджета
         * @type {jQuery}
         */
        wrapperEl: {
            //type: jQuery
        },

        /**
         * html, в который следует обернуть виджет (должен присутствовать маркер {item})
         * @type {string}
         */
        wrapperTemplate: {},

        /**
         * Дополнительные классы для корневого элемента
         * @type {Array.<string>}
         */
        _addClasses: {
            type: 'array',
            concat: true
        },

        /**
         * @type {string}
         * @protected
         * @internal
         */
        _childClass: {},

        _checkRequiredOptions: false,

        _parentWidget: {},

        _parentSection: {},

        /**
         * Виджет обёрнут родительским контейнером {@see croc.ui.Container.options._wrapSection}
         * @type {boolean}
         */
        _wrapped: {}
    },

    construct: function(options) {
        croc.ui.Widget.superclass.__construct__.apply(this, arguments);

        if (this.getAutoResize()) {
            this.__applyAutoResize(this.getAutoResize());
        }

        this.__parentSection = options._parentSection;
        this.__parentWidget = options._parentWidget;
        this.__subElements = {};
        this._childClass = options._childClass;
        this._wrapped = options._wrapped;
        this._addClasses = '';

        //если передан элемент или место вставки производим инициализацию виджета
        if (options.el || options.renderTo || options.replaceEl) {
            this._baseInit();
        }
    },

    destruct: function() {
        croc.ui.WidgetsManager.getInstance().unregisterWidget(this);
    },

    members: {
        /**
         * Всплывающий ресайз компонента
         */
        bubbleResize: function() {
            var widget = this;
            var parent;
            var pageWidget = croc.ui.WidgetsManager.getPageWidget();
            while ((parent = widget.getParentWidget())) {
                if (parent === pageWidget) {
                    break;
                }
                widget = parent;
            }

            widget.onResize('bubbleResize');
        },

        /**
         * Создаёт html-разметку компонента
         * @param [transformHtml] internal
         * @return {$.Deferred}
         */
        createHtml: function(transformHtml) {
            var options = this._options;
            this._onPropertiesInitialized(options);
            this.__htmlGenerated = true;

            var scripts = [];
            var deferred = $.when(this._getTemplate(options))
                .then(function(tpl) {
                    if (options.includesSubTemplates) {
                        tpl = tpl.toString().replace(/<script type="text\/x-jquery-tmpl"[\s\S]*?<\/script>/g,
                            function(match) {
                                scripts.push(match);
                                return '__script_template__';
                            });
                    }

                    //todo убрать compatibility mode
                    var html = tpl.render(_.assign({
                        cls: this.__getCssClassPropsString() +
                        (options._addClasses ? ' ' + options._addClasses.join(' ') : '') +
                        this._addClasses +
                        (options.extraCls ? ' ' + options.extraCls : '') +
                        (this._childClass ? ' ' + this._childClass : '') +
                        (!this._wrapped ? ' js-widget' : '')
                    }, this._getAddRenderData(options)));

                    //style
                    if (options.style) {
                        var nonunit = croc.ui.Widget.__NONUNIT_CSS_PROPERTIES;
                        var styles = _.map(options.style, function(value, key) {
                            key = croc.utils.strDasherize(key);
                            if (!nonunit[key] && typeof value === 'number' && value !== 0) {
                                value = value + 'px';
                            }
                            return key + ': ' + value + ';';
                        }).join(' ');
                        html = html.replace(/(<[^ ]+ )/, '$1style="' + styles + '" ');
                    }

                    if (transformHtml) {
                        html = transformHtml(html);
                    }

                    if (!options.wrapperTemplate) {
                        return html;
                    }
                    else if (typeof html === 'string') {
                        return options.wrapperTemplate.render({item: html});
                    }
                    else {
                        return $.when(html).then(function(html) {
                            return options.wrapperTemplate.render({item: html});
                        });
                    }
                }.bind(this));

            return options.includesSubTemplates ? deferred.then(function(html) {
                return html.replace(/__script_template__/g, function() {
                    return scripts.shift();
                });
            }) : deferred;
        },

        /**
         * Полное разрушение виджета
         */
        destroy: function() {
            if (this.__parentWidget) {
                this.__parentWidget.removeItem(this);
            }
            else {
                this.dispose();
                this.__wrapperEl.remove();
            }
        },

        /**
         * Получить DOM-элемент виджета
         * @returns {jQuery}
         */
        getElement: function() {
            return this.__el;
        },

        /**
         * Идентификатор виджета, по которому будет осуществляться поиск дочерних элементов и субэлементов
         */
        getHostId: function() {
            return this._options.hostId;
        },

        /**
         * Получить/сгенерировать dom id элемента
         * @return {string}
         */
        getId: function() {
            if (this.__id) {
                return this.__id;
            }

            if (this.__el) {
                this.__id = this.__el.attr('id');
            }
            if (!this.__id) {
                this.__id = croc.utils.getStmId();
                if (this.__el) {
                    this.__el.attr('id', this.__id);
                }
            }

            return this.__id;
        },

        /**
         * Идентификатор виджета
         * @returns {string}
         */
        getIdentifier: function() {
            return this._options.identifier;
        },

        /**
         * Мета-данные виджета
         * @returns {Object}
         */
        getMeta: function() {
            return this._options.meta;
        },

        /**
         * Возвращает индекс виджета у родителя
         * @returns {number}
         */
        getParentIndex: function() {
            return this.__parentWidget.getItems(this.__parentSection).indexOf(this);
        },

        /**
         * Родительская секция
         * @return {string}
         */
        getParentSection: function() {
            return this.__parentSection;
        },

        /**
         * Родительский виджет
         * @return {croc.ui.Container}
         */
        getParentWidget: function() {
            return this.__parentWidget;
        },

        /**
         * Получить элемент внутри элемента виджета, класс которого равень js-[dataId]-[id],
         * где [dataId] - это значение атрибута data-conf-host-id элемента виджета.
         * @param {jQuery|string} [el]
         * @param {string|boolean} [id]
         * @param {boolean} [ignoreCache=false]
         * @returns {jQuery}
         */
        getSubElement: function(el, id, ignoreCache) {
            if (typeof el === 'string') {
                ignoreCache = id;
                id = el;
                el = this.getElement();
            }

            var subElement = !ignoreCache && this.__subElements[id];
            if (!subElement) {
                subElement = this.__subElements[id] = el.find(this.getSubElementSelector(id));
            }

            return subElement;
        },

        /**
         * Селектор для субэлемента
         * @param {string} id
         * @returns {string}
         */
        getSubElementSelector: function(id) {
            if (!this.getHostId()) {
                throw new Error('Отсутствует hostId');
            }
            if (id === 'child') {
                throw new Error('id === "child" запрещён!');
            }
            return '.js-' + this.getHostId() + '-' + id;
        },

        /**
         * Вернуть шаблон из дочернего элемента в виде строки
         * @param {string} id
         * @return {string}
         */
        getSubTemplate: function(id) {
            return this.getSubElement(id).html().trim();
        },

        /**
         * @type {string}
         */
        getWidth: function() {
            return this._options.width;
        },

        /**
         * Враппер виджета. Если нет то возвращает корневой элемент виджета.
         * @returns {jQuery}
         */
        getWrapperElement: function() {
            return this.__wrapperEl;
        },

        /**
         * Есть ли у виджета врапер
         * @return {boolean}
         */
        hasWrapper: function() {
            return this._hasWrapper;
        },

        /**
         * Инициализировать виджет элементом (используется после создания разметки через createHtml)
         * @param {jQuery} el
         * @param {croc.ui.Container} [parent]
         */
        initWith: function(el, parent) {
            this._transformElement(el);
            this._setElement(el);
            this._baseInit();
            if (parent) {
                parent.add(this.getMeta().section || parent.getDefaultItemsSection(), this);
            }
        },

        /**
         * Виден ли в данный момент виджет
         * @returns {boolean}
         */
        isVisible: function() {
            return !!this.getElement() && this.getElement().is(':visible');
        },

        /**
         * Была ли разметка виджета сгенерирована
         * @returns {boolean}
         */
        isHtmlGenerated: function() {
            return !!this.__htmlGenerated;
        },

        /**
         * Была ли отрисовка виджета неудачной
         * @returns {boolean}
         */
        isRenderFailed: function() {
            return this.__isRenderFailed || false;
        },

        /**
         * Если элемент виден, то callback вызывается сразу иначе на событие appear
         * @param {function} callback
         * @param {Object} [context]
         * @returns {Function}
         */
        onAppear: function(callback, context) {
            if (this.isVisible()) {
                callback.call(context || window);
                return _.noop;
            }
            else {
                return this.once('appear', function() {
                    callback.call(context || window);
                });
            }
        },

        /**
         * Уведомить виджет о том, что размеры рамок изменились
         * Причины вызова метода: reposition, modelChange, show, parentResize, bubbleResize
         * @param {string} [reason]
         */
        onResize: function(reason) {
            this._onResize(reason);
            this.fireEvent('resize', reason);
        },

        /**
         * Если элемент отрисован, то callback вызывается сразу иначе на событие changeRendered
         * @param {function} callback
         * @param {Object} [context]
         * @returns {Function}
         */
        onRender: function(callback, context) {
            if (this.getRendered()) {
                callback.call(context || window);
                return _.noop;
            }
            else {
                return this.once('changeRendered', function() {
                    callback.call(context || window);
                });
            }
        },

        /**
         * Изменить ширину виджета
         * @type {number|string}
         */
        setWidth: function(width) {
            if (typeof width === 'number') {
                width = width + 'px';
            }
            this._options.width = width;
            if (this.__el) {
                this.__el.css('width', width);
            }
        },

        /**
         * Применить изменение состояния видимости виджета
         * @param {boolean} value
         * @protected
         */
        _applyShown: function(value) {
            if (this.__wrapperEl) {
                if (this._options.hideMethod === 'detach') {
                    if (value) {
                        if (!this.__wrapperEl.closest('body').length) {
                            this.__detachParent.append(this.__wrapperEl);
                        }
                        if (!this.__wrapperEl.is(':visible')) {
                            this.__wrapperEl.show();
                        }
                    }
                    else {
                        this.__detachParent = this.__wrapperEl.parent();
                        this.__wrapperEl.detach();
                    }
                }
                else {
                    if (!value) {
                        croc.utils.domHide(this.__wrapperEl);
                    }
                    else {
                        if (this.__wrapperEl.hasClass('g-hidden')) {
                            croc.utils.domShow(this.__wrapperEl);
                        }
                        else {
                            this.__wrapperEl.toggle(value);
                        }
                    }
                }

                if (value && this.hasListeners('appear') && this.__el.is(':visible')) {
                    this.fireEvent('appear');
                }
            }
        },

        /**
         * Базовая инициализация (после привязки виджета к общему дереву виджетов)
         * @protected
         */
        _baseInit: function() {
            croc.ui.WidgetsManager.getInstance().registerWidget(this);

            var options = this._options;

            if (options.el) {
                this._setElement(options.el instanceof jQuery ? options.el : $(options.el), options.wrapperEl);
                this.__initStyles(this.__el);
            }

            if (options.renderTo && !(options.renderTo instanceof jQuery)) {
                options.renderTo = $(options.renderTo);
            }

            if (options.replaceEl && !(options.replaceEl instanceof jQuery)) {
                options.replaceEl = $(options.replaceEl);
            }

            if ((!this.__el || !this.__el.length) && this.__el !== croc.ui.Widget.FICTIVE &&
                (!options.renderTo || !options.renderTo.length) &&
                (!options.replaceEl || !options.replaceEl.length)) {
                throw new Error('Не передан ни элемент ни его родитель!');
            }

            if (options.el && (options.renderTo || options.replaceEl)) {
                throw new Error('Передан и элемент и его родитель!');
            }

            var initWidget = function() {
                //noinspection JSHint
                if (options.width && !this.__widthGotFromEl && options.width != this.__el.css('width')) {
                    this.__el.css('width', options.width);
                }
                this.__initStyles(this.__el);

                $.when(this._initWidget())
                    .done(function() {
                        this.__setRendered(true);
                        //todo deprecated
                        this.fireEvent('render', this, this.__el);

                        if (this.__shown && this.hasListeners('appear') && this.__el.is(':visible')) {
                            this.fireEvent('appear');
                        }
                    }.bind(this))
                    .fail(function() {
                        this.__isRenderFailed = true;
                        this.fireEvent('renderFailed');
                    }.bind(this));
            }.bind(this);

            //разметка виджета уже создана родителем
            if (this.isHtmlGenerated()) {
                this.__initializeOptions();
                this._checkMissedOptions(options);
                initWidget();
            }
            //виджет инициализируется из разметки
            else if (this.__el) {
                this.__initializeProperties();
                this._checkMissedOptions(options);
                this._onPropertiesInitialized(options);
                initWidget();
            }
            //разметка виджета создаётся динамически
            else if (options.renderTo || options.replaceEl) {
                this._checkMissedOptions(options);
                this.createHtml().done(function(html) {
                    var wrapperEl = $(html);
                    var el = this._hasWrapper ? wrapperEl.find('.js-widget:eq(0)') : wrapperEl;

                    this._transformElement(el);

                    if (options.renderTo) {
                        options.renderTo.append(wrapperEl);
                    }
                    else {
                        options.replaceEl.replaceWith(wrapperEl);
                    }

                    this._setElement(el, wrapperEl);
                    this.__initializeOptions();

                    initWidget();
                }.bind(this));
            }
        },

        /**
         * Дополнительные данные для рендеринга из шаблона
         * @param {Object} options
         * @returns {object}
         * @protected
         */
        _getAddRenderData: function(options) {
            return {};
        },

        /**
         * Шаблон для элемента
         * @param {Object} options
         * @return {$.Deferred|string}
         * @protected
         */
        _getTemplate: function(options) {
            if (options.htmlTemplate) {
                return options.htmlTemplate;
            }
            throw new Error('Отсутствует шаблон!');
        },

        /**
         * Инициализация виджета после его отрисовки в DOM
         * @return {$.Deferred|undefined}
         * @protected
         */
        _initWidget: function() {
        },

        /**
         * Внутренняя реализация onResize
         * @param {string} [reason]
         * @protected
         */
        _onResize: function(reason) {},

        /**
         * Запросить шаблон по его имени
         * @param {string} name
         * @param {function(string):string} [transform=null]
         * @returns {$.Deferred}
         * @protected
         */
        _requestTemplate: function(name, transform) {
            var def = croc.getService(croc.services.Resources).loadTemplate(name);
            if (transform) {
                def = def.then(function(tpl) {
                    return transform(tpl);
                });
            }
            return def;
        },

        /**
         * Назначить элемент виджету
         * @param {jQuery} el
         * @param {jQuery} [wrapperEl]
         * @protected
         */
        _setElement: function(el, wrapperEl) {
            if (this.__elementSet) {
                return;
            }

            if (this._hasWrapper && !wrapperEl) {
                wrapperEl = el.closest('.js-wrapper');
            }

            var shownSet = false;
            if (!this.__htmlGenerated && el.hasClass('g-hidden')) {
                this.setShown(false);
                shownSet = true;
            }

            this.__el = el;
            this.__wrapperEl = wrapperEl || el;

            if (!el.data('$$stmWidget')) {
                el.data('$$stmWidget', this);
            }
            if (wrapperEl && !wrapperEl.data('$$stmWidget')) {
                wrapperEl.data('$$stmWidget', this);
            }

            if (this.__id && !el.attr('id')) {
                el.attr('id', this.__id);
            }

            if (!this.__shown) {
                if (!shownSet) {
                    this._applyShown(false);
                }
            }

            this.__elementSet = true;
        },

        /**
         * Назначить родительский виджет и секцию
         * @param {croc.ui.Container} widget
         * @param {string} section
         * @protected
         */
        _setParentWidgetAndSection: function(widget, section) {
            if (this.__parentWidget && this.__parentWidget.configure) {
                this._options.configure =
                    _.assign({}, this.__parentWidget._options.configure, this._options.configure || {});
            }
            this.__parentWidget = widget;
            this.__parentSection = section;
        },

        /**
         * Изменить элемент ещё не вставленный в DOM корневой элемент
         * @param {jQuery} el
         * @protected
         */
        _transformElement: function(el) {
            this.__initStyles(el);
        },

        /**
         * Выполняется когда свойства виджета уже инициализированы
         * @param {Object} options
         * @protected
         */
        _onPropertiesInitialized: function(options) {
            this._hasWrapper = !!options.wrapperTemplate;
        },

        /**
         * @param {boolean} value
         * @private
         */
        __applyAutoResize: function(value) {
            if (this.__autoResizeListener) {
                this._getDisposer().disposeItem(this.__autoResizeListener);
                this.__autoResizeListener = null;
            }

            if (value) {
                this.__autoResizeListener = this._getDisposer().addListener($(window), 'resize',
                    _.throttle(this.disposableFunc(this.onResize, this), 50));
                if (this.getRendered()) {
                    this.onResize('changeSize');
                }
                else {
                    this.once('changeRendered', this.onResize.bind(this, 'show'));
                }
            }
        },

        /**
         * @returns {string}
         * @private
         */
        __getCssClassPropsString: function() {
            var props = [];
            if (this.$$propertiesToClass) {
                _.forOwn(this.$$propertiesToClass, function(prop) {
                    var value = this[prop.getterName]();
                    if (value !== undefined && value !== null) {
                        props.push(this.__getPropCssClassValue(value, prop));
                    }
                }, this);
            }

            return props.length ? ' ' + props.join(' ') : '';
        },

        /**
         * @param {string} value
         * @param {Object} [prop]
         * @returns {string}
         * @private
         */
        __getPropCssClassValue: function(value, prop) {
            return croc.utils.domGetCssModifier(value,
                prop && (typeof prop.cssClass === 'string' ? prop.cssClass : prop.name));
        },

        /**
         * @private
         */
        __initializeOptions: function() {
            var options = this._options;
            if (this._wrapped) {
                return;
            }

            //берём опции из разметки элемента, делаем приведение и проверку типов
            var confFromElement = croc.ui.Widget.getConfFromElement(this.__el);
            var optionsDesc = this.constructor.config.options;

            _.forOwn(confFromElement, function(value, optionName) {
                var option = optionsDesc[optionName];
                if (!option) {
                    if (!this.$$compatibilityMode) {
                        throw new Error('Из разметки была передана неверная опция: ' +
                        this.constructor.classname + '#' + optionName);
                    }
                }
                else if (option.type || option.check) {
                    value = croc.ui.Widget.__castOption(option, value);
                    croc.Class.checkType(option, value, true, this.constructor.classname, option.name);
                }

                options[optionName] = value;

                if (this.$$optionsToProperty && this.$$optionsToProperty[optionName]) {
                    this.setProperty(typeof option.property === 'string' ? option.property : option.name, value);
                }

                delete this.$$missedRequiredOptions[optionName];
            }, this);
        },

        /**
         * @private
         */
        __initializeProperties: function() {
            var options = this._options;

            //назначаем класс js-widget
            this.__el.addClass('js-widget');
            if (this.__wrapperEl !== this.__el) {
                this.__wrapperEl.addClass('js-wrapper');
            }

            this.__initializeOptions();

            //назначаем свойства и опции из css-классов
            if (this.$$propertiesToClass) {
                _.forOwn(this.$$propertiesToClass, function(prop, propName) {
                    var value = croc.utils.domGetModifier(this.__el,
                        typeof prop.cssClass === 'string' ? prop.cssClass : propName);
                    if (value) {
                        this[prop.setterName](value);
                        if (this.$$propertiesToOptions && this.$$propertiesToOptions[propName]) {
                            options[this.$$propertiesToOptions[propName].name] = value;
                        }
                    }
                }, this);
            }

            if (!this._wrapped) {
                if (!options.width) {
                    options.width = this.__el.width();
                    this.__widthGotFromEl = true;
                }

                if (this.__el.data('configure')) {
                    options.configure[this.__el.data('configure')](this, options);
                }
            }
        },

        /**
         * todo перенести сюда width
         * @param {jQuery} el
         * @private
         */
        __initStyles: function(el) {
            if (this.__widgetStylesInited) {
                return;
            }

            if (!this.__htmlGenerated) {
                if (this._options.style) {
                    el.css(this._options.style);
                }

                if (this.$$propertiesToClass) {
                    _.forOwn(this.$$propertiesToClass, function(prop) {
                        var value;
                        if (prop.forceCssClass && (value = this[prop.getterName]())) {
                            el.addClass(this.__getPropCssClassValue(value, prop));
                        }
                    }, this);
                }
            }

            this.__widgetStylesInited = true;
        }
    },

    onClassCreate: function(Cls) {
        var config = Cls.config;
        var baseCls = Cls.baseclass;
        if (config.properties) {
            var propertiesToClass = {};
            _.forOwn(config.properties, function(prop, propName) {
                if (prop.cssClass) {
                    var oldApply = (prop.apply && prop.apply.$$source) || prop.apply;
                    prop.apply = function(value, oldValue) {
                        if (oldApply) {
                            (typeof oldApply === 'string' ? this[oldApply] : oldApply).apply(this, arguments);
                        }
                        if (this.__el) {
                            if (oldValue) {
                                this.__el.removeClass(this.__getPropCssClassValue(oldValue, prop));
                            }
                            if (value) {
                                this.__el.addClass(this.__getPropCssClassValue(value, prop));
                            }
                        }
                    };
                    prop.apply.$$source = oldApply;
                    propertiesToClass[propName] = prop;
                }
            });

            if (Object.keys(propertiesToClass).length) {
                Cls.prototype.$$propertiesToClass = baseCls && baseCls.prototype.$$propertiesToClass ?
                    _.assign({}, baseCls.prototype.$$propertiesToClass, propertiesToClass) : propertiesToClass;
            }
        }

        //todo убрать (compatibility mode)
        if (Cls.classname && Cls.config.type !== 'abstract') {
            croc.ui.WidgetsManager.getInstance().registerAlias(Cls, Cls.classname);
        }
    }
});
},{}],26:[function(require,module,exports){
/**
 * Менеджер виджетов
 */
croc.Class.define('croc.ui.WidgetsManager', {
    extend: croc.Object,

    statics: {
        /**
         * @returns {croc.ui.WidgetsManager}
         * @static
         */
        getInstance: function() {
            return this.__instance || (this.__instance = new croc.ui.WidgetsManager());
        },

        /**
         * Возвращает глобальный виджет текущей страницы
         * @returns {croc.ui.Widget}
         */
        getPageWidget: function() {
            return this.getInstance().getPageWidget();
        }
    },

    events: {
        /**
         * @param {croc.Object} component
         */
        visualComponentRegistered: null,

        /**
         * @param {croc.ui.Widget} widget
         */
        widgetRegistered: null,

        /**
         * @param {croc.ui.Widget} widget
         */
        widgetUnregistered: null
    },

    construct: function(options) {
        this.__types = {};
        this.__typeToXtype = {};
        this.__widgets = {};

        croc.ui.WidgetsManager.superclass.__construct__.apply(this, arguments);
    },

    members: {
        /**
         * Возвращает глобальный виджет текущей страницы
         * @returns {croc.ui.Widget}
         */
        getPageWidget: function() {
            return this.__pageWidget &&!this.__pageWidget.isDisposed() ? this.__pageWidget :
                (this.__pageWidget = new croc.ui.Container({el: $(document.body)}));
        },

        /**
         * Возвращает тип виждета по его имени. Если виджет не зарегистрирован, то бросает ошибку.
         * @param {string|Function} xtype
         * @returns {function}
         * @static
         */
        getWidgetType: function(xtype) {
            if (typeof xtype === 'function') {
                return xtype;
            }

            var widget = this.__types[xtype];
            if (!widget) {
                throw new Error('Запрошен незарегистрированный тип виджета по xtype "' + xtype + '"');
            }
            return widget;
        },

        /**
         * Возвращает все виджеты зарегистрированные в данный момент
         * @returns {Array.<croc.ui.Widget>}
         */
        getWidgets: function() {
            return _.values(this.__widgets);
        },

        /**
         * Получить xtype по типу виджета
         * @param {Function} type
         * @returns {string}
         * @static
         */
        getXType: function(type) {
            return type.classname || this.__typeToXtype[croc.utils.objUniqueId(type)];
        },

        /**
         * регистрация типа виджета по его имени
         * @param {function} type
         * @param {string} xtype
         * @static
         */
        registerAlias: function(type, xtype) {
            this.__types[xtype] = type;
            this.__typeToXtype[croc.utils.objUniqueId(type)] = xtype;
        },

        /**
         * Регистрация визуального компонента (временный костыль, пока не все компоненты являются виджетами)
         * @param {croc.Object} component
         */
        registerVisualComponent: function(component) {
            this.fireEvent('visualComponentRegistered', component);
        },

        /**
         * Регистрация виджета при его инициализации
         * @param {croc.ui.Widget} widget
         */
        registerWidget: function(widget) {
            this.__widgets[widget.getUniqueId()] = widget;
            this.fireEvent('widgetRegistered', widget);
        },

        /**
         * Прекращение регистрации виджета
         * @param {croc.ui.Widget} widget
         */
        unregisterWidget: function(widget) {
            delete this.__widgets[widget.getUniqueId()];
            this.fireEvent('widgetUnregistered', widget);
        }
    }
});

},{}],27:[function(require,module,exports){
/**
 * Всплывающий элемент
 */
croc.Interface.define('croc.ui.common.bubble.IBubble', {
    extend: croc.ui.IWidget,

    properties: {
        /**
         * Смещение по горизонтали относительно центра цели
         * @type {string}
         */
        hAlign: {
            check: ['left', 'centerLeft', 'center', 'centerRight', 'right']
        },

        /**
         * Обновлять позицию по таймауту
         * @type {boolean}
         */
        keepActualPosition: {
            type: 'boolean'
        },

        /**
         * Смещение bubble относительно target
         * число - смещение по горизонтали/вертикали
         * массив - вектор смещения
         * @type {number}
         */
        offset: {
            type: ['number', 'array']
        },

        /**
         * Открыт ли в данный момент тултип
         * @type {boolean}
         */
        open: {
            type: 'boolean'
        },

        /**
         * Расположение относительно target
         * @type {string}
         */
        position: {
            check: ['top', 'bottom', 'left', 'right', 'center']
        },

        /**
         * Объект крепления bubble. Может быть коллекцией dom-элементов, виджетом, точкой на экране (массив [x, y]),
         * прямоугольником (массив [[x1, y1], [x2, y2]]), функция - которая возвращает значение одного из предыдущих
         * типов
         * @type {jQuery|croc.ui.Widget|Array|function}
         */
        target: {},

        /**
         * Смещение по вертикали относительно центра цели
         * @type {string}
         */
        vAlign: {
            check: ['top', 'middleTop', 'middle', 'middleBottom', 'bottom']
        }
    },

    members: {
        /**
         * Скрыть bubble
         * @param {boolean} [quick=false] закрыть без анимации
         */
        close: function(quick) {},

        /**
         * Закрыть bubble по прошествию указанного промежутка времени
         * @param {number} timeout
         */
        closeIn: function(timeout) {},

        /**
         * Возвращает текущую позицию тултипа (совпадает с #getPosition() если автопозиционирование отключено)
         * @returns {string}
         */
        getCurrentPosition: function() {},

        /**
         * Возвращает элемент, на котором в данный момент был открыт bubble
         * @returns {jQuery|Array}
         */
        getCurrentTarget: function() {},

        /**
         * Слой, на котором лежит bubble
         * @returns {string}
         */
        getZIndexLayer: function() {},

        /**
         * Показать bubble. Если тултип был открыт, то возвращает true.
         * @returns {boolean}
         */
        open: function() {},

        /**
         * Пересчитать позицию
         */
        reposition: function() {},

        /**
         * Прекратить отсчёт времени до закрытия bubble
         */
        stopCloseTimeout: function() {}
    }
});

},{}],28:[function(require,module,exports){
/**
 * Миксин добавляет свойство всплывающего элемента виджету. Изменение любых свойств позиционирования не приводит к
 * эффекту до вызова метода reposition.
 * Не забудьте вызывать метод {@link croc.ui.common.bubble.MBubble#_onPropertiesInitialized}
 * @marker js-bubble-close закрыть bubble
 */
croc.Mixin.define('croc.ui.common.bubble.MBubble', {
    statics: {
        /**
         * @private
         * @static
         */
        __ANIMATION_DURATION: 200,

        /**
         * @private
         * @static
         */
        __BUBBLE_SELECTOR: '.js-bubble, .b-popup, .b-tooltip',

        /**
         * @private
         * @static
         */
        __FLY_OFFSET: 50
    },

    events: {
        /**
         * Возбуждается перед каждым открытием bubble.
         * @param {jQuery|croc.ui.Widget|Array|function} target целевой объект, на котором соверешена попытка открыть bubble
         * @param {function} prevent вызов этой функции отменяет открытие bubble
         */
        beforeOpen: null,

        /**
         * Возбуждается до вычисления параметров позиционирования для конкретной позиции
         */
        beforePosition: null,

        /**
         * Возбуждается после вычисления параметров позиционирования, но до их применения
         * @param {Object} css
         * @param {Object} jointCss
         * @param {function} prevent
         */
        beforePositionApply: null,

        /**
         * bubble был закрыт (возбуждается только после анимации сокрытия)
         */
        close: null,

        /**
         * bubble был открыт
         */
        open: null
    },

    properties: {
        /**
         * Смещение по горизонтали относительно центра цели
         * @type {string}
         */
        hAlign: {
            check: ['left', 'centerLeft', 'center', 'centerRight', 'right'],
            value: 'center',
            option: true
        },

        /**
         * Обновлять позицию по таймауту
         * @type {boolean}
         */
        keepActualPosition: {
            type: 'boolean',
            value: false,
            apply: '__applyKeepActualPosition',
            option: true
        },

        /**
         * Смещение bubble относительно target
         * число - смещение по горизонтали/вертикали
         * массив - вектор смещения
         * @type {number|Array.<number>}
         */
        offset: {
            type: ['number', 'array'],
            option: true
        },

        /**
         * Открыт ли в данный момент тултип. true если bubble виден и нет анимации закрытия в данный момент
         * @type {boolean}
         */
        open: {
            type: 'boolean',
            value: false,
            __setter: null,
            event: true
        },

        /**
         * Расположение относительно target
         * @type {string}
         */
        position: {
            check: ['top', 'bottom', 'left', 'right', 'center'],
            option: true
        },

        /**
         * Позиционирование бабла внутри таргета
         * @type {boolean}
         */
        positionInset: {
            type: 'boolean',
            value: false,
            option: true
        },

        /**
         * Объект крепления bubble. Может быть коллекцией dom-элементов, виджетом, точкой на экране (массив [x, y]),
         * прямоугольником (массив [[x1, y1], [x2, y2]]), функция - которая возвращает значение одного из предыдущих
         * типов
         * @type {jQuery|croc.ui.Widget|Array|function}
         */
        target: {
            option: true
        },

        /**
         * Смещение по вертикали относительно центра цели
         * @type {string}
         */
        vAlign: {
            check: ['top', 'middleTop', 'middle', 'middleBottom', 'bottom'],
            value: 'middle',
            option: true
        },

        /**
         * @private
         */
        closing: {
            value: false,
            __getter: null,
            __setter: null,
            event: true
        }
    },

    options: {
        /**
         * Флаг, закрывать ли bubble через некоторый таймаут после открытия
         * @type {boolean}
         */
        autoClose: false,

        /**
         * Таймаут через который должен быть закрыт bubble
         * @type {number}
         */
        autoCloseTimeout: {
            type: 'number',
            value: 1000
        },

        /**
         * Автоматическое позиционирование bubble исходя из положения на экране
         * @type {boolean}
         */
        autoPositioning: false,

        /**
         * Порядок, в котором подбирается подходящая позиция при автопозиционировании
         * @type {Array|Object}
         */
        autoPositioningSequence: {
            value: ['top', 'right', 'bottom', 'left']
        },

        /**
         * Можно ли смещать элемент
         * @type {boolean}
         */
        autoShift: true,

        /**
         * Размер относительно размера target
         * @type {boolean}
         */
        autoSize: false,

        /**
         * Как устанавливается размер (minWidth, maxWidth или width)
         * @type {boolean}
         */
        autoSizeKind: {
            check: ['min', 'max']
        },

        /**
         * Отличие от размера target, зазор между краем target и краем bubble
         */
        autoSizeGap: {
            type: ['number', 'array'],
            value: 0
        },

        /**
         * Флаг, закрывать ли bubble на клик по документу
         * @type {boolean}
         */
        closeOnHtmlClick: false,

        /**
         * Флаг, закрывать ли bubble при ресайзе окна
         * @type {boolean}
         */
        closeOnResize: false,

        /**
         * Флаг, закрывать ли bubble при скролле
         * @type {boolean}
         */
        closeOnScroll: false,

        /**
         * Управляющий виджет. При его разрушении - разрушается bubble. По-умолчанию выводится на основе target.
         * @type {croc.ui.Widget}
         */
        controlWidget: {
            type: croc.ui.Widget
        },

        /**
         * Разрушение после первого закрытия
         * @type {boolean}
         */
        destroyOnClose: false,

        /**
         * Флаг, позиционировать ли bubble при ресайзе/скролле
         * @type {boolean}
         */
        dynamicPositioning: false,

        /**
         * Запретить любое выравнивание bubble
         * @type {boolean}
         */
        forbidPositioning: false,

        /**
         * Анимация сокрытия
         * @type {string}
         */
        hideAnimation: {
            check: ['fade', 'fly']
        },

        /**
         * Метод сокрытия виджета при изменении свойства {@link #shown}.
         * @type {string}
         */
        hideMethod: 'detach',

        /**
         * Менеджер всплывающих элементов (или его имя), который будет отвечать за данный. Если передан объект, то
         * его поле name будет интерпретировано как имя менеджера, а остальные поля как его конфигурация.
         * @type {string|croc.ui.common.bubble.Manager|Object}
         */
        manager: null,

        /**
         * Элемент или виджет, который необходимо связать с bubble связью "opener->плавающий элемент"
         * {@see croc.utils.domLinkElementToOpener}
         * @type {jQuery|croc.ui.Widget}
         */
        opener: {
            type: [jQuery, croc.ui.Widget]
        },

        /**
         * Элемент-контейнер виджета. Передаётся если разметка виджета должна быть создана динамически.
         * @type {string|Element|jQuery}
         */
        renderTo: 'body',

        /**
         * Расстояние от края bubble до соответствующего края target
         * @type {number}
         */
        sourceDistance: 0,

        /**
         * Анимация всплывания
         * @type {string}
         */
        showAnimation: {
            check: ['fade', 'fly']
        },

        /**
         * Виден ли виджет после его рендеринга
         * @type {boolean}
         */
        shown: false,

        /**
         * Дополнительные классы для корневого элемента
         * @type {Array.<string>}
         */
        _addClasses: ['js-bubble'],

        /**
         * Расстояние от края bubble до центра target при выравнивании относительно центра
         * @type {number}
         */
        _alignGap: 0,

        /**
         * Минимально возможное пересечение target и bubble при смещении во время автопозиционирования
         * @type {number}
         */
        _minIntersection: 0,

        /**
         * При позиционировании не задавать положение левого края элемента
         */
        _skipElementLeft: false,

        /**
         * При позиционировании не задавать положение верхнего края элемента
         */
        _skipElementTop: false,

        /**
         * Минимальное расстояние от края экрана до ближайшего края bubble при автопозиционировании
         * @type {Array.<number>|function(croc.ui.common.bubble.MBubble):Array.<number>}
         */
        _screenGap: [0, 0, 0, 0],

        /**
         * По-умолчанию ставить zIndex верхнего слоя
         * @type {boolean}
         */
        _upperZIndexLayer: false
    },

    preConstruct: function(options) {
        this.__currentPosition = null;
        this.__animationDuration = croc.ui.common.bubble.MBubble.__ANIMATION_DURATION;

        this.__showDisposer = new croc.util.Disposer();
        this.__openDisposer = new croc.util.Disposer();
        this._getDisposer().addCallback(function() {
            this.__showDisposer.disposeAll();
            this.__openDisposer.disposeAll();
        }, this);

        this.once('changeRendered', this.__onBubbleRendered, this);

        this.on('appear', function() {
            this.reposition();
            this.__repositionedOnAppear = true;
        }, this);

        this.on('resize', function(reason) {
            if (reason !== 'reposition') {
                this.reposition();
            }
        }, this);
    },

    construct: function() {
        croc.Object.multiBind(
            this, 'shown',
            this, '__closing',
            this, '__open',
            function(shown, closing) {
                return shown && !closing;
            });
    },

    members: {
        /**
         * Скрыть bubble
         * @param {boolean} [quick=false] закрыть без анимации
         */
        close: function(quick) {
            if (Stm.env.freezeBubbles) {
                return;
            }
            if (!this.getRendered()) {
                this._openOnRender = false;
                return;
            }

            if (!this.getShown() || (!quick && this.__getClosing())) {
                return;
            }
            this.__opening = false;
            this.__setClosing(false);

            var hideAnimation = !quick && this._options.hideAnimation;
            var element = this.getWrapperElement();

            if (hideAnimation) {
                this.__setClosing(true);
                switch (hideAnimation) {
                    case 'fade':
                        element.stop(true).animate({
                            opacity: 0
                        }, this.__animationDuration, function() {
                            this.setShown(false);
                            this.__setClosing(false);
                        }.bind(this));
                        break;

                    case 'fly':
                        this.__hideFlyAnimation();
                        break;
                }
            }
            else {
                element.stop(true);
                this.setShown(false);
            }

            this.__openDisposer.disposeAll();
            this.__currentPosition = null;
            this.__currentTarget = null;
        },

        /**
         * Закрыть bubble по прошествию указанного промежутка времени
         * @param {number} [timeout]
         */
        closeIn: function(timeout) {
            this.startCloseTimeout(timeout);
        },

        /**
         * Возвращает текущую позицию bubble (совпадает с #getPosition() если автопозиционирование отключено)
         * @returns {string}
         */
        getCurrentPosition: function() {
            return this.__currentPosition || this.getPosition();
        },

        /**
         * Возвращает элемент, на котором в данный момент был открыт bubble
         * @param {boolean} [elementOnly=false]
         * @returns {jQuery|Array}
         */
        getCurrentTarget: function(elementOnly) {
            return this.__currentTarget && elementOnly && !(this.__currentTarget instanceof jQuery) ? null :
                this.__currentTarget;
        },

        /**
         * Слой, на котором лежит bubble
         * @returns {string}
         */
        getZIndexLayer: function() {
            return this.__zIndexLayer;
        },

        /**
         * Показать bubble. Если тултип был открыт, то возвращает true.
         * @returns {boolean}
         */
        open: function() {
            if (!this.getRendered()) {
                this._openOnRender = _.toArray(arguments);
                return false;
            }

            if (!this.getTarget()) {
                return false;
            }

            var dontOpen = false;
            var preventOpen = function() {dontOpen = true;};
            this.__resolveTarget(true);
            this.fireEvent('beforeOpen', this.getTarget(), preventOpen);
            if (dontOpen) {
                this.__currentTarget = null;
                this._getOpenDisposer().disposeAll();
                this._getShowDisposer().disposeAll();
                return false;
            }

            var showAnimation = this._options.showAnimation;
            var element = this.getWrapperElement();

            if (showAnimation) {
                element.css('opacity', 0);
            }

            element.css({visibility: 'hidden', left: 0, top: 0});

            this.__repositionedOnAppear = false;
            this.setShown(true);
            if (!this.__repositionedOnAppear) {
                this.reposition();
            }

            element.css('visibility', '');

            this.__setClosing(false);
            this.fireEvent('open');

            //animate
            if (showAnimation) {
                this.__showAnimation(showAnimation);
            }
            else {
                element.css('opacity', 1);
                element.stop(true);
            }

            this.startCloseTimeout();

            return true;
        },

        /**
         * Пересчитать позицию
         */
        reposition: function() {
            if (!this.getShown() || this._options.forbidPositioning) {
                return;
            }

            var curPos = this.__currentPosition = this.getPosition();
            var options = this._options;

            if (typeof options._screenGap === 'function') {
                options._screenGap = options._screenGap(this);
            }

            var sequence = options.autoPositioning ? options.autoPositioningSequence : [curPos];
            if (!Array.isArray(sequence)) {
                if (sequence[curPos]) {
                    sequence = [curPos].concat(sequence[curPos]);
                }
                else {
                    sequence = sequence.other;
                }
            }

            var minIntersection = options._minIntersection;
            var element = this.getElement();
            var resultOffset = {};
            var jointElCss;

            //лучшая из рассмотренных позиций по процентному соотношению: видимая площадь bubble к общей площади
            var bestPosition = null;
            var bestPositionValue = 0;

            /**
             * Смещаем тултип влево, чтобы он принял правильную ширину
             */
            if (!options._skipElementLeft) {
                element.css('left', 0);
            }

            //проходим по всем позициям из autoPositioningSequence и вычисляем наилучшую позицию для bubble
            //при position == left или right - главная ось X, вторая ось Y
            //при position == top или bottom - главная ось Y, вторая ось X
            for (var i = 0; i <= sequence.length; ++i) {
                var lastPos = i === sequence.length || !options.autoPositioning;
                if (lastPos && options.autoPositioning && bestPosition) {
                    //для последнего шага мы берём лучшую из ранее вычисленных позиций
                    curPos = this.__currentPosition = bestPosition;
                }
                else if (i > 0) {
                    //берём следующую позицию для рассмотрения
                    curPos = this.__currentPosition = sequence[sequence.indexOf(curPos) + 1] || sequence[0];
                }
                else if (options.autoPositioning && sequence.indexOf(curPos) === -1) {
                    curPos = this.__currentPosition = sequence[0];
                }

                jointElCss = {left: '', top: ''};

                this.fireEvent('beforePosition');

                //todo optimize здесь можно оптимизировать
                var target = this.__resolveTarget();

                //переменная содержит потенциальное значение для bestPositionValue. Если переменная отлична от null
                //значит для данной позиции bubble не вмещается на экран полностью.
                var continueWith = 1;
                var isCenter = curPos === 'center';
                var leftOrRight = curPos === 'left' || curPos === 'right';
                var inset = this.getPositionInset();

                //расстояние от края target до края bubble
                var distance = this.getOffset() || 0;
                //смещение target относительно bubble
                var secondDistance = 0;
                if (Array.isArray(distance)) {
                    secondDistance = distance[1];
                    distance = distance[0];
                }

                //вычисляем размер bubble
                this.__repositionAutoSize(options, isCenter, leftOrRight, target);
                var elHeight = element.outerHeight();
                var elWidth = element.outerWidth();

                //позиционируем bubble по главной оси
                switch (curPos) {
                    case 'top':
                        resultOffset.top = target.top - distance - options.sourceDistance - elHeight;
                        if (inset) {
                            resultOffset.top += target.height;
                        }
                        break;

                    case 'bottom':
                        resultOffset.top = target.top + target.height + distance + options.sourceDistance;
                        if (inset) {
                            resultOffset.top -= target.height;
                        }
                        break;

                    case 'left':
                        resultOffset.left = target.left - distance - options.sourceDistance - elWidth;
                        if (inset) {
                            resultOffset.left += target.width;
                        }
                        break;

                    case 'right':
                        resultOffset.left = target.left + target.width + distance + options.sourceDistance;
                        if (inset) {
                            resultOffset.left -= target.width;
                        }
                        break;

                    case 'center':
                        resultOffset.left = target.left + target.width / 2 - elWidth / 2 + distance;
                        resultOffset.top = target.top + target.height / 2 - elHeight / 2 + secondDistance;
                        if (options.autoShift) {
                            var winOffset = this.__getWindowOffset();
                            resultOffset.left = Math.max(winOffset.left + options._screenGap[3], resultOffset.left);
                            resultOffset.top = Math.max(winOffset.top + options._screenGap[0], resultOffset.top);
                        }

                        //todo здесь потенциально может быть ошибка, если !options.autoShift
                        var elParent = element.parent();
                        if (elParent[0] !== document.body) {
                            resultOffset.left =
                                Math.max(resultOffset.left - croc.utils.domNumericCss(elParent, 'paddingLeft'), 0);
                            resultOffset.top =
                                Math.max(resultOffset.top - croc.utils.domNumericCss(elParent, 'paddingTop'), 0);
                        }

                        break;
                }

                if (curPos === 'center') {
                    break;
                }

                //позиционируем bubble по второй оси
                if (!leftOrRight) {
                    resultOffset.left = this.getHAlign() === 'left' ? target.left :
                        this.getHAlign() === 'right' ? target.left + target.width - elWidth :
                        target.left + target.width / 2 - elWidth / 2;
                    resultOffset.left += secondDistance;
                }
                else {
                    resultOffset.top = this.getVAlign() === 'top' ? target.top :
                        this.getVAlign() === 'bottom' ? target.top + target.height - elHeight :
                        target.top + target.height / 2 - elHeight / 2;
                    resultOffset.top += secondDistance;
                }

                //позиционируем стрелку
                jointElCss = {
                    left: leftOrRight ? '' :
                        this.getHAlign() === 'right' ?
                            Math.min(Math.max(elWidth - target.width / 2, minIntersection),
                                elWidth - minIntersection) :
                            this.getHAlign() === 'left' ?
                                Math.max(Math.min(target.width / 2, elWidth - minIntersection), minIntersection) :
                            elWidth / 2,
                    top: !leftOrRight ? '' :
                        this.getVAlign() === 'bottom' ?
                            Math.min(Math.max(elHeight - target.height / 2, minIntersection),
                                elHeight - minIntersection) :
                            this.getVAlign() === 'top' ?
                                Math.max(Math.min(target.height / 2, elHeight - minIntersection), minIntersection) :
                            elHeight / 2
                };

                var shift = this.__getAlignShift(elWidth, elHeight);

                //проверяем вмещается ли bubble на экран полностью.
                //Если он не вмещается по главной оси, то мы рассмотрим следующую позицию позже.
                //Если он не вмещается по второй оси, то назначаем смещение (shift) достаточное для того, чтобы вместить его
                //либо если это невозможно, то рассмотрим следующую позицию позже
                var winWidth = $(window).width() - options._screenGap[1];
                var winHeight = $(window).height() - options._screenGap[2];
                var winOffsetLeft = resultOffset.left + (leftOrRight ? 0 : shift) - $(window).scrollLeft();
                var winOffsetTop = resultOffset.top + (leftOrRight ? shift : 0) - $(window).scrollTop();

                if (winOffsetLeft < options._screenGap[3]) {
                    if (!leftOrRight && options.autoShift) {
                        shift += options._screenGap[3] - winOffsetLeft;
                    }
                    else if ((!leftOrRight || curPos === 'left') && !lastPos) {
                        continueWith *= (elWidth - options._screenGap[3] + winOffsetLeft) / elWidth;
                    }
                }
                else if (winOffsetLeft + elWidth > winWidth) {
                    if (!leftOrRight && options.autoShift) {
                        shift += winWidth - (winOffsetLeft + elWidth);
                    }
                    else if ((!leftOrRight || curPos === 'right') && !lastPos) {
                        continueWith *= (winWidth - winOffsetLeft) / elWidth;
                    }
                }

                if (winOffsetTop < options._screenGap[0]) {
                    if (leftOrRight && options.autoShift) {
                        shift += options._screenGap[0] - winOffsetTop;
                    }
                    else if ((leftOrRight || curPos === 'top') && !lastPos) {
                        continueWith *= (elHeight - options._screenGap[0] + winOffsetTop) / elHeight;
                    }
                }
                else if (winOffsetTop + elHeight > winHeight) {
                    if (leftOrRight && options.autoShift) {
                        shift += winHeight - (winOffsetTop + elHeight);
                    }
                    else if ((leftOrRight || curPos === 'bottom') && !lastPos) {
                        continueWith *= (winHeight - winOffsetTop) / elHeight;
                    }
                }
                //

                //Если из-за смещения (shift) target и bubble перестают пересекаться по второй оси, то рассматриваем
                //следующую позицию. Иначе - задаём css-стили для точки крепления (если она есть).
                if (shift) {
                    if (!leftOrRight) {
                        resultOffset.left += shift;

                        if (resultOffset.left + minIntersection > target.left + target.width ||
                            resultOffset.left + elWidth - minIntersection < target.left) {
                            if (lastPos) {
                                resultOffset.left = Math.max(
                                    Math.min(resultOffset.left, target.left + target.width - minIntersection),
                                    target.left + minIntersection - elWidth
                                );
                            }
                            else {
                                continue;
                            }
                        }

                        jointElCss = {
                            left: Math.max(
                                minIntersection,
                                Math.min(elWidth - minIntersection, jointElCss.left - shift)
                            ),
                            top: ''
                        };
                    }
                    else {
                        resultOffset.top += shift;

                        if (resultOffset.top + minIntersection > target.top + target.height ||
                            resultOffset.top + elHeight - minIntersection < target.top) {
                            if (lastPos) {
                                resultOffset.top = Math.max(
                                    Math.min(resultOffset.top, target.top + target.height - minIntersection),
                                    target.top + minIntersection - elHeight
                                );
                            }
                            else {
                                continue;
                            }
                        }

                        jointElCss = {
                            left: '',
                            top: Math.max(
                                minIntersection,
                                Math.min(elHeight - minIntersection, jointElCss.top - shift)
                            )
                        };
                    }
                }

                if (options.autoPositioning && continueWith !== 1) {
                    if (continueWith > bestPositionValue) {
                        bestPosition = curPos;
                        bestPositionValue = continueWith;
                    }
                }
                else {
                    break;
                }
            }

            this._setZIndex();

            if (options._skipElementLeft) {
                delete resultOffset.left;
            }
            if (options._skipElementTop) {
                delete resultOffset.top;
            }

            var prevented = false;
            this.fireEvent('beforePositionApply', resultOffset, jointElCss, function() { prevented = true; });
            if (prevented) {
                return;
            }

            element.css(resultOffset);
            var jointEl = this._getJointEl();
            if (jointEl) {
                jointEl.css(jointElCss);
            }

            if (!this.__opener) {
                var hostElements = this._getHostElements();
                if (hostElements) {
                    croc.utils.domLinkElementToOpener(this.getElement(), this._getHostElements());
                }
            }

            this.onResize('reposition');
        },

        /**
         * Открыть/закрыть bubble
         * @param open
         */
        setOpen: function(open) {
            if (this.getOpen() !== open) {
                if (open) {
                    this.open();
                }
                else {
                    this.close();
                }
            }
        },

        /**
         * Запустить таймер автозакрытия
         * @param {number} [timeout]
         */
        startCloseTimeout: function(timeout) {
            if (this._options.autoClose || timeout) {
                this.stopCloseTimeout();
                this.__closeTimeout = this.__showDisposer.setTimeout(function() {
                    this.__closeTimeout = null;
                    this.close();
                }.bind(this), timeout || this._options.autoCloseTimeout);
            }
        },

        /**
         * Остановить таймер автозакрытия
         */
        stopCloseTimeout: function() {
            if (this.__closeTimeout) {
                this.__closeTimeout.remove();
                this.__closeTimeout = null;
            }
        },

        /**
         * Элемент отвечающий за размеры bubble
         * @returns {jQuery}
         * @protected
         */
        _getSizeableElement: function() {
            return this.getElement();
        },

        /**
         * Возвращает коллекцию элементов, к которым в данный момент прикреплён bubble
         * @returns {jQuery}
         * @protected
         */
        _getHostElements: function() {
            return this.__currentTarget instanceof jQuery ? this.__currentTarget : null;
        },

        /**
         * Возвращает элемент точки крепления. Например, стрелка тултипа.
         * @returns {jQuery}
         * @protected
         */
        _getJointEl: function() {
            return null;
        },

        /**
         * Disposer, который очищается при попытке закрыть bubble
         * @returns {croc.util.Disposer}
         * @protected
         */
        _getOpenDisposer: function() {
            return this.__openDisposer;
        },

        /**
         * Disposer, который очищается, когда bubble становится невидимым
         * @returns {croc.util.Disposer}
         * @protected
         */
        _getShowDisposer: function() {
            return this.__showDisposer;
        },

        /**
         * Стоит ли закрывать bubble после клика по данному элементу
         * @param {jQuery} targetEl
         * @returns {boolean}
         * @protected
         */
        _isClosingOnHtmlClickAllowed: function(targetEl) {
            return !croc.utils.domIsElementOpenerOf(this.getElement(), targetEl) &&
                (!targetEl.closest(this.getElement()).length);
        },

        /**
         * Выполняется когда свойства виджета уже инициализированы
         * @param {Object} options
         * @protected
         */
        _onPropertiesInitialized: function(options) {
            this.__opener = options.opener;
            var targetEl = this.__getTargetEl();

            if (!options.controlWidget && targetEl) {
                options.controlWidget = croc.ui.Widget.getClosestWidget(targetEl);
            }

            if (options.opener &&
                (!options.controlWidget || options.controlWidget === croc.ui.WidgetsManager.getPageWidget())) {
                options.controlWidget = (options.opener instanceof croc.ui.Widget) ?
                    options.opener : croc.ui.Widget.getClosestWidget(options.opener);
            }
            else if (!options.controlWidget) {
                options.controlWidget = croc.ui.WidgetsManager.getPageWidget();
            }

            if (options.controlWidget) {
                this._getDisposer().addListener(options.controlWidget, 'dispose', function() {
                    this.destroy();
                }, this);
            }

            //close on parent bubble close
            var placeEl = targetEl || (options.opener ?
                    croc.ui.Widget.resolveElement(options.opener) :
                options.controlWidget && options.controlWidget.getElement());

            if (placeEl) {
                var parentBubbleEl = placeEl.closest('.js-bubble');
                var parentBubble = parentBubbleEl.length && croc.ui.Widget.getByElement(parentBubbleEl);
                if (parentBubble) {
                    this._getDisposer().addListener(parentBubble, 'changeOpen', function(open) {
                        if (!open) {
                            this.close(true);
                        }
                    }, this);
                }
            }

            if (options.manager) {
                var manager;
                if (typeof options.manager === 'string') {
                    manager = croc.ui.common.bubble.Manager.getInstance(options.manager);
                }
                else if (options.manager instanceof croc.ui.common.bubble.Manager) {
                    manager = options.manager;
                }
                else {
                    var name = options.manager.name;
                    delete options.manager.name;
                    manager = croc.ui.common.bubble.Manager.getInstance(name, options.manager);
                }

                manager.addItem(this);
            }
        },

        /**
         * Назначить элементу z-index
         * @protected
         */
        _setZIndex: function() {
            var hostElements = this._getHostElements();

            //Берём ближайший к таргету родительский bubble (MBubble или b-tooltip или b-popup)
            var targetBubble = hostElements && hostElements.closest(croc.ui.common.bubble.MBubble.__BUBBLE_SELECTOR);

            //Если bubble есть, то проверяем лежит ли он внутри оверлэя
            var curZIndexTarget;
            if (hostElements || this.__openerEl) {
                var curParent = hostElements ? hostElements.eq(0) : this.__openerEl;
                while ((curParent = curParent.parent()) && curParent.length && curParent[0] !== document.body) {
                    if (!isNaN(_.parseInt(curParent.css('zIndex')))) {
                        curZIndexTarget = curParent;
                    }
                }
            }
            if (!curZIndexTarget) {
                curZIndexTarget = hostElements;
            }

            //Берём z-index у полученного элемента
            var curTargetZIndex = curZIndexTarget &&
                curZIndexTarget instanceof jQuery && !(curZIndexTarget[0] instanceof Window) &&
                _.parseInt(curZIndexTarget.css('zIndex'));
            if (!curTargetZIndex || isNaN(curTargetZIndex)) {
                curTargetZIndex = 0;
            }

            //берём z-index элемента текущего bubble
            var elZIndex = _.parseInt(this.getWrapperElement().css('zIndex'));
            if (!elZIndex || isNaN(elZIndex)) {
                elZIndex = 0;
            }

            //Если z-index не нужно менять, то завершаем метод
            if (this.__zIndexWasSet && hostElements === this.__lastZIndexTarget && elZIndex > curTargetZIndex) {
                return;
            }

            if (this._options._upperZIndexLayer) {
                this.__zIndexLayer = 'popup';
            }
            else if (hostElements && hostElements instanceof jQuery) {
                //если target не лежит внутри какого-либо bubble, то кладём текущий bubble на нижний слой
                if (!targetBubble.length) {
                    this.__zIndexLayer = 'page';
                }
                else {
                    //иначе пытаемся получить виджет targetBubble. Если он также реализует IBubble, узнаём на каком слое
                    //он лежит (getZIndexLayer) и если он лежит на нижнем слое, то кладём текущий bubble также на нижний слой.
                    //Если нет или если он не реализует IBubble, то кладём на верхний слой
                    var bubbleWidget = croc.ui.Widget.getByElement(targetBubble);
                    this.__zIndexLayer =
                        (bubbleWidget && croc.Interface.check(bubbleWidget, 'croc.ui.common.bubble.IBubble') &&
                        bubbleWidget.getZIndexLayer()) || 'popup';
                }
            }
            else {
                //если target отсутствует, то кладём bubble на слой page
                this.__zIndexLayer = 'page';
            }

            this.__lastZIndexTarget = hostElements;
            this.__zIndexWasSet = true;

            //назначаем новый z-index текущему bubble, удостоверяемся, что он больше чем z-index у target
            this.getWrapperElement().css('zIndex',
                Math.max(croc.utils.getZIndex(this.__zIndexLayer), curTargetZIndex + 1));
        },

        /**
         * @param value
         * @private
         */
        __applyKeepActualPosition: function(value) {
            if (value) {
                if (this.getShown()) {
                    this.__keepActualPositionInterval =
                        this.__showDisposer.setInterval(function() {
                            if (!this.__opening && !this.__getClosing()) {
                                this.reposition();
                            }
                        }.bind(this), 15);
                }
            }
            else if (this.__keepActualPositionInterval) {
                this.__keepActualPositionInterval.remove();
                this.__keepActualPositionInterval = null;
            }
        },

        /**
         * @returns {jQuery}
         * @private
         */
        __getTargetEl: function() {
            var target = this.getTarget();
            return !target ? null :
                target instanceof croc.ui.Widget ? target.getElement() :
                    target instanceof jQuery ? target : null;
        },

        /**
         * @private
         */
        __hideFlyAnimation: function() {
            var element = this.getWrapperElement();
            var curPos = !this.__currentPosition || this.__currentPosition === 'center' ? 'top' : this.__currentPosition;
            var animation = {
                opacity: 0
            };

            var axis = curPos === 'left' || curPos === 'right' ? 'left' : 'top';
            var shift = (curPos === 'left' || curPos === 'top' ? -1 : 1) * croc.ui.common.bubble.MBubble.__FLY_OFFSET;
            animation[axis] = parseInt(element.css(axis), 10) + shift;

            element.stop(true).animate(animation, this.__animationDuration, function() {
                this.setShown(false);
                this.__setClosing(false);
            }.bind(this));
        },

        /**
         * @private
         */
        __showAnimation: function(type) {
            this.__opening = true;

            var element = this.getWrapperElement();
            var curPos = !this.__currentPosition || this.__currentPosition === 'center' ? 'top' : this.__currentPosition;
            var animation = {
                opacity: 1
            };

            if (type === 'fly') {
                var axis = curPos === 'left' || curPos === 'right' ? 'left' : 'top';
                var shift = (curPos === 'left' || curPos === 'top' ? -1 : 1) * croc.ui.common.bubble.MBubble.__FLY_OFFSET;
                var old = parseInt(element.css(axis), 10);
                element.css(axis, old + shift);
                animation[axis] = old;
            }

            element.stop(true).animate(animation, this.__animationDuration, function() {
                this.__opening = false;
            }.bind(this));
        },

        /**
         * @param elWidth
         * @param elHeight
         * @returns {number}
         * @private
         */
        __getAlignShift: function(elWidth, elHeight) {
            if (this.__currentPosition === 'center') {
                return 0;
            }

            var options = this._options;
            var leftOrRight = this.__currentPosition === 'left' || this.__currentPosition === 'right';
            var align = leftOrRight ? this.getVAlign() : this.getHAlign();
            if (['top', 'left', 'bottom', 'right', 'center', 'middle'].indexOf(align) !== -1 ||
                elHeight < options._alignGap * 2) {
                return 0;
            }

            var elLength = leftOrRight ? elHeight : elWidth;
            var shift = elLength / 2 - options._alignGap;
            if (align === 'centerLeft' || align === 'middleTop') {
                shift = -shift;
            }

            return shift;
        },

        /**
         * @returns {{left: number, top: number}}
         * @private
         */
        __getWindowOffset: function() {
            var win = $(window);
            return this.getElement().closest('.b-overlay').length ?
            {left: 0, top: 0} : {left: win.scrollLeft(), top: win.scrollTop()};
        },

        /**
         * @private
         */
        __onBubbleRendered: function() {
            if (this.__opener) {
                this.__openerEl = this.__opener instanceof croc.ui.Widget ? this.__opener.getElement() : this.__opener;
                croc.utils.domLinkElementToOpener(this.getElement(), this.__openerEl);
            }

            //hide/show processing
            this.on('changeShown', function(shown) {
                if (shown) {
                    this.__onShow();
                }
                else {
                    this.__zIndexWasSet = false;
                    this.__showDisposer.disposeAll();
                    this.fireEvent('close');
                }
            }, this);
            if (this.getShown()) {
                this.__onShow();
            }

            //closing
            this.getElement().on('keydown', function(e) {
                if (e.keyCode === 27/*ESCAPE*/) {
                    this.close();
                }
            }.bind(this));
            this.getElement().on('click', '.js-bubble-close', function() {
                this.close();
            }.bind(this));

            //autoclose
            this.getElement().hover(function() {
                this.stopCloseTimeout();
            }.bind(this), function() {
                this.startCloseTimeout();
            }.bind(this));

            //open on demand
            if (this._openOnRender && !this.getOpen()) {
                this.open.apply(this, this._openOnRender);
            }
        },

        /**
         * @private
         */
        __onShow: function() {
            var options = this._options;

            this.startCloseTimeout();

            if (options.closeOnHtmlClick) {
                this.__showDisposer.addCallback(croc.utils.domStableClick($(document), function(e) {
                    if (this._isClosingOnHtmlClickAllowed($(e.target))) {
                        this.close();
                    }
                }, this));
                if (!Stm.env.IS_DESKTOP) {
                    this.__showDisposer.addListener($(document), 'touchstart', function(e) {
                        if (this._isClosingOnHtmlClickAllowed($(e.target))) {
                            this.close();
                        }
                    }, this);
                }
            }

            if (options.closeOnResize || options.dynamicPositioning) {
                var onResize = function() {
                    if (options.closeOnResize) {
                        this.close();
                    }
                    if (options.dynamicPositioning) {
                        this.reposition();
                    }
                }.bind(this);

                this.__showDisposer.addListener($(window), 'resize', function(e) {
                    if (e.target === window) {
                        onResize();
                    }
                }, this);
            }

            if (options.closeOnScroll || options.dynamicPositioning) {
                var onScroll = function() {
                    if (options.closeOnScroll) {
                        this.close();
                    }
                    if (options.dynamicPositioning) {
                        this.reposition();
                    }
                }.bind(this);

                this.__showDisposer.addCallback(croc.utils.domListenScrolling(this.getElement(), onScroll));
            }

            if (this.getKeepActualPosition()) {
                this.__applyKeepActualPosition(true);
            }
        },

        /**
         * @private
         */
        __repositionAutoSize: function(options, isCenter, leftOrRight, target) {
            if (options.autoSize) {
                var prefix = options.autoSizeKind ? options.autoSizeKind + '-' : '';
                var sizable = this._getSizeableElement();
                sizable.css(prefix + 'width',
                    isCenter || !leftOrRight ? target.width - options.autoSizeGap * 2 : '');
                sizable.css(prefix + 'height',
                    isCenter || leftOrRight ? target.height - options.autoSizeGap * 2 : '');
            }
        },

        /**
         * @param {boolean} [curTargetOnly=false]
         * @returns {{left: number, top: number, width: number, height: number}}
         * @private
         */
        __resolveTarget: function(curTargetOnly) {
            var target = this.getTarget();
            if (typeof target === 'function') {
                target = target(this);
            }

            if (target instanceof croc.ui.Widget) {
                target = target.getElement();
            }

            this.__currentTarget = target;

            if (curTargetOnly) {
                return null;
            }

            if (Array.isArray(target)) {
                if (typeof target[0] === 'number') {
                    target = [target, target];
                }
            }
            else {
                var box = [
                    [Number.MAX_VALUE, Number.MAX_VALUE],
                    [Number.MIN_VALUE, Number.MIN_VALUE]
                ];
                target.each(function(i, el) {
                    el = $(el);

                    var offset = el.offset() || this.__getWindowOffset();

                    var width = el.outerWidth();
                    var height = el.outerHeight();
                    box = [
                        [Math.min(offset.left, box[0][0]), Math.min(offset.top, box[0][1])],
                        [Math.max(offset.left + width, box[1][0]), Math.max(offset.top + height, box[1][1])]
                    ];
                }.bind(this));
                target = box;
            }

            return {
                left: target[0][0],
                top: target[0][1],
                width: target[1][0] - target[0][0],
                height: target[1][1] - target[0][1]
            };
        }
    }
});

},{}],29:[function(require,module,exports){
/**
 * Менеджер всплывающих элементов
 */
croc.Class.define('croc.ui.common.bubble.Manager', {
    extend: croc.Object,

    statics: {
        /**
         * @private
         * @static
         */
        __config: {},

        /**
         * @private
         * @static
         */
        __instances: {},

        /**
         * Получить инстанцию менеджера по его имени. Если такого менеджера ещё нет, то он будет создан
         * с переданной конфигурацией.
         * @param {string} name
         * @param {Object} [config]
         * @returns {croc.ui.common.bubble.Manager}
         * @static
         */
        getInstance: function(name, config) {
            return this.__instances[name] ||
                (this.__instances[name] = new croc.ui.common.bubble.Manager(config || this.__config[name] || {}));
        },

        /**
         * Ассоциировать конфигурацию менеджера с его именем
         * @param {string} name
         * @param {Object} config
         */
        registerConfig: function(name, config) {
            this.__config[name] = config;
        }
    },

    events: {
        created: null
    },

    options: {
        /**
         * Определяет то как закрываются элементы при открытии других в коллекции.
         * none - элементы не закрываются
         * stack - элементы закрываются, но при закрытии ранее открытых открываются снова
         * permanent - элементы закрываются без последующего открытия
         * @type {string}
         */
        closeBehavior: {
            check: ['none', 'stack', 'permanent'],
            value: 'none'
        },

        /**
         * Приводит ли открытие плавающего элемента к закрытию остальных. Второй аргумент - true если происходит
         * открытие, false - если закрытие
         * @type {function(croc.ui.common.bubble.IBubble, boolean):boolean}
         */
        isManageableFn: function(bubble, isOpen) { return true; }
    },

    construct: function(options) {
        this.__closeBehavior = options.closeBehavior;
        this.__stack = [];
        this.__shownCollection = new croc.data.ObservableArray();
        this.__openCollection = new croc.data.ObservableArray();
        this.__isManageable = options.isManageableFn;

        croc.ui.common.bubble.Manager.superclass.__construct__.apply(this, arguments);
        this.fireEvent('created');
    },

    members: {
        /**
         * Добавить новый плавающий элемент в менеджер
         * @param {croc.ui.common.bubble.IBubble} bubble
         */
        addItem: function(bubble) {
            if (this.__closeBehavior === 'none') {
                return;
            }

            var isStack = this.__closeBehavior === 'stack';

            _.assign(this.getUserData(bubble), {
                disposeListener: bubble.on('dispose', function() {
                    this.removeItem(bubble);
                }, this),
                openListener: bubble.listenProperty('open', function(open) {
                    if (open) {
                        if (!this.__disableManagement) {
                            if (isStack && this.__stack[this.__stack.length - 1] !== bubble) {
                                this.__stack.push(bubble);
                            }
                            if (this.__isManageable(bubble, true)) {
                                this.__dontCheckStack = true;
                                this.closeAll(bubble);
                                this.__dontCheckStack = false;
                            }
                        }
                    }
                    else if (isStack && !this.__dontCheckStack) {
                        this.__checkStack(bubble);
                    }
                    this.__openCollection.toggleItem(bubble, open);
                }, this),
                shownListener: bubble.listenProperty('shown', function(shown) {
                    this.__shownCollection.toggleItem(bubble, shown);
                }, this)
            });
        },

        /**
         * Закрывает все всплывающие элементы в коллекции. Возвращает закрытые элементы.
         * @param {...croc.ui.common.bubble.IBubble} except
         * @returns {Array.<croc.ui.common.bubble.IBubble>}
         */
        closeAll: function(except) {
            var exceptArr = _.toArray(arguments);
            return this.__openCollection.cloneRawArray().reverse().filter(function(bubble) {
                if (bubble && exceptArr.indexOf(bubble) === -1) {
                    bubble.close();
                    return true;
                }
                return false;
            });
        },

        /**
         * Коллекция открытых в данный момент элементов
         * @returns {croc.data.IObservableList}
         */
        getOpenCollection: function() {
            return this.__openCollection;
        },

        /**
         * Коллекция видимых в данный момент элементов
         * @returns {croc.data.IObservableList}
         */
        getShownCollection: function() {
            return this.__shownCollection;
        },

        /**
         * Возвращает элемент, находящийся на вершине стека
         * @returns {croc.ui.common.bubble.IBubble}
         */
        getStackTop: function() {
            return this.__stack && _.last(this.__stack);
        },

        /**
         * Есть ли попап в стеке открытых плавающих элементов
         * @param {croc.ui.common.bubble.IBubble} bubble
         * @returns {boolean}
         */
        isInStack: function(bubble) {
            return this.__stack.indexOf(bubble) !== -1;
        },

        /**
         * Открывает всплывающий элемент без влияния на остальные
         * @param {croc.ui.common.bubble.IBubble} bubble
         */
        openUnmanageable: function(bubble) {
            this.__disableManagement = true;
            bubble.open();
            this.__disableManagement = false;
        },

        /**
         * Удалить плавающий элемент из менеджера
         * @param {croc.ui.common.bubble.IBubble} bubble
         */
        removeItem: function(bubble) {
            if (this.__closeBehavior === 'none') {
                return;
            }

            var isStack = this.__closeBehavior === 'stack';

            var data = this.getUserData(bubble);
            data.openListener();
            data.shownListener();
            data.disposeListener();

            this.__shownCollection.remove(bubble);
            this.__openCollection.remove(bubble);

            if (isStack) {
                croc.utils.arrRemove(this.__stack, bubble);
                this.__checkStack(bubble);
            }
        },

        /**
         * Перепозиционировать все открытые элементы
         */
        repositionAll: function() {
            this.__openCollection.forEach(function(bubble) { bubble.reposition(); });
        },

        /**
         * @private
         */
        __checkStack: function(bubble) {
            if (this.__stack[this.__stack.length - 1] === bubble) {
                this.__stack.pop();
                if (this.__stack.length) {
                    if (this.__isManageable(bubble, false)) {
                        this.__stack[this.__stack.length - 1].open();
                    }
                }
            }
            else {
                croc.utils.arrRemove(this.__stack, bubble);
            }
        }
    }
});
},{}],30:[function(require,module,exports){
/**
 * Кнопка
 */
croc.Class.define('croc.ui.form.Button', {
    extend: croc.ui.Widget,
    
    events: {
        /**
         * Кнопка была нажата
         */
        execute: null
    },
    
    properties: {
        /**
         * активна ли кнопка
         * @type {boolean}
         */
        active: {
            cssClass: 'state_active',
            type: 'boolean',
            value: false,
            event: true,
            option: true
        },
        
        /**
         * Заблокирована ли кнопка
         * @type {boolean}
         */
        disabled: {
            cssClass: 'state_disabled',
            type: 'boolean',
            value: false,
            field: '__disabled',
            apply: function(disabled) {
                if (this.__inputEl) {
                    this.__inputEl.prop('disabled', disabled);
                }
            },
            option: true,
            event: true
        },
        
        /**
         * Конфигурация иконки
         * @type {Object}
         */
        icon: {
            type: 'object',
            field: '__icon',
            apply: '__applyTextContent',
            option: true
        },
        
        /**
         * Кнопка в состоянии загрузки
         * @type {boolean}
         */
        loading: {
            cssClass: 'state_loading',
            type: 'boolean',
            option: true
        },
        
        /**
         * Радиокнопка - при клике меняется свойство active
         * @type {boolean}
         */
        radio: {
            type: 'boolean',
            value: false,
            apply: function(value) {
                if (!value) {
                    this.setActive(false);
                }
            },
            option: true
        },
        
        /**
         * Цветовая схема кнопки
         * @type {string}
         */
        'set': {
            cssClass: true,
            type: 'string',
            value: 'system',
            option: true
        },
        
        /**
         * Цветовая схема кнопки
         * @type {string}
         */
        scheme: {
            cssClass: true,
            type: 'string',
            value: 'gray',
            option: true
        },
        
        /**
         * Размер кнопки
         * @type {string}
         */
        size: {
            cssClass: true,
            type: 'string',
            value: '2',
            option: true
        },
        
        /**
         * Текст кнопки, если не задан, то равен value
         * @type {string}
         */
        text: {
            type: 'string',
            field: '__text',
            apply: '__applyTextContent',
            option: true
        },
        
        /**
         * Атрибут value кнопки
         * @type {string}
         */
        value: {
            type: 'string',
            field: '__value',
            apply: function(value) {
                if (this.__inputEl) {
                    this.__inputEl.attr('value', value || '');
                }
            },
            option: true
        }
    },
    
    options: {
        /**
         * Шаблон по-умолчанию
         * @type {string}
         */
        htmlTemplate: '' +
        '<span class="b-sbutton set_system{cls}">' +
        '   <span class="b-sbutton-text">{text}</span>{button}' +
        '</span>',
        
        /**
         * Предотвратить стандартное поведение кнопки (sumbit формы)
         * @type {boolean}
         */
        preventDefault: {
            type: 'boolean',
            value: false
        },
        
        /**
         * Предотвратить всплывание события mousedown и click
         * @type {boolean}
         */
        stopPropagation: {
            type: 'boolean',
            value: false
        },
        
        /**
         * Тип кнопки: button, submit
         * @type {string}
         */
        type: {
            check: ['button', 'submit']
        }
    },
    
    construct: function(options) {
        if (!croc.ui.form.Button.__loadingImageLoaded) {
            croc.util.ImagesPreloader.load('/croc/images/blocks/b-sbutton/state_loading.gif');
            croc.ui.form.Button.__loadingImageLoaded = true;
        }
        
        croc.ui.form.Button.superclass.__construct__.apply(this, arguments);
    },
    
    members: {
        /**
         * Тип кнопки
         * @return {string}
         */
        getType: function() {
            return this.__type;
        },
        
        /**
         * Дополнительные данные для рендеринга из шаблона
         * @param {Object} options
         * @returns {object}
         * @protected
         */
        _getAddRenderData: function(options) {
            return {
                type: options.type,
                text: this.__getTextContent(options.text, options.icon),
                value: options.value || '',
                disabled: options.disabled ? ' disabled="disabled"' : '',
                button: !options.type ? '' :
                '<input type="' + options.type + '" class="b-sbutton-input" value="' + (options.value || '') + '"' +
                (options.disabled ? ' disabled="disabled"' : '') + '>'
            };
        },
        
        /**
         * Инициализация виджета после его отрисовки в DOM
         * @return {$.Deferred|undefined}
         * @protected
         */
        _initWidget: function() {
            croc.ui.form.Button.superclass._initWidget.call(this);
            
            this.getElement().click(function(e) {
                if (!this.getDisabled() && !this.getLoading()) {
                    this.fireEvent('execute', e, this);
                    
                    if (this.getRadio()) {
                        this.setActive(!this.getActive());
                    }
                    
                    if (this.__preventDefault) {
                        e.preventDefault();
                    }
                }
                else {
                    e.preventDefault();
                }
                if (this.__stopPropagation) {
                    e.stopPropagation();
                }
            }.bind(this));
            
            if (this.__stopPropagation) {
                this.getElement().mousedown(function(e) {
                    e.stopPropagation();
                });
            }
        },
        
        /**
         * Выполняется когда свойства виджета уже инициализированы
         * @param {Object} options
         * @protected
         */
        _onPropertiesInitialized: function(options) {
            this.__type = options.type;
            this.__preventDefault = options.preventDefault;
            this.__stopPropagation = options.stopPropagation;
            
            croc.ui.form.Button.superclass._onPropertiesInitialized.apply(this, arguments);
            
            if (this.getElement()) {
                if (this.__inputEl) {
                    this.__value = this.__inputEl.attr('value') || null;
                    
                    if (this.__inputEl.prop('disabled') && !this.getDisabled()) {
                        this.__disabled = true;
                    }
                    else if (!this.__inputEl.prop('disabled') && this.getDisabled()) {
                        this.__inputEl.prop('disabled', true);
                    }
                    
                    this.__type = this.__inputEl.attr('type') || this.__type;
                }
                
                if (this.__textEl) {
                    var iconEl = this.__textEl.find('>.g-icon');
                    if (iconEl.length) {
                        this.__icon = croc.ui.Render.parseIcon(iconEl);
                        this.__text = this.__icon.text.trim();
                        delete this.__icon.text;
                    }
                    else {
                        this.__text = this.__textEl.html().trim();
                    }
                }
            }
            else {
                if (!this.__value && this.__type === 'submit') {
                    this.__value = this.__text;
                }
            }
        },
        
        /**
         * Назначить элемент виджету
         * @param {jQuery} el
         * @protected
         */
        _setElement: function(el) {
            croc.ui.form.Button.superclass._setElement.apply(this, arguments);
            
            this.__inputEl = el.find('input');
            if (!this.__inputEl.length) {
                this.__inputEl = null;
            }
            
            this.__textEl = el.find('.b-sbutton-text');
            if (!this.__textEl.length) {
                this.__textEl = null;
            }
        },
        
        /**
         * @private
         */
        __applyTextContent: function() {
            if (this.__textEl) {
                this.__textEl.html(this.__getTextContent(this.getText(), this.getIcon()));
            }
        },
        
        /**
         * @param text
         * @param icon
         * @returns {string}
         * @private
         */
        __getTextContent: function(text, icon) {
            if (icon) {
                icon = _.assign({button: true, text: text}, icon);
            }
            return icon ? croc.ui.Render.icon(icon) : text || '';
        }
    }
});
},{}],31:[function(require,module,exports){
croc.ns('croc.ui.form');

/**
 * Класс для отображения и валидации формы.
 * Для статистики у каждой формы должен быть xtype. Если форма не имеет своего конкретного типа, то при конструировании
 * формы должна быть передана опция instanceXType.
 *
 * Дочерний виджет может содержать мета данные:
 * dontReset: bool - не сбрасывать значение поля при сбросе значений формы
 * hint: string - подсказка под полем
 * hintSize: number - размер подсказки (если не передан вычисляется на основе размера поля)
 * id: string - атрибут id поля (field element)
 * label: string - лэйбл поля
 * labelHint: string - подсказка к лэйблу поля
 * labelHintSize: number - размер подсказки к лэйблу (если не передан вычисляется на основе размера поля)
 * labelPos: string - позиция лэйбла (left, top)
 * labelSize: number - размер лэйбла (если не передан вычисляется на основе размера поля)
 * offTooltip: boolean - не показывать тултип при ошибке валидации
 * openTooltipAnyway - тултип автоматически всплывает после валидации даже если всплытие запрещено методом setTooltipAutoOpen
 * rowMargin: string - отступ строки сверху (null, half, normal, double)
 * setDefaults: string|Array.<string> - назначить состояние поля по-умолчанию см. {@link croc.ui.form.Form.setFieldDefaults}
 * suppressValid: bool - не помечать поле как прошедшее валидацию
 *
 * - Установить Stm.env.formDisableValidation = true, чтобы отправить данные формы без валидации
 * - Если в форме есть нестандартные поля (лэйбл стоит в нестандартном месте), то можно связать их label с полем,
 * указав для label атрибут: data-form-label-for="name", где name - это имя поля
 * (пока работает только для полей наследников класса AbstractHtmlControl)
 * Если лэйбл стоит в стандартном место, то id расставляются автоматически
 * Логика поиска стандартного лэйбла поля в методе {@link croc.ui.form.Form.getFieldLabel}
 *
 * При инициализации формы из разметки поля и кнопки подхватываются автоматически, если соблюдены следующие условия:
 *  - поля находятся внутри b-form-input-h
 *  - полями не считаются .b-sbutton-set,.b-form-check,.b-form-complex
 *  - .b-input-checkbox лежащий внутри .b-form-input-h>.b-form-check считается полем
 *  - любой элемент с классом js-form-include считается полем
 *  - чтобы запретить форме подхватывать опрделённое поле нужно указать его элементу класс js-form-ignore
 *  - кнопки находятся внутри .b-form-row>.b-sbutton-set, .b-form-input-h>.b-sbutton-set
 *  - любой элемент с классом js-form-button считается кнопкой
 *  - чтобы запретить форме подхватывать опрделённую кнопку нужно указать её элементу класс js-form-ignore-button
 *
 * Маркеры для элементов внутри формы:
 * js-form-include - сделать элемент полем формы
 * js-form-ignore - не рассматривать указанный элемент и его дочерние как поля формы
 * js-form-button - рассматривать элемент как кнопку формы
 * js-form-ignore-button - не рассматривать элемент как кнопку формы
 * js-form-hide-on-update - скрывать элементы при первом изменении формы
 * js-form-changed - элемент появляется только если форма не в начальном состоянии
 * js-form-reset - сбросить значения формы при клике по этому элементу
 * js-form-hide-msg - скрыть замещающее форму сообщение при клике по элементу
 * js-form-ignore-unsaved-changes - после клике по этому элементу проверка на наличие несохранённых изменений отключается
 *
 * @extends {croc.ui.Container}
 * @mixes {croc.ui.form.validation.MStandardValidatable}
 * @implements {croc.ui.form.validation.IValidatable}
 * @event removeField (field: {croc.ui.form.field.IField})
 * @event submit (e, value: Object.<string, *>) валидация была пройдена, чтобы отменить стандартный сабмит формы, вызовите e.preventDefault()
 * @event submitServerError (error: {string})
 * @event activate (field: {croc.ui.form.field.IField}) активация формы (первое взаимодействие с одним из полей формы)
 * @event initState возбуждается после инициализации состояния (_initSate), а также после каждого ресета
 * @event submitSuccessful (response: Object, staticSubmit: {bool}) отправка удачна и response.errcode === 0
 * @event submitValidationFail
 * @event presubmit (prevent: {function})
 * @event postsubmit
 */
croc.ui.form.Form = croc.extend(croc.ui.Container, {
    
    DEFAULT_ANIMATION_TIME: 200,
    
    __LABEL_SIZE: {
        1: 10,
        2: 9,
        3: 8,
        4: 7,
        5: 4
    },
    
    __TEMPLATE_FORM: [
        '<form action="{action}" class="b-form{cls}" method="post">',
        '   <fieldset class="b-form-fset">',
        '       {items:fields}',
        '       <div class="b-form-row g-hidden">',
        '           <div class="b-sbutton-set spacing_1">',
        '               {items:buttons}',
        '           </div>',
        '       </div>',
        '   </fieldset>',
        '   {message}',
        '</form>'
    ].join(''),
    
    __TEMPLATE_FORM_CHECKBOX: [
        '<div class="b-form-check size_{size}">',
        '   <label class="g-ui cursor_pointer">{item} {label}</label>',
        '</div>'
    ].join(''),
    
    __TEMPLATE_FORM_MESSAGE: '<div class="b-form-replacing-message" style="display: none"></div>',
    
    __TEMPLATE_FORM_ROW: [
        '<div class="b-form-row pos_{pos} {margin} js-wrapper">',
        '   {label}',
        '   <div class="b-form-input pos_{pos}">',
        '       <div class="b-form-input-h">{item}</div>',
        '       {hint}',
        '   </div>',
        '</div>'
    ].join(''),
    
    __TEMPLATE_FORM_ROW_HINT: '<div class="b-form-hint pos_bot g-font size_{size} {state}">{hint}</div>',
    
    __TEMPLATE_FORM_ROW_LABEL: [
        '<div class="b-form-label for_input pos_{pos} size_{size}">',
        '   <label for="{id}" class="g-font size_{labelSize}">{label}</label>',
        '   {hint}',
        '</div>'
    ].join(''),
    
    /**
     * Экшен формы либо url, на который будет отправлен запрос
     * @type {string}
     */
    action: '',
    
    /**
     * Если передан, то запрос отправляется в форме {url: ..., data: [{action: ajaxAction, params: formValue}]
     * @type {boolean}
     */
    ajaxAction: null,
    
    /**
     * Задержка перед сабмитом формы аяксом
     * @type {number}
     */
    ajaxSubmitDelay: null,
    
    /**
     * Фукнкция вызывается при сабмите формы. Должна возвращать Deferred, resolve вызывается при получении ответа
     * с сервера. На время сабмита кнопка submit становится неактивной и показывается лоадер. Если опция передана
     * то preventSubmit устанавливается в true.
     * Важно! resolve вызывается с двумя параметрами - error, response.
     * В случае если с сервера пришла ошибка (errcode !== 0), error - текст ошибки. Если
     * ошибка произошла при отправке запроса, то вызывается reject с объектом XHR. Если ошибок не было, то вызывается
     * resolve только со вторым параметром (если response есть) или без параметров.
     * @type {function(this: croc.ui.form.Form, croc.ui.form.Form, Object.<string, *>):$.Deferred}
     */
    ajaxSubmitFn: null,
    
    /**
     * Форма отправляет данные аяксом самостоятельно. После чего вызывается метод _onSubmitSuccess или _onSubmitFail
     * @type {boolean}
     */
    autoAjaxSubmit: false,
    
    /**
     * Ошибки формы
     * {code: message, code2: {field: 'fieldId', message: 'message'}}
     * @type {Object}
     */
    errorCodes: null,
    
    /**
     * Ошибки валидации полей, которые следует установить при их полявлении
     * @type {Object.<string, string>}
     */
    fieldsInvalidMessages: null,
    
    /**
     * Значения, которые следует установить полям при их добавлении
     * @type {Object.<string, *>}
     */
    fieldsValues: null,
    
    /**
     * размер подсказки
     * @type {number}
     */
    hintSize: 12,
    
    /**
     * Конфигурация по-умолчанию добавляемая к items
     * @type {Object.<string, object>|object}
     */
    itemDefaults: {
        buttons: {
            xtype: croc.ui.form.Button
        }
    },
    
    /**
     * Конфигурация добавляемых лэйблов
     * @type {object}
     */
    labelsConf: {
        
        /**
         * размер подсказки
         * @type {number}
         */
        hintSize: 12,
        
        /**
         * размер лэйблов (1-10)
         * @type {number}
         */
        size: null,
        
        /**
         * положение лэйблов
         * @type {string}
         */
        pos: 'top'
    },
    
    /**
     * Объект уведомлений
     * @type {object}
     */
    notifier: null,
    
    /**
     * Предотвратить отправку формы на сервер
     * @type {boolean}
     */
    preventSubmit: false,
    
    /**
     * Способ появления замещающего сообщения: fadeForm|fadeMessage
     * @type {string}
     */
    replacingMessageAnimation: 'fadeForm',
    
    /**
     * Функция получения значений перед отправкой данных на сервер
     * @type {function():Object}
     */
    submitValuesFn: null,
    
    /**
     * Конфигурация для менеджера состояний
     * @type {Object}
     */
    stateManager: null,
    
    /**
     * Статус формы: normal, sentSuccess, sentFailure
     * @type {string}
     */
    status: 'normal',
    
    /**
     * Нужно ли триммить значения всех текстовых полей перед сабмитом
     * @type {boolean}
     */
    trimAllBeforeSubmit: true,
    
    /**
     * Нужно ли производить валидацию формы
     * @type {boolean}
     */
    validateForm: true,
    
    /**
     * Опции устанавливающие особенности валидации формы {@see croc.ui.form.validation.Controller#validationBehavior}
     * @type {Object}
     */
    validationBehavior: null,
    
    /**
     * Предупреждать пользователя о несохранённых изменениях
     * @type {boolean}
     */
    warnUnsavedChanges: false,
    
    /**
     * Игнорировать определённые поля, предупреждая о несохранённых изменениях
     * @type {Array.<string>}
     */
    warnUnsavedChangesIgnoreFields: null,
    
    /**
     * Если true, то состояние формы на момент конструирования не считается начальным. Первое начальное состояние
     * сохраняется по вызову {@link #_initState}
     * @type {boolean}
     */
    _partialInitialState: false,
    
    //properties
    /**
     * Идёт ли отправка данных в данный момент
     * @returns {boolean}
     */
    getSubmitting: function() {
        return this.__submitting || false;
    },
    
    /**
     * @param {boolean} value
     */
    __setSubmitting: function(value) {
        if (value !== this.__submitting) {
            var oldValue = this.__submitting;
            this.__submitting = value;
            this.fireEvent('changeSubmitting', value, oldValue);
        }
    },
    
    /**
     * Предупреждать пользователя о несохранённых изменениях
     * @returns {boolean}
     */
    getWarnUnsavedChanges: function() {
        return this.warnUnsavedChanges;
    },
    
    /**
     * Предупреждать пользователя о несохранённых изменениях
     * @param {boolean} value
     */
    setWarnUnsavedChanges: function(value) {
        this.warnUnsavedChanges = value;
    },
    //
    
    init: function() {
        this.__activateDisposer = new croc.util.Disposer();
        croc.ui.form.Form.superclass.init.call(this);
    },
    
    /**
     * Снимает фокус с выделенного поля формы, а затем возвращает его, для того чтобы зафиксировать изменения
     * этого поля.
     */
    commitChanges: function() {
        if (document.activeElement && document.activeElement.blur &&
            this.getElement().has(document.activeElement).length) {
            document.activeElement.blur();
            document.activeElement.focus();
        }
        
        this.getElement()
            .find('input[type=text], input[type=textarea], input[type=password]')
            .blur();
    },
    
    /**
     * Блокировка всех полей и кнопок формы
     */
    disable: function() {
        if (this.__disabled) {
            return;
        }
        
        this.__alreadyDisabled = {};
        this.getItems().concat(this.getItems('buttons')).forEach(function(widget) {
            if (croc.Interface.check(widget, 'croc.ui.form.field.IDisable') ||
                croc.Class.check(widget, 'croc.ui.form.Button')) {
                if (widget.getDisabled()) {
                    this.__alreadyDisabled[widget.getUniqueId()] = true;
                }
                else {
                    widget.setDisabled(true);
                }
            }
        }, this);
        
        this.__disabledLinks = this.getElement().find('.g-pseudo:not(.state_disabled)');
        this.getElement().add(this.__disabledLinks).addClass('state_disabled');
        this.__disabled = true;
    },
    
    /**
     * Очистка объекта (удаление самого DOM-элемента this.el не происходит, удаляются другие элементы вставленные в DOM,
     * а также любые другие данные созданные виджетом)
     */
    dispose: function() {
        croc.ui.form.Form.superclass.dispose.apply(this, arguments);
        this.__notifier.dispose();
    },
    
    /**
     * Разблокировка формы
     */
    enable: function() {
        if (!this.__disabled) {
            return;
        }
        
        this.getItems().concat(this.getItems('buttons')).forEach(function(widget) {
            if (croc.Interface.check(widget, 'croc.ui.form.field.IDisable') ||
                croc.Class.check(widget, 'croc.ui.form.Button')) {
                if (!this.__alreadyDisabled[widget.getUniqueId()]) {
                    widget.setDisabled(false);
                }
            }
        }, this);
        
        this.getElement().add(this.__disabledLinks).removeClass('state_disabled');
        this.__disabled = false;
    },
    
    /**
     * Заблокирована ли форма
     * @returns {boolean}
     */
    getDisabled: function() {
        return this.__disabled;
    },
    
    /**
     * Сообщение заменяющее форму
     * @returns {jQuery}
     */
    getMessageElement: function() {
        return this.__messageEl;
    },
    
    /**
     * Объект уведомлений
     * @return {croc.ui.form.validation.Notifier}
     */
    getNotifier: function() {
        return this.__notifier;
    },
    
    /**
     * @returns {croc.ui.form.StateManager}
     */
    getStateManager: function() {
        return this.__stateManager;
    },
    
    /**
     * Статус формы (см. {@link #status})
     * @returns {status}
     */
    getStatus: function() {
        return this.status;
    },
    
    /**
     * Возвращает первую кнопку типа submit
     * @return {croc.ui.form.Button}
     */
    getSubmitButton: function() {
        return this.__sumbitButton;
    },
    
    /**
     * Менеджер валидации
     * @return {croc.ui.form.validation.Manager}
     */
    getValidationManager: function() {
        return this.__validationManager;
    },
    
    /**
     * Получить значения полей формы в виде объекта.
     * Алиас к {@link #getValues} для поддержки интерфейса {@link croc.ui.form.validation.IValidatable}.
     * @return {Object.<string, *>}
     */
    getValue: function() {
        return this.getValues();
    },
    
    /**
     * Получить значения полей формы в виде объекта
     * @param {boolean} [complex=false]
     * @param {boolean} [includeEmpty=false]
     * @returns {Object.<string, *>}
     */
    getValues: function(complex, includeEmpty) {
        if (complex || includeEmpty) {
            var values = {};
            this.getItems().forEach(function(item) {
                if (item.getIdentifier() && (includeEmpty || !item.isEmpty())) {
                    values[item.getIdentifier()] = complex ? item.getValue() : item.getPlainValue();
                }
            });
            return values;
        }
        return _.assign({}, this.__stateManager.getValues());
    },
    
    /**
     * Скрыть замещающее форму сообщение
     */
    hideReplacingMessage: function() {
        if (this.replacingMessageAnimation === 'fadeForm') {
            this.__messageEl.hide();
            this.__fieldSet.fadeIn(this.DEFAULT_ANIMATION_TIME);
        }
        else if (this.replacingMessageAnimation === 'fadeMessage') {
            this.__messageEl.fadeOut(this.DEFAULT_ANIMATION_TIME);
        }
        else {
            this.__messageEl.hide();
            this.__fieldSet.show();
        }
    },
    
    /**
     * Отключить повторную валидацию поля при потере фокуса
     * @param {croc.ui.form.field.IField} field
     */
    offFieldRevalidating: function(field) {
        this.__validationController.offFieldRevalidating(field);
    },
    
    /**
     * Сбросить значения и состояния полей
     */
    reset: function() {
        var $this = this;
        this.__validationManager.resetValidation();
        this.__stateManager.reset();
        
        if (!this.__activateDisposer) {
            this.__activateDisposer = new croc.util.Disposer();
            $.each(this.getItems(), function(i, field) {
                $this.__setUpFieldActivation(field);
            });
        }
        
        this.fireEvent('initState');
    },
    
    /**
     * Изменить время задержки до отправки запроса
     * @param {number} delay
     */
    setAjaxSubmitDelay: function(delay) {
        this.__submitController.setAjaxSubmitDelay(delay);
    },
    
    /**
     * Явно назначить кнопку отправки формы
     * @param {croc.ui.form.Button} button
     */
    setSubmitButton: function(button) {
        this.__sumbitButton = button;
        button.on('execute', function() {
            this.submit();
        }, this);
    },
    
    /**
     * Сменить пояснение под лэйблом поля. Если hint === null то пояснение удаляется.
     * @param {croc.ui.form.field.IField|string} field
     * @param {string} [hint=null]
     * @param {string} [size=null]
     * @param {string} [state=null]
     */
    setFieldHint: function(field, hint, size, state) {
        if (typeof field === 'string') {
            field = /** @type {croc.ui.form.field.IField} */(this.getItem(field));
        }
        var input = field.getElement().closest('.b-form-input');
        input.find('>.b-form-hint').remove();
        if (hint) {
            input.append(this.__TEMPLATE_FORM_ROW_HINT.render({
                hint: hint,
                size: size || this.hintSize,
                state: state ? 'state_' + state : ''
            }));
        }
    },
    
    /**
     * Показать замещающее форму сообщение
     * @param {string} [message=null]
     */
    showReplacingMessage: function(message) {
        var $this = this;
        
        if (!this.__messageEl.length) {
            this.__messageEl = $(this.__TEMPLATE_FORM_MESSAGE).appendTo(this.getElement());
        }
        
        if (message) {
            this.__messageEl.html(message);
        }
        
        if (this.replacingMessageAnimation === 'fadeForm') {
            return this.__fieldSet.fadeOut(this.DEFAULT_ANIMATION_TIME, function() {
                $this.__messageEl.show();
            }).promise();
        }
        else if (this.replacingMessageAnimation === 'fadeMessage') {
            return this.__messageEl.fadeIn(this.DEFAULT_ANIMATION_TIME).promise();
        }
        else {
            this.__messageEl.show();
            this.__fieldSet.hide();
            return $.Deferred().resolve();
        }
    },
    
    /**
     * Отправить форму. Форма отправляется, только если пройдена валидация.
     * @returns {$.Deferred} resolve - если форма отправлена, reject в противном случае
     */
    submit: function() {
        return this.__submitController.submit();
    },
    
    /**
     * Изменить доступность поля (видимость/disable и необходимость валидации)
     * @param {string|croc.ui.form.field.IField} field
     * @param {boolean} available
     * @param {boolean|string} [setDisableOrSelector=false] если true, то делает поле недоступным не скрывая его,
     * если строка, то скрывает поле вплоть до родителя подходящего под переданный селектор
     * @param {string|function(jQuery, boolean)} [toggleMethod=null] null|fade|slide - метод анимации появления/скрытия поля
     */
    toggleField: function(field, available, setDisableOrSelector, toggleMethod) {
        if (typeof field === 'string') {
            field = /** @type {croc.ui.form.field.IField} */(this.getItem(field));
        }
        if (setDisableOrSelector && typeof setDisableOrSelector !== 'string') {
            field.setDisabled(!available);
        }
        else {
            
            this.__toggleFieldVisibility(field, available, setDisableOrSelector, toggleMethod);
            
            if (available) {
                this.__stateManager.addItem(field, {dontReset: field.getMeta().dontReset});
            }
            else {
                this.__stateManager.removeItem(field);
            }
        }
        if (available) {
            this.__validationManager.addItem(field,
                {identifier: field.getIdentifier(), suppressValid: field.getMeta().suppressValid});
        }
        else {
            this.__validationManager.removeItem(field);
        }
    },
    
    /**
     * Произвести валидацию полей формы
     * @returns {$.Deferred}
     */
    validate: function() {
        return this.__validationController.validate();
    },
    
    /**
     * Дополнительные данные для рендеринга из шаблона
     * @returns {object}
     * @protected
     */
    _getAddRenderData: function() {
        return {
            action: this.action,
            message: this.__TEMPLATE_FORM_MESSAGE
        };
    },
    
    /**
     * Значения для отправки на сервер аяксом
     * @returns {Object}
     * @protected
     */
    _getAjaxSubmitValues: function() {
        return this.getValues();
    },
    
    /**
     * Возвращает конфигурация виджета по его элементу. Конфигурация как минимум должна содержать xtype.
     * @param {string} section
     * @param {jQuery} element
     * @return {object}
     * @protected
     */
    _getConfByElement: function(section, element) {
        var conf = {xtype: null};
        if (section === 'buttons') {
            conf.xtype = croc.ui.form.Button;
        }
        else if (element.is('input[type=hidden]')) {
            conf.xtype = croc.ui.form.field.Hidden;
        }
        
        return conf;
    },
    
    /**
     * Секция дочерних элементов по-умолчанию
     * @return {String}
     * @protected
     */
    getDefaultItemsSection: function() {
        return 'fields';
    },
    
    /**
     * Шаблон для обрамления дочернего элемента. Должен присутствовать маркер {item}.
     * @param {string} section
     * @param {croc.ui.Widget} item дочерний виджет
     * @returns {string}
     * @protected
     */
    _getItemWrapperTemplate: function(section, item) {
        var field = /** @type {croc.ui.form.field.IField} */(item);
        var meta = item.getMeta();
        
        if (section !== 'fields') {
            return croc.ui.form.Form.superclass._getItemWrapperTemplate.apply(this, arguments);
        }
        
        var fieldSize = croc.Interface.check(field, 'croc.ui.form.field.ISizable') ? field.getSize() : '1';
        
        var label = '';
        var hint = '';
        var defaultLabelConf = croc.ui.form.Form.prototype.labelsConf;
        var labelPos = meta.labelPos || this.labelsConf.pos || defaultLabelConf.pos;
        var rowMargin = meta.rowMargin ? 'margin_' + meta.rowMargin : '';
        
        if (croc.Class.check(field, 'croc.ui.form.field.CheckBox')) {
            return this.__TEMPLATE_FORM_ROW.render({
                label: '',
                hint: '',
                pos: labelPos,
                margin: rowMargin,
                item: this.__TEMPLATE_FORM_CHECKBOX.render({
                    label: meta.label || '',
                    size: field.getSize()
                })
            });
        }
        
        if (meta.label) {
            var labelHint = '';
            if (meta.labelHint) {
                labelHint = this.__TEMPLATE_FORM_ROW_HINT.render({
                    hint: meta.labelHint,
                    size: meta.labelHintSize || this.labelsConf.hintSize || defaultLabelConf.hintSize,
                    state: ''
                });
            }
            
            label = this.__TEMPLATE_FORM_ROW_LABEL.render({
                size: fieldSize,
                labelSize: meta.labelSize || this.labelsConf.size || this.__LABEL_SIZE[fieldSize],
                pos: meta.labelPos || this.labelsConf.pos || defaultLabelConf.pos,
                label: meta.label,
                id: croc.Interface.check(field, 'croc.ui.form.field.IHtmlControl') ?
                    croc.ui.form.Helper.getFieldId(field, meta.id) : '',
                hint: labelHint
            });
        }
        else if (meta.id && croc.Interface.check(field, 'croc.ui.form.field.IHtmlControl')) {
            croc.ui.form.Helper.setFieldId(field, meta.id);
        }
        
        if (meta.hint) {
            hint = this.__TEMPLATE_FORM_ROW_HINT.render({
                hint: meta.hint,
                size: meta.hintSize || this.hintSize,
                state: meta.hintState ? 'state_' + meta.hintState : ''
            });
        }
        
        return this.__TEMPLATE_FORM_ROW.render({
            label: label,
            hint: hint,
            margin: rowMargin,
            pos: labelPos
        });
    },
    
    /**
     * Шаблон для элемента
     * @param {Object} options
     * @return {$.Deferred|string}
     * @protected
     */
    _getTemplate: function(options) {
        return options.htmlTemplate || this.__TEMPLATE_FORM;
    },
    
    /**
     * После вызова состояние формы считается начальным
     * @protected
     */
    _initState: function() {
        if (this.__stateInited) {
            return;
        }
        this.__stateInited = true;
        
        this.__stateManager.saveState();
        this.__setUpJsMarkers();
        
        //before unload
        if (this.getWarnUnsavedChanges()) {
            this._getDisposer().addListener(croc, 'system.page.beforeUnload', function(preventUnload) {
                if (!this.getWarnUnsavedChanges() || this.__submitController.isSubmitPerformed()) {
                    return;
                }
                
                this.commitChanges();
                
                var ignoreFields;
                if (this.warnUnsavedChangesIgnoreFields) {
                    ignoreFields = [];
                    this.warnUnsavedChangesIgnoreFields.forEach(function(identifier) {
                        ignoreFields.push(this.getItem(identifier));
                    }, this);
                }
                
                if (this.__stateManager.getStateChanged(ignoreFields) || this.status === 'sentFailure') {
                    preventUnload('На странице есть несохраненные данные.');
                }
            }, this);
        }
        
        this.__notifier.setTooltipAutoOpen(true);
        
        this.fireEvent('initState');
    },
    
    /**
     * Инициализация виджета после его отрисовки в DOM
     * @return {$.Deferred|undefined}
     * @protected
     */
    _initWidget: function() {
        //init members
        this.__stateManager = new croc.ui.form.StateManager(this.stateManager || {});
        this.__validationController = new croc.ui.form.validation.Controller({
            form: this,
            notifierConf: this.notifier,
            validationBehavior: this.validationBehavior,
            validateForm: this.validateForm,
            fieldsInvalidMessages: this.fieldsInvalidMessages
        });
        this.__validationManager = this.__validationController.getManager();
        this.__notifier = this.__validationController.getNotifier();
        this.__submitController = new croc.ui.form.internal.SubmitController({
            form: this,
            action: this.action,
            ajaxAction: this.ajaxAction,
            ajaxSubmitDelay: this.ajaxSubmitDelay,
            ajaxSubmitFn: this.ajaxSubmitFn,
            autoAjaxSubmit: this.autoAjaxSubmit,
            errorCodes: this.errorCodes,
            preventSubmit: this.preventSubmit,
            submitFailFunc: this._onSubmitFail.bind(this),
            submitSuccessFunc: this._onSubmitSuccess.bind(this),
            trimAllBeforeSubmit: this.trimAllBeforeSubmit,
            valuesFunc: (this.submitValuesFn || this._getAjaxSubmitValues).bind(this)
        });
        
        this.__submitController.bind(':changeSubmitting', this, '__submitting');
        
        //call parent
        croc.ui.form.Form.superclass._initWidget.call(this);
        
        this.__buttonsRow = this.getElement().find('.b-form-row:has(.b-sbutton-set)');
        this.__buttonsContainer = this.__buttonsRow.find('.b-sbutton-set');
        if (!this.__buttonsContainer.length) {
            this.__buttonsContainer = this.__buttonsRow;
        }
        
        this.__fieldSet = this.getElement().find('.b-form-fset').filter(':not(.js-form-ignore)');
        this.__messageEl = this.getElement().find('.b-form-replacing-message');
        
        //show buttons row
        if (this.getItems('buttons').length > 0) {
            this.__buttonsRow.removeClass('g-hidden');
        }
        
        if (!this.isHtmlGenerated()) {
            this.__idFieldsLabels();
        }
        
        //overlay
        $('<div class="b-form-overlay" style="display: none"></div>').appendTo(this.getElement());
        
        if (!this._partialInitialState) {
            this._initState();
        }
    },
    
    /**
     * Вставить дочерний элемент в определённую секцию
     * @param {string} section
     * @param {jQuery} elements
     * @param {jQuery} beforeElement
     * @param {Array.<croc.ui.Widget>} widgets
     * @protected
     */
    _insertItems: function(section, elements, beforeElement, widgets) {
        if (section === 'fields') {
            if (widgets.some(function(x) { return croc.Class.check(x, 'croc.ui.form.field.Hidden'); })) {
                if (!widgets.every(function(x) { return croc.Class.check(x, 'croc.ui.form.field.Hidden'); })) {
                    throw new Error('Нельзя вставлять в форму одновременно и скрытые поля и обычные.');
                }
                this.getElement().prepend(elements);
            }
            else if (beforeElement) {
                beforeElement.closest('.b-form-row').before(elements);
            }
            else if (this.__buttonsRow.length) {
                this.__buttonsRow.before(elements);
            }
            else {
                this.__fieldSet.last().append(elements);
            }
        }
        else if (section === 'buttons') {
            if (beforeElement) {
                beforeElement.closest('.b-sbutton').before(elements);
            }
            else {
                this.__buttonsContainer.append(elements);
            }
            
            this.__buttonsRow.removeClass('g-hidden');
        }
    },
    
    /**
     * Метод вызывается при добавлении нового дочернего элемента
     * @param {string} section
     * @param {croc.ui.Widget} item
     * @protected
     */
    _onAddItem: function(section, item) {
        if (section === 'buttons' && !this.__sumbitButton && item.getType() === 'submit') {
            /**
             * @type {croc.ui.form.Button}
             * @private
             */
            this.__sumbitButton = item;
        }
        
        if (section !== 'fields') {
            return;
        }
        
        var field = /** @type {croc.ui.form.field.IField} */(item);
        var meta = item.getMeta();
        
        this.__stateManager.addItem(field, {dontReset: field.getMeta().dontReset});
        
        //activation
        this.__setUpFieldActivation(field);
        
        //initial value
        var initialValue = this.fieldsValues && this.fieldsValues[field.getIdentifier()];
        if (initialValue) {
            var initValue = function() {
                field.setValue(initialValue);
                delete this.fieldsValues[field.getIdentifier()];
            }.bind(this);
            initValue();
            //если значения будут перекрыты браузером
            this._getDisposer().setTimeout(initValue, 100);
        }
        
        if (meta.setDefaults) {
            (Array.isArray(meta.setDefaults) ? meta.setDefaults : [meta.setDefaults])
                .forEach(function(type) {
                    croc.ui.form.Form.setFieldDefaults(type, field);
                });
        }
    },
    
    /**
     * Метод вызывается при удалении дочернего виджета
     * @param {croc.ui.Widget} item
     * @protected
     */
    _onRemoveItem: function(item) {
        if (this.__sumbitButton === item) {
            this.__sumbitButton = null;
        }
        
        if (item.getParentSection() !== 'fields') {
            return;
        }
        
        var field = /** @type {croc.ui.form.field.IField} */(item);
        this.__stateManager.removeItem(field);
        
        //activation
        if (this.__activateDisposer) {
            this.__activateDisposer.removeObject(field);
        }
        
        this.fireEvent('removeField', field);
    },
    
    /**
     * ajax-запрос был выполнен неудачно
     * @protected
     */
    _onSubmitFail: function(response) {},
    
    /**
     * ajax-запрос был выполнен удачно
     * @param response
     * @param values
     * @protected
     */
    _onSubmitSuccess: function(response, values) {},
    
    /**
     * Удалить дочерний элемент
     * @param {croc.ui.Widget} item
     * @protected
     */
    _removeItemElement: function(item) {
        if (item.getParentSection() === 'buttons') {
            item.getElement().remove();
        }
        else {
            var fieldWrapper = croc.ui.form.Form.getFieldWrapper(item);
            if (fieldWrapper.length) {
                fieldWrapper.remove();
            }
            else {
                item.getElement().remove();
            }
        }
        
        if (item.getParentSection() === 'buttons' && this.getItems('buttons').length === 0) {
            this.__buttonsRow.addClass('g-hidden');
        }
    },
    
    /**
     * Поиск элементов DOM для всех дочерних элементов
     * @param {jQuery} el
     * @return {Object.<string, jQuery>}
     * @protected
     */
    _scanForItemsElements: function(el) {
        return {
            fields: croc.ui.form.Form.findFieldsElements(el),
            buttons: el.find('.b-form-row>.b-sbutton-set .b-sbutton,' +
            '.b-form-input-h>.b-sbutton-set .b-sbutton,' +
            '.b-form-foot-cell>.b-sbutton,' +
            '.js-form-button').filter(':not(.js-form-ignore-button)')
        };
    },
    
    /**
     * @param {croc.ui.form.field.IField} field
     * @private
     */
    __activateForm: function(field) {
        if (this.__activateDisposer) {
            this.__activateDisposer.disposeAll();
            this.__activateDisposer = null;
            this.fireEvent('activate', field);
        }
    },
    
    /**
     * @private
     */
    __idFieldsLabels: function() {
        $.each(this.getItems('fields'), function(i, field) {
            if (croc.Interface.check(field, 'croc.ui.form.field.IHtmlControl')) {
                var label = croc.ui.form.Form.getFieldLabel(field);
                if (label.length && !label.attr('for')) {
                    label.attr('for', croc.ui.form.Helper.getFieldId(field));
                }
            }
        });
        
        this.getElement().find('[data-form-label-for]')
            .each(function(i, labelEl) {
                labelEl = $(labelEl);
                var identifier = labelEl.data('formLabelFor');
                var field = this.getItem(identifier);
                if (field && croc.Interface.check(field, 'croc.ui.form.field.IHtmlControl')) {
                    labelEl.attr('for', croc.ui.form.Helper.getFieldId(field));
                }
            }.bind(this));
    },
    
    /**
     * @param {croc.ui.form.field.IField} field
     * @private
     */
    __setUpFieldActivation: function(field) {
        if (this.__activateDisposer) {
            if (croc.Interface.check(field, 'croc.ui.form.field.IHtmlControl')) {
                this.__activateDisposer.addListener(field, 'focus', this.__activateForm.bind(this, field));
            }
            this.__activateDisposer.addListener(field.getElement(), 'mousedown',
                $.proxy(this.__activateForm, this, field));
        }
    },
    
    /**
     * @private
     */
    __setUpJsMarkers: function() {
        //ignore unsaved changes
        this.getElement().on('click', '.js-form-ignore-unsaved-changes', function() {
            this.setWarnUnsavedChanges(false);
        }.bind(this));
        
        //hide on update
        var hideOnUpdateMessages = this.getElement().find('.js-form-hide-on-update');
        if (hideOnUpdateMessages.length > 0) {
            this.__stateManager.once('updateStateChanged', function() {
                hideOnUpdateMessages.slideUp();
            });
        }
        
        //changed
        var changedMessage = this.getElement().find('.js-form-changed');
        if (changedMessage) {
            this.__stateManager.on('updateStateChanged', function(value) {
                changedMessage.toggle(value);
            });
        }
        
        //cancel
        this.getElement().on('click', '.js-form-reset', function() {
            if (!this.__submitController.isSubmitBlocked()) {
                this.reset();
            }
        }.bind(this));
        
        //hide replacing message
        this.getElement().on('click', '.js-form-hide-msg', function() {
            this.hideReplacingMessage();
        }.bind(this));
    },
    
    /**
     * @param {string|croc.ui.form.field.IField} field
     * @param {boolean} available
     * @param {string} selector
     * @param {string|Function} [toggleMethod=null] null|fade|slide - метод анимации появления/скрытия поля
     * @private
     */
    __toggleFieldVisibility: function(field, available, selector, toggleMethod) {
        var el = selector ? field.getElement().closest(selector) : croc.ui.form.Form.getFieldWrapper(field);
        if (!el.length) {
            el = field.getElement();
        }
        
        if (typeof toggleMethod === 'function') {
            toggleMethod(el, available);
        }
        else {
            if (!toggleMethod) {
                el.toggle(available);
            }
            else {
                var method = available ?
                    {fade: 'fadeIn', slide: 'slideDown'}[toggleMethod] :
                    {fade: 'fadeOut', slide: 'slideUp'}[toggleMethod];
                el[method]();
            }
        }
    }
});

croc.mix(croc.ui.form.Form, croc.ui.form.validation.MStandardValidatable);

_.assign(croc.ui.form.Form, {
    /**
     * Ищет элементы полей формы внутри переданного элемента
     * @param {jQuery} el
     * @returns {jQuery}
     */
    findFieldsElements: function(el) {
        return el.find(
            '.b-form-input-h:not(.js-form-ignore)>*:not(.b-sbutton-set,.b-form-check,.b-form-complex),' +
            '.js-form-include,' +
            '.b-form-input-h>.b-form-check .b-input-checkbox,' +
            '>input[type=hidden]').filter(':not(.js-form-ignore,.js-form-button)');
    },
    
    /**
     * @param {croc.ui.form.field.IField|jQuery} field
     * @returns {jQuery}
     * todo сделать определения и по id
     */
    getFieldLabel: function(field) {
        return croc.ui.form.Form.getFieldWrapper(field).find('.b-form-label label');
    },
    
    /**
     * Возвращает обрамляющий поле элемент
     * @param {croc.ui.form.field.IField|jQuery} field
     * @returns {jQuery}
     */
    getFieldWrapper: function(field) {
        if (!(field instanceof jQuery)) {
            field = field.getElement();
        }
        return field.closest('.b-form-row,.b-form-complex-cell');
    },
    
    /**
     * Назначить состояние по-умолчанию для поля (например, взять его из Stm.env)
     * todo перенести в helper
     * @param {string} fieldType 'userLocation'|'userName'|'userEmail'|'userPhone'|'userPhoneCountry'|'productName'
     * @param {croc.ui.form.field.IField} field
     */
    setFieldDefaults: function(fieldType, field) {
        var parentForm = field.getParentWidget();
        if (!field.isEmpty() ||
            (fieldType !== 'userPhoneCountry' && parentForm &&
            parentForm instanceof croc.ui.form.Form && parentForm.getStatus() !== 'normal')) {
            return;
        }
        
        //noinspection FallthroughInSwitchStatementJS
        switch (fieldType) {
            case 'userLocation':
                var location = croc.utils.objAccess('Stm.env.location');
                if (location &&
                        //указан определённый пункт, а не 1-0-0-0-0 (Россия)
                    parseInt(location.code.split('-').slice(1).join(''), 10) !== 0) {
                    
                    field.setValue({
                        value: location.code,
                        text: [location.country, location.region, location.city]
                            .filter(function(x) { return !!x; })
                            .join(', '),
                        hasMetro: !!location.hasMetro
                    });
                }
                break;
            
            case 'userName':
                var user = croc.utils.objAccess('Stm.env.user');
                if (!user) {
                    break;
                }
                
                var name = [user.lastname, user.firstname, user.patronymic]
                    .filter(function(x) { return !!x; })
                    .join(' ');
                
                if (name) {
                    field.setValue(name);
                }
                break;
            
            case 'userEmail':
            case 'userPhone':
            case 'productName':
                //userPhone -> user.phone
                var accessor = 'Stm.env.' + fieldType.replace(/[A-Z]/g, function(x) { return '.' + x.toLowerCase(); });
                var value = croc.utils.objAccess(accessor);
                if (value) {
                    field.setValue(value);
                }
                break;
            
            case 'userPhoneCountry':
                var locationCode = croc.utils.objAccess('Stm.env.location.code');
                if (locationCode) {
                    field.setCountry(locationCode.split('-')[0]);
                }
                break;
            
            default:
                throw new Error('Неизвестный тип поля: ' + fieldType);
        }
    }
});

croc.ui.WidgetsManager.getInstance().registerAlias(croc.ui.form.Form, 'croc.ui.form.Form');
},{}],32:[function(require,module,exports){
croc.ns('croc.ui.form');

croc.ui.form.Helper = {
    /**
     * возвращает/генерирует dom id для внутреннего элемента поля
     * @param {croc.ui.form.field.IHtmlControl} field
     * @param {string} [preferredId]
     * @return {string}
     */
    getFieldId: function(field, preferredId) {
        var store = croc.utils.objUserData(this, field);
        if (!store.fieldId) {
            if (field.getRendered()) {
                var el = field.getFieldElement().eq(0);
                store.fieldId = el.attr('id');
                if (!store.fieldId) {
                    el.attr('id', store.fieldId = (preferredId || croc.utils.getStmId()));
                }
            }
            else {
                store.fieldId = (preferredId || croc.utils.getStmId());
                field.once('changeRendered', function() {
                    var el = field.getFieldElement().eq(0);
                    el.attr('id', store.fieldId);
                });
            }
        }

        return store.fieldId;
    },

    /**
     * Генерирует id для поля
     * @param {croc.ui.form.field.IHtmlControl} field
     * @param {string} id
     */
    setFieldId: function(field, id) {
        this.getFieldId(field, id);
    },

    /**
     * @param {croc.ui.form.field.ComboBox} dayField
     * @param {croc.ui.form.field.IField} monthField
     * @param {croc.ui.form.field.IField} yearField
     */
    setUpDayField: function(dayField, monthField, yearField) {
        croc.Object.listenProperties(
            monthField, 'value',
            yearField, 'value',
            function() {
                var daysInMonth = new Date(
                    yearField.getPlainValue() || (new Date().getFullYear()),
                    monthField.getPlainValue() || 0, 0).getDate();

                var days = [];
                for (var i = daysInMonth + 1; i <= 31; ++i) {
                    var day = croc.utils.strPad(i.toString(), 2, '0');
                    days.push({text: day, value: day});
                }
                dayField.setExcludes(days);
            });
        
        var blurTimeout;
        dayField.on({
            blur: function() {
                blurTimeout = setTimeout(function(){
                    if (dayField.getPlainValue()) {
                        dayField.setValue(croc.utils.strPad(dayField.getPlainValue(), 2, '0'));
                    }
                }, 50);
            },
            focus: function() {
                clearTimeout(blurTimeout);
            }
        });
    },

    /**
     * Создаёт/инициализирует примеры для поля (поле должно принадлежать форме)
     * @param {croc.ui.form.field.ITextField} field
     * @param {Array.<string>} [examples]
     */
    setUpExamplesForField: function(field, examples) {
        if (examples) {
            var examplesStr = examples.map(function(x) {
                return '<span class="g-link g-pseudo js-example-link"><span class="g-pseudo-h">' + x + '</span></span>';
            }).join(' или ');
            field.getParentWidget().setFieldHint(field, 'Например, ' + examplesStr);
        }

        croc.ui.form.Form.getFieldWrapper(field).find('.js-example-link').click(function() {
            field.setValue($(this).text());
            field.focus();
        });
    }

};
},{}],33:[function(require,module,exports){
croc.ns('croc.ui.form');

/**
 * Класс хранит состояние формы (начальное и текущее). Даёт возможность отслеживать изменение/обновление состояния, а
 * также возвращения к начальному состоянию.
 * @extends {croc.Object}
 * @event changeStateChanged (value: {boolean})
 * @event updateStateChanged (value: {boolean})
 * @event updateState (item: {croc.ui.form.field.IField}, value: *) одно из полей формы было обновлено
 * @event changeState (item: {croc.ui.form.field.IField}, value: *) одно из полей формы было изменено
 */
croc.ui.form.StateManager = croc.extend(croc.Object, {

    /**
     * Не хранить в состоянии пустые значения
     * @type {boolean}
     */
    removeEmptyValue: true,

    init: function() {
        this.__fieldsValues = {};
        this.__items = [];
        this.__itemsOptions = {};
        this.__stateChanged = false;
        this.__stateUpdated = false;
        this.__values = null;
        this.__stateSaved = false;

        this.__disposer = new croc.util.Disposer();

        this.on('updateState', function(item, value) {
            var state = item && value !== undefined ? this.getState(item, value) : this.getState();
            var stateUpdated = this.__initialState !== state;
            if (stateUpdated !== this.__stateUpdated) {
                this.__stateUpdated = stateUpdated;
                this.fireEvent('updateStateChanged', stateUpdated);
            }
        }, this);

        this.on('changeState', function() {
            this.__values = null;
            var stateChanged = this.__initialState !== this.getState();
            if (stateChanged !== this.__stateChanged) {
                this.__stateChanged = stateChanged;
                this.fireEvent('changeStateChanged', stateChanged);
            }
        }, this);
    },

    /**
     * Добавить поле
     * @param {croc.ui.form.field.IField} item
     * @param {Object} [options={}]
     * @param {boolean} [options.dontReset=false]
     */
    addItem: function(item, options) {
        if ($.inArray(item, this.__items) !== -1) {
            return;
        }

        this.__items.push(item);
        this.__itemsOptions[croc.utils.objUniqueId(item)] = options || {};

        this.__disposer.addListener(item, 'changeValue', function(value) {
            if (this.__stateSaved) {
                this.fireEvent('updateState', item, item.getPlainValue());
                this.fireEvent('changeState', item, item.getPlainValue());
            }
        }, this);

        if (croc.Interface.check(item, 'croc.ui.form.field.IUpdatableField')) {
            this.__disposer.addListener(item, 'changeInstantValue', function(value) {
                if (this.__stateSaved) {
                    this.fireEvent('updateState', item, value);
                }
            }, this);
        }

        if (this.__stateSaved) {
            this.__values = null;
            this.fireEvent('updateState', item);
            this.fireEvent('changeState', item);
        }
    },

    /**
     * @param {croc.ui.form.field.IField} [updatedItem = null]
     * @param [updatedValue = null]
     * @returns {string}
     */
    getState: function(updatedItem, updatedValue) {
        var values = this.getValues();
        if (updatedItem) {
            values = _.assign({}, values);
            this.__mixValue(values, updatedItem, updatedValue);
        }
        return croc.utils.objToKey(values);
    },

    /**
     * @param {Array.<croc.ui.form.field.IField>} [ignoreItems=null] игнорировать значения переданных полей при сравнении состояния
     * @returns {boolean}
     */
    getStateChanged: function(ignoreItems) {
        if (!ignoreItems) {
            return this.__stateChanged;
        }

        var values = _.assign({}, this.getValues());
        var initialValues = _.assign({}, this.__initialValues);
        $.each(ignoreItems, function(i, item) {
            var exported = item.exportValues();
            if (exported) {
                _.forOwn(exported, function(value, key) {
                    delete values[key];
                    delete initialValues[key];
                });
            }
            else if (item.getIdentifier()) {
                delete values[item.getIdentifier()];
                delete initialValues[item.getIdentifier()];
            }
        });

        return croc.utils.objToKey(values) !== croc.utils.objToKey(initialValues);
    },

    /**
     * @returns {Object}
     */
    getValues: function() {
        if (this.__values) {
            return this.__values;
        }

        var values = {};
        this.__items.forEach(function(item) {
            this.__mixValue(values, item, item.getPlainValue());
        }, this);

        this.__values = values;
        return values;
    },

    /**
     * Удалить поле
     * @param {croc.ui.form.field.IField} item
     */
    removeItem: function(item) {
        if (!croc.utils.arrRemove(this.__items, item)) {
            return;
        }
        this.__disposer.removeObject(item);
        this.fireEvent('updateState', item);
        this.fireEvent('changeState', item);
        delete this.__itemsOptions[croc.utils.objUniqueId(item)];
    },

    /**
     * Сбросить значения полей на изначальные
     */
    reset: function() {
        this.__items.forEach(function(item) {
            var id = croc.utils.objUniqueId(item);
            if (!this.__itemsOptions[id].dontReset) {
                item.setValue(this.__fieldsValues.hasOwnProperty(id.toString()) ? this.__fieldsValues[id] : null);
            }
        }, this);
    },

    /**
     * Принять за изначальные значения полей текущие
     */
    saveState: function() {
        var $this = this;
        this.__fieldsValues = {};
        $.each(this.__items, function(i, item) {
            $this.__fieldsValues[croc.utils.objUniqueId(item)] = item.getValue();
        });

        this.__initialValues = _.cloneDeep(this.getValues());
        this.__initialState = this.getState();
        this.__stateSaved = true;

        this.fireEvent('updateState');
        this.fireEvent('changeState');
    },

    /**
     * @param values
     * @param item
     * @param value
     * @private
     */
    __mixValue: function(values, item, value) {
        var exported = item.exportValues();
        if (exported) {
            _.assign(values, exported);
        }
        else if (item.getIdentifier()) {
            if (this.removeEmptyValue && item.isEmpty(value)) {
                delete values[item.getIdentifier()];
            }
            else {
                values[item.getIdentifier()] = value;
            }
        }
    }
});

},{}],34:[function(require,module,exports){
/**
 * Базовый класс для чекбокса и радиокнопки
 */
croc.Class.define('croc.ui.form.field.AbstractCheckButton', {
    extend: croc.ui.form.field.AbstractHtmlControl,
    implement: croc.ui.form.field.ISizable,
    include: croc.ui.form.field.MStandardSizable,

    properties: {
        /**
         * отмечена ли кнопка
         * @type {boolean}
         */
        checked: {
            getter: function() {
                return !!this.getValue();
            },
            setter: function(checked) {
                if (this.__booleanValue === undefined && this.__permanentValue === undefined) {
                    this.__setChecked = checked;
                }
                else {
                    this.setValue(this.__booleanValue ? checked : checked ? this.__permanentValue : null);
                }
            },
            option: true,
            event: true
        },

        /**
         * Цветовая схема
         * @type {string}
         */
        scheme: {
            cssClass: true,
            type: 'string',
            value: 'system',
            option: true
        },

        /**
         * @type {string|boolean}
         */
        value: {
            type: ['string', 'boolean'],
            inherit: true
        }
    },

    options: {
        /**
         * Если true, то свойство value будет равняться свойству checked. Иначе, value будет null если checked === false и
         * будет равен permanentValue в противном случае.
         * Если permanentValue=null, то booleanValue=true
         * @type {boolean}
         */
        booleanValue: {
            type: 'boolean',
            value: true
        },

        /**
         * мета-данные для добавления дочернего виджета
         * @type {object}
         */
        meta: {
            value: {
                openTooltipAnyway: true
            }
        },

        /**
         * атрибут value поля
         * @type {string}
         */
        permanentValue: {
            type: 'string'
        }
    },

    members: {
        /**
         * Возвращает значение противоположное текущему
         * @type {boolean|string}
         */
        getOppositeValue: function() {
            return this.__booleanValue ? !this.getChecked() :
                this.getChecked() ? null : this.getPermanentValue();
        },

        /**
         * Атрибут value поля
         * @returns {string}
         */
        getPermanentValue: function() {
            return this.__permanentValue;
        },

        /**
         * @param value
         * @param old
         * @protected
         */
        _applyValue: function(value, old) {
            if (this.getElement()) {
                this.getFieldElement().prop('checked', !!value);
                this.getElement().toggleClass('state_checked', !!value);
                this.getFieldElement().trigger('change');
            }
            this.fireEvent('changeChecked', this.getChecked(), !this.getChecked());
        },

        /**
         * Дополнительные данные для рендеринга из шаблона
         * @param {Object} options
         * @returns {object}
         * @protected
         */
        _getAddRenderData: function(options) {
            return _.assign(croc.ui.form.field.AbstractCheckButton.superclass._getAddRenderData.apply(this, arguments), {
                checked: this.getChecked() ? 'checked="checked"' : '',
                stateChecked: this.getChecked() ? 'state_checked' : '',
                permanentValue: this.getPermanentValue() || ''
            });
        },

        /**
         * Возвращает внутреннее (сырое) значение поля
         * @protected
         */
        _getFieldValue: function() {
            var element = this.getFieldElement();
            return element && element.prop('checked') ?
                (this.__booleanValue ? true : this.__permanentValue) :
                (this.__booleanValue ? false : null);
        },

        /**
         * Инициализация виджета после его отрисовки в DOM
         * @return {$.Deferred|undefined}
         * @protected
         */
        _initWidget: function() {
            croc.ui.form.field.AbstractCheckButton.superclass._initWidget.call(this);

            this.__setUpAbstractHtmlControlBehavior();

            //IE bug fix
            if (croc.util.Browser.isIE('<=10')) {
                this._getDisposer().setTimeout(function() {
                    if (this.getValue() !== this._getFieldValue()) {
                        this.setValue(this._getFieldValue());
                    }
                }.bind(this), 100);
            }
        },

        /**
         * Выполняется когда свойства виджета уже инициализированы
         * @param {Object} options
         * @protected
         */
        _onPropertiesInitialized: function(options) {
            if (this.getElement()) {
                if (!options.permanentValue) {
                    options.permanentValue = this.getFieldElement()[0].getAttribute('value');
                }
                else if (!this.getFieldElement()[0].getAttribute('value')) {
                    this.getFieldElement().val(options.permanentValue);
                }
            }

            if (!options.permanentValue && !options.booleanValue) {
                options.booleanValue = true;
            }

            if (typeof options.checked === 'boolean') {
                options.value = options.booleanValue ? options.checked : (options.checked ? options.permanentValue : null);
            }

            this.__booleanValue = options.booleanValue;
            this.__permanentValue = options.permanentValue;

            if (this.__setChecked) {
                this.setChecked(this.__setChecked);
            }

            croc.ui.form.field.AbstractCheckButton.superclass._onPropertiesInitialized.apply(this, arguments);
        },

        /**
         * @private
         */
        __setUpAbstractHtmlControlBehavior: function() {
            var container = this.getElement().parents('label:last');
            if (!container.length) {
                container = this.getElement();
            }

            container.mousedown(function() {
                this.getElement().addClass('state_active');

                var descriptor = this._getDisposer().addListener($(document), 'mousedown mouseup', function(e) {
                    if (e.type === 'mousedown' && (container[0] === e.target || $.contains(container[0], e.target))) {
                        return;
                    }
                    this._getDisposer().disposeItem(descriptor);
                    this.getElement().removeClass('state_active');
                }.bind(this));
            }.bind(this));

            container.hover(function() {
                this.getElement().toggleClass('state_hover');
            }.bind(this));
        }
    }
});

},{}],35:[function(require,module,exports){
croc.ns('croc.ui.form.field');

/**
 * Группа чекбоксов/радиокнопок
 * Дочерний виджет может содержать мета данные:
 * label: string
 * inline: boolean
 *
 * @abstract
 * @extends {croc.ui.Container}
 * @mixes {croc.ui.form.field.MStandardField}
 * @implements {croc.ui.form.field.IField}
 * @implements {croc.ui.form.field.ISizable}
 * @implements {croc.ui.form.field.IDisable}
 * @event changeValue (value: *, oldValue: *) значение поля было изменено программно, либо после потери фокуса
 */
croc.ui.form.field.AbstractCheckGroup = croc.extend(croc.ui.Container, {

    __TEMPLATE_CHECK_BUTTONS_GROUP: [
        '<div class="b-form-group dir_{dir} type_{type}{cls}">',
        '   {items}',
        '</div>'
    ].join(''),

    __TEMPLATE_CHECK_BUTTON_WRAPPER: [
        '<div class="b-form-check size_{size} js-wrapper">',
        '   <label class="g-ui cursor_pointer">{item} {label}</label>',
        '</div>'
    ].join(''),

    /**
     * Отметить первую кнопку в группе, если ни одна не отмечена
     * @type {boolean}
     */
    checkFirst: false,

    /**
     * Заблокировано ли поле
     * @type {boolean}
     */
    disabled: false,

    /**
     * Должны ли кнопки идти в ряд. true - соответствует dir_ttb, false - dir_ltr
     * @type {boolean}
     */
    inline: false,

    /**
     * Конфигурация по-умолчанию добавляемая к items
     * @type {Object.<string, object>|object}
     */
    itemDefaults: {
        items: {
        }
    },

    /**
     * Искать все радиокнопки/чекбоксы внутри элемента, не придерживаясь строгой структуры
     * @type {boolean}
     */
    lookForAllCheckButtons: false,

    /**
     * мета-данные для добавления дочернего виджета
     * @type {object}
     */
    meta: {
        openTooltipAnyway: true
    },

    /**
     * Размер дочерних кнопок
     * @type {string}
     */
    size: null,

    /**
     * тип группы
     * @type {string}
     */
    type: null,

    /**
     * Является ли поле недоступным
     * @returns {boolean}
     */
    getDisabled: function() {
        return this.disabled;
    },

    /**
     * Размер дочерних кнопок
     * @return {string}
     */
    getSize: function() {
        return this.size;
    },

    /**
     * Значение поля
     * @return {*}
     */
    getValue: function() {
        return this.value;
    },

    /**
     * Возвращает true если кнопки выстроены в линию
     * @returns {boolean}
     */
    isInline: function() {
        return this.inline;
    },

    /**
     * Изменить недоступность поля
     * @param {boolean} value
     */
    setDisabled: function(value) {
        $.each(this.getItems(), function(i, button) {
            button.setDisabled(value);
        });
        this.getElement().toggleClass('state_disabled', value);
        this.disabled = value;
    },

    /**
     * Изменить размер дочерних кнопок
     * @param {string} size
     */
    setSize: function(size) {
        this.size = size;
        this.itemDefaults.items.size = size;
    },

    /**
     * Изменить значение поля
     * @param {*} value
     */
    setValue: function(value) {
        if (this.value !== value) {
            var oldValue = this.value;
            this._setValueInternal(value);
            this._doSetValue(value);
            this.fireEvent('changeValue', value, oldValue);
        }
    },

    /**
     * Изменение значения группы
     * @param value
     * @protected
     */
    _doSetValue: function(value) { throw 'abstract!'; },

    /**
     * Дополнительные данные для рендеринга из шаблона
     * @param {Object} options
     * @returns {object}
     * @protected
     */
    _getAddRenderData: function(options) {
        return _.assign(croc.ui.form.field.AbstractCheckGroup.superclass._getAddRenderData.apply(this, arguments), {
            dir: this.dir,
            type: options.type
        });
    },

    /**
     * Изменение значения группы
     * @returns {string}
     * @protected
     */
    _getButtonClass: function() { throw 'abstract!'; },

    /**
     * Шаблон для обрамления дочернего элемента. Должен присутствовать маркер {item}.
     * @param {string} section
     * @param {croc.ui.Widget} item дочерний виджет
     * @returns {string}
     * @protected
     */
    _getItemWrapperTemplate: function(section, item) {
        var field = /** @type {croc.ui.form.field.AbstractCheckButton} */(item);
        return this.__TEMPLATE_CHECK_BUTTON_WRAPPER.render({
            label: item.getMeta().label || '',
            size: field.getSize()
        });
    },

    /**
     * Шаблон для элемента
     * @return {$.Deferred|string}
     * @protected
     */
    _getTemplate: function() {
        return this.__TEMPLATE_CHECK_BUTTONS_GROUP;
    },

    /**
     * Инициализация виджета после его отрисовки в DOM
     * @return {$.Deferred|undefined}
     * @protected
     */
    _initWidget: function() {
        croc.ui.form.field.AbstractCheckGroup.superclass._initWidget.call(this);
        if (this.value) {
            this.setValue(this.value);
        }

        if (this.checkFirst && !this.getValue() && this.getItems().length) {
            this.getItems()[0].setChecked(true);
        }

        if (this.disabled) {
            this.setDisabled(true);
        }
    },

    /**
     * Вставить дочерний элемент в определённую секцию
     * @param {string} section
     * @param {jQuery} elements
     * @param {jQuery} beforeElement
     * @param {Array.<croc.ui.Widget>} widgets
     * @protected
     */
    _insertItems: function(section, elements, beforeElement, widgets) {
        if (beforeElement) {
            beforeElement.closest('.b-form-check').before(elements);
        }
        else {
            this.getElement().append(elements);
        }
    },

    /**
     * Метод вызывается при добавлении нового дочернего элемента
     * @param {string} section
     * @param {croc.ui.Widget} item
     * @protected
     */
    _onAddItem: function(section, item) {
        if (section === 'items') {
            var field = /** @type {croc.ui.form.field.RadioButton} */(item);
            if (!this.size) {
                this.setSize(field.getSize());
            }
        }
    },

    /**
     * Выполняется когда свойства виджета уже инициализированы
     * @protected
     */
    _onPropertiesInitialized: function() {
        croc.ui.form.field.AbstractCheckGroup.superclass._onPropertiesInitialized.apply(this, arguments);

        if (this.size) {
            this.setSize(this.size);
        }

        this.dir = this.inline ? 'ltr' : 'ttb';

        if (this.getElement()) {
            this.inline = this.getElement().hasClass('dir_ltr');
        }
    },

    /**
     * Удалить дочерний элемент
     * @param {croc.ui.Widget} item
     * @protected
     */
    _removeItemElement: function(item) {
        item.getElement().closest('.b-form-check').remove();
    },

    /**
     * Поиск элементов DOM для всех дочерних элементов
     * @param {jQuery} el
     * @return {Object.<string, jQuery>}
     * @protected
     */
    _scanForItemsElements: function(el) {
        return {
            items: el.find(this.lookForAllCheckButtons ?
                '.' + this._getButtonClass() : '>.b-form-check>label>.' + this._getButtonClass())
        };
    },

    /**
     * @param value
     * @protected
     */
    _setValueInternal: function(value) {
        this.value = value;
    }
});

croc.implement(croc.ui.form.field.AbstractCheckGroup,
    croc.ui.form.field.IField,
    croc.ui.form.field.ISizable,
    croc.ui.form.field.IDisable);

croc.mix(croc.ui.form.field.AbstractCheckGroup,
    croc.ui.form.field.MStandardField);

},{}],36:[function(require,module,exports){
/**
 * Абстракция над html полем (select, textarea, input)
 */
croc.Class.define('croc.ui.form.field.AbstractHtmlControl', {
    extend: croc.ui.Widget,

    implement: [
        croc.ui.form.field.IDisable,
        croc.ui.form.field.IHtmlControl
    ],

    include: [
        croc.ui.form.field.MStandardField,
        croc.ui.form.field.MStandardDisable
    ],

    events: {
        blur: null,
        focus: null
    },

    properties: {
        value: {
            value: null,
            field: '__value',
            apply: '_applyValue',
            option: true,
            event: true
        }
    },

    options: {
        /**
         * Управлять фокусом поля
         * @type {boolean}
         */
        manageFocus: true,

        /**
         * атрибут tabindex
         * @type {string|number}
         */
        tabIndex: {},

        /**
         * Таймаут перед назначением классов state_valid/state_error
         * @type {number}
         */
        _changeValidClassTimeout: 50,

        /**
         * Использовать проверку изменения значения по событию blur, вместо change
         * @type {boolean}
         */
        _checkValueOnBlur: false
    },

    members: {
        /**
         * Убрать фокус у элемента
         */
        blur: function() {
            this.getFieldElement().blur();
        },

        /**
         * Дать фокус элементу
         */
        focus: function() {
            this.getFieldElement().focus();
        },

        /**
         * Html-элемент поля
         * @return {jQuery}
         */
        getFieldElement: function() { throw 'abstract!'; },

        /**
         * Управляет ли компонент фокусом поля
         * @type {boolean}
         */
        managesFocus: function() {
            return this.__manageFocus;
        },

        /**
         * Применить заблокированное состояние поля
         * @param {boolean} value
         * @protected
         */
        _applyDisabled: function(value) {
            if (this.getElement()) {
                this.getFieldElement()[0].disabled = value;
            }
        },

        /**
         * @param value
         * @param old
         * @protected
         */
        _applyValue: function(value, old) {
            if (this.getElement()) {
                this.getFieldElement().val(value || '');
                this.getFieldElement().trigger('change');
            }
        },

        /**
         * Дополнительные данные для рендеринга из шаблона
         * @param {Object} options
         * @returns {object}
         * @protected
         */
        _getAddRenderData: function(options) {
            return _.assign(croc.ui.form.field.AbstractHtmlControl.superclass._getAddRenderData.apply(this, arguments), {
                name: options.identifier || '',
                tabIndex: options.tabIndex || options.tabIndex === 0 ? ' tabindex="' + options.tabIndex + '"' : ''
            });
        },

        /**
         * Возвращает внутреннее (сырое) значение поля
         * @protected
         */
        _getFieldValue: function() {
            return this.getFieldElement() && this.getFieldElement().val();
        },

        /**
         * Инициализация виджета после его отрисовки в DOM
         * @return {$.Deferred|undefined}
         * @protected
         */
        _initWidget: function() {
            croc.ui.form.field.AbstractHtmlControl.superclass._initWidget.call(this);

            this.__setUpBehavior();
        },

        /**
         * Выполняется когда свойства виджета уже инициализированы
         * @param {Object} options
         * @protected
         */
        _onPropertiesInitialized: function(options) {
            croc.ui.form.field.AbstractHtmlControl.superclass._onPropertiesInitialized.apply(this, arguments);

            this.__value = options.value;
            this.__checkValueOnBlur = options._checkValueOnBlur;
            this.__manageFocus = options.manageFocus;

            if (this.getElement()) {
                if (!options.identifier) {
                    options.identifier = this.getFieldElement().attr('name') || null;
                }
                else if (options.identifier && !this.getFieldElement().attr('name')) {
                    this.getFieldElement().attr('name', this.getIdentifier());
                }

                if (this.getFieldElement()[0].disabled) {
                    this.setDisabled(true);
                }

                if (this.getValue() !== this._getFieldValue()) {
                    this.__value = this._getFieldValue() || null;
                }
            }
        },

        /**
         * @private
         */
        __setUpBehavior: function() {
            var fieldEl = this.getFieldElement();

            var handlers = {
                focus: function() {
                    if (this.__manageFocus) {
                        this.getElement().addClass('state_focus');
                        this.fireEvent('focus');
                    }
                }.bind(this),
                blur: function() {
                    if (this.__checkValueOnBlur && this.getValue() !== this._getFieldValue()) {
                        this.setValue(this._getFieldValue());
                    }
                    if (this.__manageFocus) {
                        this.getElement().removeClass('state_focus');
                        this.fireEvent('blur');
                    }
                }.bind(this)
            };

            if (!this.__checkValueOnBlur) {
                handlers.change = function() {
                    this.setValue(this._getFieldValue());
                }.bind(this);
            }

            fieldEl.on(handlers);

            if (this.__manageFocus && fieldEl.is(':focus')) {
                this.getElement().addClass('state_focus');
            }
        }
    }
});

},{}],37:[function(require,module,exports){
/**
 * Абстракция над полем ввода (text/textarea)
 */
croc.Class.define('croc.ui.form.field.AbstractTextField', {
    type: 'abstract',
    extend: croc.ui.form.field.AbstractHtmlControl,

    implement: [
        croc.ui.form.field.ISizable,
        croc.ui.form.field.IUpdatableField,
        croc.ui.form.field.ITextField
    ],

    include: croc.ui.form.field.MStandardSizable,

    statics: {
        /**
         * враппер для ячеек поля
         * @static
         */
        CELL_WRAPPER: '<div class="b-input-cell">{item}</div>',

        /**
         * враппер поля для ячеек с кнопкой
         * @static
         */
        CELL_BUTTON_WRAPPER: '<div class="b-input-cell cell_button">{item}</div>',

        /**
         * @private
         * @static
         */
        __LISTEN_VALUE_CHANGE_INTERVAL: 10,

        /**
         * @private
         * @static
         */
        __TEMPLATE_TEST_ELEMENT: '<div class="b-input-field-h" style="position: absolute; top: 0; left: 0; padding-right: 0; visibility: hidden; width: auto;"></div>'
    },

    events: {
        /**
         * @param {string} action
         * @param {string} old
         */
        changeAction: null
    },

    properties: {
        /**
         * Выравнивание текста
         * @type {string}
         */
        align: {
            cssClass: true,
            check: ['left', 'right', 'center'],
            option: true
        },

        /**
         * @type {string}
         */
        instantValue: {
            field: '__instantValue',
            getter: null,
            __setter: null,
            transform: '_transformInstantValue',
            event: true
        },

        /**
         * плэйсхолдер для поля
         * @type {string}
         */
        placeholder: {
            type: 'string',
            event: true,
            option: true
        },

        /**
         * Функция трансформации значения поля после его смены
         * @type {function(*):*}
         */
        transformOnChange: {
            type: 'function',
            transform: function(value) {
                return croc.ui.form.field.transform.createTransformFunction(value);
            },
            option: true
        },

        /**
         * Транформация значения каждый update поля
         * @type {function(string):string}
         */
        transformOnUpdate: {
            type: 'function',
            transform: function(value) {
                return croc.ui.form.field.transform.createTransformFunction(value);
            },
            option: true
        },

        /**
         * @type {string}
         */
        value: {
            type: 'string',
            transform: '_transformValue',
            inherit: true
        }
    },

    options: {
        /**
         * Добавить ячейки в конец поля
         * @type {string|Array.<string>|croc.ui.Widget|Array.<Widget>}
         */
        cellsAfter: {},

        /**
         * Добавить ячейки после ячейки с input
         * @type {string|Array.<string>|croc.ui.Widget|Array.<Widget>}
         */
        cellsAfterInput: {},

        /**
         * Добавить ячейки в начало поля
         * @type {string|Array.<string>|croc.ui.Widget|Array.<Widget>}
         */
        cellsBefore: {},

        /**
         * Плэйсхолдер скрывается не полностью в процессе заполнения поля
         */
        compositePlaceholder: {
            type: 'boolean',
            value: false
        },

        /**
         * Класс type_... корневого элемента
         * @type {string}
         */
        cssType: {
            required: true
        },

        /**
         * Указывает как следует реагировать при изменении внутреннего значения поля извне (в обход API TextField).
         * Возможные значения: null - нет реакции, 'change' - изменить внешнее значение, 'update' - вызывать событие update
         * @type {String}
         */
        externalChangeReaction: {
            check: ['change', 'update']
        },

        /**
         * Шаблон по-умолчанию
         * @type {string}
         */
        htmlTemplate: '' +
            '<label class="b-input set_default type_{cssType}{cls}">' +
            '   <div class="b-input-h">' +
            '       {before}' +
            '       <div class="b-input-cell cell_field">' +
            '           <div class="b-input-field">' +
            '               <div class="b-input-field-placeholder">{placeholder}</div>' +
            '               <{inputTag} name="{name}" class="b-input-field-h"{inputAttrs}{tabIndex}>{inputTagEnd}' +
            '           </div>' +
            '       </div>' +
            '       {afterInput}' +
            '       <div class="b-input-cell cell_action">' +
            '           <div class="b-input-action role_reset"></div>' +
            '           <div class="b-input-action role_loader"></div>' +
            '           <div class="b-input-action role_unfold"></div>' +
            '       </div>' +
            '       <div class="b-input-cell cell_validation">' +
            '           <div class="b-input-validation"></div>' +
            '       </div>' +
            '       {after}' +
            '   </div>' +
            '</label>',

        /**
         * Функция очистки поля (по нажатию на кнопку reset)
         * @type {function(croc.ui.form.field.AbstractTextField)}
         */
        resetFn: function(field) {
            field.setValue('');
        },

        /**
         * Особенности выделения текста внутри поля
         * smartSelectOnClick - если текст выделен полностью, то клик приведёт к сбросу выделения, иначе текст выделяется
         * полностью
         * selectOnFocus - текст выделяется только при фокусе элемента
         * @type {string}
         */
        selectionBehavior: {
            check: ['smartSelectOnClick', 'selectOnFocus']
        },

        /**
         * Показывать ли экшен у поля
         * @type {Boolean}
         */
        showAction: {
            type: 'boolean',
            value: true
        },

        /**
         * Показывать ли крестик для сброса значения поля или нет
         * @type {Boolean}
         */
        showReset: {
            type: 'boolean',
            value: true
        },

        /**
         * Использовать проверку изменения значения по событию blur, вместо change
         * @type {boolean}
         */
        _checkValueOnBlur: true
    },

    members: {
        /**
         * Текущий экшен поля (reset, loader и т.д.)
         * @return {String}
         */
        getAction: function() {
            return this.__action || null;
        },

        /**
         * Возвращает элемент-контэйнер для элементов-экшенов
         * @return {jQuery}
         */
        getActionsContainer: function() {
            return this.__actionElement.getElement();
        },

        /**
         * Экшен поля по-умолчанию (активируется при вызове resetAction)
         * @return {String}
         */
        getDefaultAction: function() {
            return this.__defaultAction;
        },

        /**
         * Html-элемент поля
         * @return {jQuery}
         */
        getFieldElement: function() {
            return this.__fieldElement ||
                (this.getElement() && (this.__fieldElement = this.getElement().find('.b-input-field-h')));
        },

        /**
         * Пробелы на концах значения являются важными и их нельзя обрезать
         * @returns {boolean}
         */
        keepWhiteSpace: function() {
            return false;
        },

        /**
         * Передвинуть каретку в конец поля
         */
        moveCursorToEnd: function() {
            croc.utils.domSetCaretPos(this.getFieldElement(), this.getFieldElement().val().length);
        },

        /**
         * Установить экшен по-умолчанию
         */
        resetAction: function() {
            this.setAction(this.__defaultAction, this.__defaultActionCallback);
        },

        /**
         * Установить экшен поля (reset, loader и т.д.)
         * @param {String} action
         * @param {Function} [callback=null] функция будет вызвана при клике на экшен-элемент
         */
        setAction: function(action, callback) {
            var oldAction = this.__action;
            this.__action = action;
            this.__actionCallback = callback;
            if (this.__showAction) {
                this.__actionElement.setRole(action);
                this.__actionElement.setProperty('state_active', !!action);
            }

            if (oldAction !== action) {
                this.fireEvent('changeAction', action, oldAction);
            }
        },

        /**
         * Установить экшен по-умолчанию
         * @param action
         * @param [callback=null]
         */
        setDefaultAction: function(action, callback) {
            this.__defaultAction = action;
            this.__defaultActionCallback = callback;
        },

        /**
         * Изменить значение поля, игнорируя трансформацию
         * @param {string} value
         */
        setValueWithoutTransform: function(value) {
            var transformOnUpdate = this.getTransformOnUpdate();
            var transformOnChange = this.getTransformOnChange();
            this.setTransformOnUpdate(null);
            this.setTransformOnChange(null);
            this.setValue(value);
            this.setTransformOnUpdate(transformOnUpdate);
            this.setTransformOnChange(transformOnChange);
        },

        /**
         * Дополнительные данные для рендеринга из шаблона
         * @param {Object} options
         * @returns {object}
         * @protected
         */
        _getAddRenderData: function(options) {
            function getCellsHtml(cells) {
                return !cells ? '' : cells.map(function(cell) {
                    return cell instanceof croc.ui.Widget ? croc.utils.defSync(cell.createHtml()) : cell;
                }).join('');
            }

            return _.assign(croc.ui.form.field.AbstractTextField.superclass._getAddRenderData.apply(this, arguments), {
                placeholder: options.placeholder || '',
                name: options.identifier,
                before: getCellsHtml(this.__cellsBefore),
                after: getCellsHtml(this.__cellsAfter),
                afterInput: getCellsHtml(this.__cellsAfterInput),
                cssType: options.cssType
            });
        },

        /**
         * Инициализация виджета после его отрисовки в DOM
         * @return {$.Deferred|undefined}
         * @protected
         */
        _initWidget: function() {
            croc.ui.form.field.AbstractTextField.superclass._initWidget.call(this);

            //elements
            this.__actionElement = croc.ui.Element.create(this.getElement().find('.b-input-cell.cell_action'), 'role');

            this.__setUpAbstractTextFieldBehavior();
            this.__setUpPlaceholder();
            this.__setUpSuggest();
            this.__setUpActions();
            this.__initCells();

            if (this.__selectionBehavior) {
                this.__setUpSelectionBehavior();
            }

            if (croc.util.Browser.isIE(8)) {
                this.getFieldElement().on('keypress', function(e) {
                    var parentForm;
                    if (e.keyCode === 13/*ENTER*/ && (parentForm = this.getElement().closest('form')).length) {
                        parentForm.submit();
                    }
                }.bind(this));
            }
        },

        /**
         * Выполняется когда свойства виджета уже инициализированы
         * @param {Object} options
         * @protected
         */
        _onPropertiesInitialized: function(options) {
            this.__externalChangeReaction = options.externalChangeReaction;
            this.__selectionBehavior = options.selectionBehavior;
            this.__showAction = options.showAction;
            this.__showReset = options.showReset;
            this.__compositePlaceholder = options.compositePlaceholder;
            this.__checkValueOnBlur = options._checkValueOnBlur;
            this.__resetFn = options.resetFn;

            function mapCells(cells) {
                return cells && (Array.isArray(cells) ? cells : [cells]).map(function(cell) {
                    if (typeof cell === 'object' && !(cell instanceof croc.ui.Widget)) {
                        return new cell.xtype(_.omit(cell, 'xtype'));
                    }
                    return cell;
                });
            }

            this.__cellsAfter = mapCells(options.cellsAfter);
            this.__cellsBefore = mapCells(options.cellsBefore);
            this.__cellsAfterInput = mapCells(options.cellsAfterInput);

            croc.ui.form.field.AbstractTextField.superclass._onPropertiesInitialized.apply(this, arguments);

            this.__instantValue = this.getValue();
            this.on('changeValue', function(value) {
                this.__setInstantValue(value);
            }, this);

            if (options.compositePlaceholder && !this.getTransformOnChange()) {
                this.setTransformOnChange(croc.ui.form.field.transform.trimLeftAndMultiSpaces);
            }
        },

        /**
         * @param value
         * @param old
         * @returns {string}
         * @protected
         */
        _transformInstantValue: function(value, old) {
            var newValue = this.getTransformOnUpdate() ? this.getTransformOnUpdate()(value, old) : value;
            if (this.getFieldElement() && newValue !== value && newValue !== (this._getFieldValue() || null)) {
                this.getFieldElement().val(newValue);
                this._internalChangeTriggering = true;
                this.getFieldElement().change();
                this._internalChangeTriggering = false;
            }
            return newValue;
        },

        /**
         * @param value
         * @param old
         * @returns {string}
         * @protected
         */
        _transformValue: function(value, old) {
            var instantValue = this.getInstantValue();
            if (value !== instantValue && old !== instantValue) {
                this.setValue(instantValue);
            }
            return this.getTransformOnChange() ? this.getTransformOnChange()(value, old) : value;
        },
        /**
         * @private
         */
        __initCells: function() {
            var cells = this.getElement().find('.b-input-cell');
            if (this.__cellsBefore) {
                this.__cellsBefore.forEach(function(cell, index) {
                    if (cell instanceof croc.ui.Widget) {
                        cell.initWith(cells.eq(index));
                    }
                }, this);
            }
            if (this.__cellsAfter) {
                this.__cellsAfter.forEach(function(cell, index) {
                    if (cell instanceof croc.ui.Widget) {
                        cell.initWith(cells.eq(-index - 1));
                    }
                }, this);
            }
            if (this.__cellsAfterInput) {
                var fieldIndex = cells.index(cells.filter('.cell_field'));
                this.__cellsAfterInput.forEach(function(cell, index) {
                    if (cell instanceof croc.ui.Widget) {
                        cell.initWith(cells.eq(fieldIndex + index + 1));
                    }
                }, this);
            }
        },

        /**
         * @private
         */
        __setUpAbstractTextFieldBehavior: function() {
            var inputEl = this.getFieldElement();

            inputEl
                .on('input propertychange keyup focus blur', function(e) {
                    this.__setInstantValue(this._getFieldValue());
                }.bind(this))
                .on('cut', function() {
                    this._getDisposer().defer(function() {
                        this.__setInstantValue(this._getFieldValue());
                    }, this);
                }.bind(this));

            if (this.__externalChangeReaction) {
                this._getDisposer().setInterval(function() {
                    if (this.__externalChangeReaction === 'update') {
                        this.__setInstantValue(this._getFieldValue());
                    }
                    else {
                        this.setValue(this._getFieldValue());
                    }
                }.bind(this), croc.ui.form.field.AbstractTextField.__LISTEN_VALUE_CHANGE_INTERVAL);
            }

            this.getElement().mousedown(_.throttle(this.disposableFunc(function() {
                this.getFieldElement().focus();
            }, this)));
        },

        /**
         * @private
         */
        __setUpActions: function() {
            if (this.__showReset) {
                this.listenProperty('instantValue', function(value) {
                    if (value) {
                        if (!this.getDefaultAction()) {
                            this.setDefaultAction('reset', _.partial(this.__resetFn, this));
                        }
                        if (!this.getAction()) {
                            this.resetAction();
                        }
                    }
                    else {
                        if (this.getDefaultAction() === 'reset') {
                            this.setDefaultAction(null);
                        }
                        if (this.getAction() === 'reset') {
                            this.setAction(null);
                        }
                    }
                }, this);
            }

            if (this.__showAction) {
                this.__actionElement.getElement().on({
                    click: function() {
                        return this.__actionCallback ? this.__actionCallback() : undefined;
                    }.bind(this)
                });
            }
        },

        /**
         * @param {croc.ui.Element} placeholderEl
         * @private
         */
        __setUpCompositePlaceholder: function(placeholderEl) {
            this.__testElement = $(croc.ui.form.field.AbstractTextField.__TEMPLATE_TEST_ELEMENT)
                .insertBefore(this.getFieldElement());

            var update = function() {
                this.__updateCompositeTestElement();
                this.__updateCompositePlaceholder(placeholderEl);
            }.bind(this);

            croc.Object.listenProperties(this, 'placeholder', this, 'instantValue', update);
            this.onAppear(update);
        },

        /**
         * @private
         */
        __setUpPlaceholder: function() {
            var placeholderEl = croc.ui.Element.create(this.getElement().find('.b-input-field-placeholder'));
            var fieldEl = this.getFieldElement();

            if (fieldEl.attr('placeholder')) {
                this.setPlaceholder(fieldEl.attr('placeholder'));
                fieldEl.removeAttr('placeholder');
            }
            else if (placeholderEl.getText() && !this.getPlaceholder()) {
                this.setPlaceholder(placeholderEl.getText());
            }

            if (this.__compositePlaceholder) {
                this.__setUpCompositePlaceholder(placeholderEl);
            }
            else {
                this.bind('instantValue', placeholderEl, 'shown', function(x) { return !x; });
                this.bind('placeholder', placeholderEl, 'text');
            }
        },

        /**
         * @private
         */
        __setUpSelectionBehavior: function() {
            var smartSelectOnClick = this.__selectionBehavior === 'smartSelectOnClick';
            var selectOnFocus = this.__selectionBehavior === 'selectOnFocus';
            if (!smartSelectOnClick && !selectOnFocus) {
                throw new Error('Передано неверное значение опции selectionBehavior!');
            }

            if (croc.util.Browser.isOpera()) {
                this.getFieldElement().on('focus', function() {
                    $(this).select();
                });
            }
            else {
                var prevSelection;
                var focused;
                var field = this.getFieldElement();

                this.getFieldElement().on({
                    mousedown: function() {
                        focused = !$(this).is(':focus');
                        prevSelection = croc.utils.domGetTextSelection($(this));
                    },
                    mouseleave: function() {
                        prevSelection = null;
                    },
                    mouseup: function(e) {
                        if (!prevSelection) {
                            return;
                        }

                        var selection = croc.utils.domGetTextSelection(field);

                        var select;
                        if (selectOnFocus) {
                            select = focused;
                        }
                        else {
                            select = (focused || selection.length !== field.val().length) &&
                                ((prevSelection.start === selection.start && prevSelection.end === selection.end) ||
                                    selection.length === 0);
                        }

                        if (select) {
                            field.select();
                            e.preventDefault();
                        }
                    }
                });
            }
        },

        /**
         * @private
         */
        __setUpSuggest: function() {
            var suggestEl = this.getElement().find('.b-input-cell.cell_suggest');
            if (suggestEl.length) {
                var link = suggestEl.find('.g-pseudo');
                link.on('click', function() {
                    this.setValue(link.text());
                    this.focus();
                }.bind(this));

                this.listenProperty('instantValue', function(value) {
                    suggestEl.toggleClass('g-hidden', !!value);
                });
            }
        },

        /**
         * @param placeholderEl
         * @private
         */
        __updateCompositePlaceholder: function(placeholderEl) {
            var value = this.getInstantValue() || '';
            var placeholder = this.getPlaceholder() || '';

            var lastSpace = value.charAt(value.length - 1) === ' ';
            var chunksCount = value ? croc.ui.form.field.transform.trimLeftAndMultiSpaces(value).split(' ').length : 0;
            if (lastSpace) {
                chunksCount -= 1;
            }

            var text = (lastSpace || !value ? '' : '&nbsp;') + placeholder.split(' ').slice(chunksCount).join(' ');
            placeholderEl.getElement().html(text);

            var label = placeholderEl.getElement();
            label.css('marginLeft', value ? this.__testElement.outerWidth() : '');

            label.css('visibility', label.width() < label.outerWidth() / 2 ? 'hidden' : 'visible');
        },

        /**
         * @private
         */
        __updateCompositeTestElement: function() {
            this.__testElement.html(_.escape(this.getInstantValue() || '').replace(/ /g, '&nbsp;'));
        }
    }
});

},{}],38:[function(require,module,exports){
/**
 * Чекбокс
 */
croc.Class.define('croc.ui.form.field.CheckBox', {
    extend: croc.ui.form.field.AbstractCheckButton,

    options: {
        /**
         * Шаблон по-умолчанию
         * @type {string}
         */
        htmlTemplate: '' +
            '<label class="b-input-checkbox {stateChecked}{cls}">' +
            '   <input type="checkbox" name="{name}" value="{permanentValue}" {checked}{tabIndex}><span class="b-input-checkbox-h"></span>' +
            '</label>',

        /**
         * Сообщения об ошибках валидации (validatorId => message)
         * @type {Object.<string, string>}
         */
        validationMessages: {
            value: {
                required: 'Флажок должен быть отмечен'
            }
        }
    },

    members: {
        /**
         * Html-элемент поля
         * @return {jQuery}
         */
        getFieldElement: function() {
            return this.__fieldElement ||
                (this.getElement() && (this.__fieldElement = this.getElement().find('input[type=checkbox]')));
        }
    }
});

},{}],39:[function(require,module,exports){
croc.ns('croc.ui.form.field');

/**
 * Группа чекбоксов
 * @extends {croc.ui.form.field.AbstractCheckGroup}
 */
croc.ui.form.field.CheckBoxesGroup = croc.extend(croc.ui.form.field.AbstractCheckGroup, {

    /**
     * У дочерних чекбоксов одинаковые имена и значением поля является массив с их значениями (value)
     * @type {boolean}
     */
    arrayValues: false,

    /**
     * Примешивает значения чекбоксов к значениям формы если arrayValues=false
     * @type {boolean}
     */
    exportsValues: true,

    /**
     * Следует ли группировать чекбоксы в массивы по одинаковому идентификатору
     * @type {boolean}
     */
    groupCheckboxes: false,

    /**
     * Конфигурация по-умолчанию добавляемая к items
     * @type {Object.<string, object>|object}
     */
    itemDefaults: {
        items: {
            xtype: croc.ui.form.field.CheckBox
        }
    },

    /**
     * Удалять неотмеченные кнопки из значения
     * @type {boolean}
     */
    removeUnchecked: true,

    /**
     * тип группы
     * @type {string}
     */
    type: 'checkbox',

    /**
     * Сообщения об ошибках валидации (validatorId => message)
     * @type {Object.<string, string>}
     */
    validationMessages: {
        required: 'Отметьте необходимые флажки'
    },

    /**
     * значение поля (замещает текущее значение поля, если передано)
     * @type {Object}
     */
    value: null,

    /**
     * Если возвращает объект, то он примешивается к значениям формы
     * @returns {Object}
     */
    exportValues: function() {
        return this.arrayValues || !this.exportsValues ? null : this.getValue() || {};
    },

    /**
     * Считать ли поле (либо переданное значение) пустым
     * @param {*} [value=null]
     * @returns {boolean}
     */
    isEmpty: function(value) {
        if (value === undefined) {
            value = this.getValue();
        }
        if (!value) {
            return true;
        }
        if (Array.isArray(value)) {
            return value.length === 0;
        }
        return Object.keys(value).every(function(x) { return !value[x]; });
    },

    /**
     * Изменить значение поля
     * @param {*} value
     */
    setValue: function(value) {
        if (value) {
            if (this.arrayValues) {
                if (!value.length) {
                    value = null;
                }
            }
            else {
                var newValue = {};
                _.forOwn(value, function(val, key) {
                    if (this.groupCheckboxes ? val.length > 0 : !this.removeUnchecked || val) {
                        newValue[key] = val;
                    }
                }, this);

                value = Object.keys(newValue).length > 0 ? newValue : null;
            }
        }

        croc.ui.form.field.CheckBoxesGroup.superclass.setValue.call(this, value);
    },

    /**
     * Изменение значения группы
     * @param value
     * @protected
     */
    _doSetValue: function(value) {
        value = value || (this.arrayValues ? [] : {});
        this.getItems().forEach(function(item) {
            if (this.arrayValues) {
                item.setChecked(value.indexOf(item.getPermanentValue()) !== -1);
            }
            else {
                var val = value[item.getIdentifier() || item.getParentIndex()];
                item.setChecked(!!val && (!this.groupCheckboxes || val.indexOf(item.getPermanentValue()) !== -1));
            }
        }, this);
    },

    /**
     * Изменение значения группы
     * @returns {string}
     * @protected
     */
    _getButtonClass: function() {
        return 'b-input-checkbox';
    },

    /**
     * Возвращает конфигурация виджета по его элементу. Конфигурация как минимум должна содержать xtype.
     * @param {string} section
     * @param {jQuery} element
     * @return {object}
     * @protected
     */
    _getConfByElement: function(section, element) {
        return {xtype: croc.ui.form.field.CheckBox};
    },

    /**
     * Метод вызывается при добавлении нового дочернего элемента
     * @param {string} section
     * @param {croc.ui.Widget} item
     * @protected
     */
    _onAddItem: function(section, item) {
        croc.ui.form.field.CheckBoxesGroup.superclass._onAddItem.apply(this, arguments);

        if (section !== 'items') {
            return;
        }

        var checkbox = /** @type {croc.ui.form.field.CheckBox} */(item);

        if (this.getValue() && !checkbox.getChecked()) {
            if (this.arrayValues) {
                if (this.getValue().indexOf(checkbox.getIdentifier()) !== -1) {
                    checkbox.setChecked(true);
                }
            }
            else {
                var val = this.getValue()[checkbox.getIdentifier() || checkbox.getParentIndex()];
                if (this.groupCheckboxes ? val.indexOf(checkbox.getPermanentValue()) !== -1 : val) {
                    checkbox.setChecked(true);
                }
            }
        }

        checkbox.on('changeValue', this.__onChangeItemValue, this);
        this.__onChangeItemValue();
    },

    /**
     * @private
     */
    __onChangeItemValue: function() {
        if (this.__dontHandleChangeValue) {
            return;
        }
        var newValue;
        if (this.arrayValues) {
            newValue = this.getItems()
                .filter(function(x) { return x.getChecked(); })
                .map(function(x) { return x.getPermanentValue(); });
            if (!newValue.length) {
                newValue = null;
            }
        }
        else {
            newValue = {};
            this.getItems().forEach(function(item, index) {
                var id = item.getIdentifier() || index;
                if (!this.groupCheckboxes) {
                    if (!this.removeUnchecked || item.getChecked()) {
                        newValue[id] = item.getChecked();
                    }
                }
                else if (item.getChecked()) {
                    (newValue[id] || (newValue[id] = [])).push(item.getPermanentValue());
                }
            }, this);
            if (!Object.keys(newValue).length) {
                newValue = null;
            }
        }
        this.__dontHandleChangeValue = true;
        if (this.getRendered()) {
            this.setValue(newValue);
        }
        else {
            this._setValueInternal(newValue);
        }
        this.__dontHandleChangeValue = false;
    }
});
croc.ui.WidgetsManager.getInstance().registerAlias(croc.ui.form.field.CheckBoxesGroup, 'croc.ui.form.field.CheckBoxesGroup');

},{}],40:[function(require,module,exports){
/**
 * Скрытое поле формы
 */
croc.Class.define('croc.ui.form.field.Hidden', {
    extend: croc.ui.Widget,
    implement: croc.ui.form.field.IField,
    include: croc.ui.form.field.MStandardField,

    properties: {
        /**
         * Заблокировано ли поле
         * @type {boolean}
         */
        disabled: {
            type: 'boolean',
            apply: function(value) {
                if (this.getElement()) {
                    this.getElement()[0].disabled = value;
                }
            },
            option: true
        },

        /**
         * Значение поля
         * @type {*}
         */
        value: {
            apply: function(value) {
                if (this.getElement()) {
                    this.getElement().val(value || '');
                }
            },
            event: true
        }
    },

    options: {
        /**
         * Шаблон по-умолчанию
         * @type {string}
         */
        htmlTemplate: '<input type="hidden" value="{value}" class="{cls}" {disabled}>',

        /**
         * значение поля
         * @type {*}
         */
        value: {
            property: true,
            value: null
        }
    },

    members: {
        /**
         * Дополнительные данные для рендеринга из шаблона
         * @param {Object} options
         * @returns {object}
         * @protected
         */
        _getAddRenderData: function(options) {
            return _.assign(croc.ui.form.field.Hidden.superclass._getAddRenderData.apply(this, arguments), {
                value: this.getValue() || '',
                disabled: this.getDisabled() ? 'disabled="disabled' : ''
            });
        },

        /**
         * Выполняется когда свойства виджета уже инициализированы
         * @param {Object} options
         * @protected
         */
        _onPropertiesInitialized: function(options) {
            croc.ui.form.field.Hidden.superclass._onPropertiesInitialized.apply(this, arguments);

            if (this.getElement()) {
                this.setValue(this.getElement().val() || null);

                if (!this.getIdentifier() && this.getElement().attr('name')) {
                    options.identifier = this.getElement().attr('name');
                }
            }
        }
    }
});
},{}],41:[function(require,module,exports){
/**
 * Поле, которому можно менять доступность (disable, enable)
 */
croc.Interface.define('croc.ui.form.field.IDisable', {
    extend: croc.ui.form.field.IField,

    members: {
        /**
         * Является ли поле недоступным
         * @returns {boolean}
         */
        getDisabled: function() {},

        /**
         * Изменить недоступность поля
         * @param {boolean} value
         */
        setDisabled: function(value) {}
    }
});

},{}],42:[function(require,module,exports){
/**
 * Поле формы
 */
croc.Interface.define('croc.ui.form.field.IField', {
    extend: [
        croc.ui.form.validation.IValidatable,
        croc.ui.IWidget
    ],

    properties: {
        /**
         * Значение поля
         */
        value: {
            event: true
        }
    },

    members: {
        /**
         * Если возвращает объект, то он примешивается к значениям формы
         * @returns {Object}
         */
        exportValues: function() {},

        /**
         * Вызывается перед отправкой формы
         */
        onSubmit: function() {},

        /**
         * Изменить значение поля
         * @param {*} value
         */
        setValue: function(value) {}
    }
});

},{}],43:[function(require,module,exports){
/**
 * Интерфейс для полей, которые являются обёртками над html-полями (input, textarea, select etc)
 */
croc.Interface.define('croc.ui.form.field.IHtmlControl', {
    extend: croc.ui.form.field.IField,
    
    events: {
        blur: null,
        focus: null
    },
    
    members: {
        /**
         * Убрать фокус у элемента
         */
        blur: function() {},

        /**
         * Дать фокус элементу
         */
        focus: function() {},

        /**
         * Html-элемент поля
         * @returns {jQuery}
         */
        getFieldElement: function() {}
    }
});

},{}],44:[function(require,module,exports){
/**
 * Поле, которое имеет размеры (стандартно от 1 до 5)
 */
croc.Interface.define('croc.ui.form.field.ISizable', {
    extend: croc.ui.form.field.IField,

    members: {
        /**
         * Размер поля
         * @returns {string}
         */
        getSize: function() {}
    }
});

},{}],45:[function(require,module,exports){
/**
 * Интерфейс-маркер для текстовых полей
 */
croc.Interface.define('croc.ui.form.field.ITextField', {
    extend: croc.ui.form.field.IHtmlControl,

    members: {
        /**
         * Пробелы на концах значения являются важными и их нельзя обрезать
         * @returns {boolean}
         */
        keepWhiteSpace: function() {}
    }
});

},{}],46:[function(require,module,exports){
/**
 * Поле содержащее событие update
 */
croc.Interface.define('croc.ui.form.field.IUpdatableField', {
    extend: croc.ui.form.field.IField,

    properties: {
        /**
         * Мгновенное значение поля
         * @type {*}
         */
        instantValue: {
            getter: null,
            event: true
        }
    }
});
},{}],47:[function(require,module,exports){
croc.Mixin.define('croc.ui.form.field.MStandardDisable', {
    properties: {
        /**
         * Блокировка поля
         * @type {boolean}
         */
        disabled: {
            cssClass: 'state_disabled',
            type: 'boolean',
            apply: '_applyDisabled',
            option: true
        }
    },

    preConstruct: function() {
        this.on('changeRendered', function() {
            if (this.getDisabled()) {
                this._applyDisabled(this.getDisabled());
            }
        }, this);
    },

    members: {
        /**
         * Применить заблокированное состояние поля
         * @param {boolean} value
         * @protected
         */
        _applyDisabled: function(value) {
        }
    }
});
},{}],48:[function(require,module,exports){
/**
 * Реализация стандартных методов поля формы {@see croc.ui.form.field.IField}
 */
croc.Mixin.define('croc.ui.form.field.MStandardField', {
    include: croc.ui.form.validation.MStandardValidatable,

    events: {
        /**
         * @param value
         * @param old
         */
        changeValue: null
    },

    options: {
        /**
         * значение поля
         * @type {*}
         */
        value: null
    },

    members: {
        /**
         * Если возвращает объект, то он примешивается к значениям формы
         * @returns {Object}
         */
        exportValues: function() {
            return null;
        },

        /**
         * Вызывается перед отправкой формы
         */
        onSubmit: function() {}
    }
});

},{}],49:[function(require,module,exports){
croc.Mixin.define('croc.ui.form.field.MStandardSizable', {
    properties: {
        /**
         * Размер поля
         * @type {string}
         */
        size: {
            cssClass: true,
            type: 'string',
            getter: null,
            __setter: null,
            value: '1',
            option: true
        }
    }
});
},{}],50:[function(require,module,exports){
/**
 * Радиокнопка
 */
croc.Class.define('croc.ui.form.field.RadioButton', {
    extend: croc.ui.form.field.AbstractCheckButton,

    options: {
        /**
         * Шаблон по-умолчанию
         * @type {string}
         */
        htmlTemplate: '' +
            '<label class="b-input-radio {stateChecked}{cls}">' +
            '   <input type="radio" name="{name}" value="{permanentValue}" {checked}{tabIndex}><span class="b-input-radio-h"></span>' +
            '</label>'
    },

    members: {
        /**
         * Html-элемент поля
         * @return {jQuery}
         */
        getFieldElement: function() {
            return this.__fieldElement ||
                (this.getElement() && (this.__fieldElement = this.getElement().find('input[type=radio]')));
        }
    }

//    /**
//     * Изменяет значение поля
//     * @param value
//     * @protected
//     */
//    _doSetValue: function(value) {
//        //радиобаттон не вызывает change когда нажимается другой радиобаттон
//        var sameValue = this.getValue() === value;
//        croc.ui.form.field.RadioButton.superclass._doSetValue.call(this, value);
//        if (sameValue) {
//            this.fireEvent('changeValue', value, this.getOppositeValue());
//            this.fireEvent('changeChecked', this.getChecked(), !this.getChecked());
//        }
//    },
});

},{}],51:[function(require,module,exports){
croc.ns('croc.ui.form.field');

/**
 * Группа радиокнопок
 * @extends {croc.ui.form.field.AbstractCheckGroup}
 */
croc.ui.form.field.RadioButtonsGroup = croc.extend(croc.ui.form.field.AbstractCheckGroup, {
    
    /**
     * Конфигурация по-умолчанию добавляемая к items
     * @type {Object.<string, object>|object}
     */
    itemDefaults: {
        items: {
            xtype: croc.ui.form.field.RadioButton
        }
    },

    /**
     * тип группы
     * @type {string}
     */
    type: 'radio',

    /**
     * Сообщения об ошибках валидации (validatorId => message)
     * @type {Object.<string, string>}
     */
    validationMessages: {
        required: 'Выберите значение'
    },

    /**
     * значение поля (замещает текущее значение поля, если передано)
     * @type {string}
     */
    value: null,

    /**
     * Отмечает первую неотключённую кнопку
     */
    checkFirstButton: function() {
        for (var i = 0, button; (button = this.getItems()[i++]);) {
            if (!button.getDisabled()) {
                button.setChecked(true);
                return;
            }
        }
    },

    /**
     * Если возвращает объект, то он примешивается к значениям формы
     * @returns {Object}
     */
    exportValues: function() {
        return null;
    },

    /**
     * Возвращает огтмеченную радиокнопку
     * @returns {croc.ui.form.field.RadioButton}
     */
    getCheckedButton: function() {
        //noinspection JSHint
        return this.getValue() != null && this.getItemByValue(this.getValue());
    },

    /**
     * Возвращает радиокнопку из группы по её значению
     * @param {string} value
     * @returns {croc.ui.form.field.RadioButton}
     */
    getItemByValue: function(value) {
        for (var i = 0, button; (button = this.getItems()[i++]);) {
            //noinspection JSHint
            if (button.getPermanentValue() == value) {
                return button;
            }
        }
        return null;
    },

    /**
     * Изменение значения группы
     * @param value
     * @protected
     */
    _doSetValue: function(value) {
        this.getItems().forEach(function(item) {
            var field = /** @type {croc.ui.form.field.RadioButton} */(item);
            //noinspection JSHint
            field.setChecked(field.getPermanentValue() == value);
        });
    },

    /**
     * Изменение значения группы
     * @returns {string}
     * @protected
     */
    _getButtonClass: function() {
        return 'b-input-radio';
    },

    /**
     * Возвращает конфигурация виджета по его элементу. Конфигурация как минимум должна содержать xtype.
     * @param {string} section
     * @param {jQuery} element
     * @return {object}
     * @protected
     */
    _getConfByElement: function(section, element) {
        return {xtype: croc.ui.form.field.RadioButton, identifier: this.getIdentifier()};
    },

    /**
     * Метод вызывается при добавлении нового дочернего элемента
     * @param {string} section
     * @param {croc.ui.Widget} item
     * @protected
     */
    _onAddItem: function(section, item) {
        croc.ui.form.field.RadioButtonsGroup.superclass._onAddItem.apply(this, arguments);
        
        if (section !== 'items') {
            return;
        }

        var field = /** @type {croc.ui.form.field.RadioButton} */(item);

        if (field.getChecked()) {
            this.setValue(field.getPermanentValue());
        }
        else { //noinspection JSHint
            if (this.getValue() == field.getPermanentValue()) {
                field.setChecked(true);
            }
        }

        field.on('changeValue', function() {
            if (field.getChecked()) {
                this.setValue(field.getPermanentValue());
            }
        }, this);
    },

    /**
     * Выполняется когда свойства виджета уже инициализированы
     * @protected
     */
    _onPropertiesInitialized: function() {
        croc.ui.form.field.RadioButtonsGroup.superclass._onPropertiesInitialized.apply(this, arguments);

        if (!this.identifier && this.getElement()) {
            var input = this.getElement().find('input');
            if (input.length && input.attr('name')) {
                this.identifier = input.attr('name');
            }
        }

        if (!this.identifier) {
            this.identifier = croc.utils.getStmId();
        }

        this.itemDefaults.items.identifier = this.identifier;
    }
});

croc.ui.WidgetsManager.getInstance().registerAlias(croc.ui.form.field.RadioButtonsGroup, 'croc.ui.form.field.RadioButtonsGroup');

},{}],52:[function(require,module,exports){
/**
 * Переключаемый набор кнопок
 * Для полноценной работы в качестве поля формы нужна доработка!
 * todo при внедрении все упоминания перевести в хелпер
 */
croc.Class.define('croc.ui.form.field.RadioButtonsSet', {
    extend: croc.ui.Container,
    include: croc.ui.form.field.MStandardField,
    implement: [
        croc.ui.form.field.IField,
        croc.ui.form.field.ISizable,
        croc.ui.form.field.IDisable
    ],
    
    properties: {
        /**
         * Блокировка поля
         * @type {boolean}
         */
        disabled: {
            type: 'boolean',
            value: false,
            apply: function(value) {
                this._options.dItemDefaults.disabled = value;
                this.getItems().forEach(function(button) {
                    button.setDisabled(value);
                });
            },
            option: true
        },
        
        /**
         * Размер поля
         * @type {string}
         */
        size: {
            type: 'string',
            __setter: null,
            value: '2',
            apply: function(value) {
                this._options.dItemDefaults.size = value;
            },
            option: true
        },
        
        value: {
            apply: function(value, old, dontSwitchButtons) {
                if (!dontSwitchButtons && this.getRendered() && this.getItems()) {
                    this.getItems().forEach(function(button) {
                        button.setActive(this.__getButtonValue(button) === value);
                    }, this);
                }
            },
            option: true,
            event: true
        }
    },
    
    options: {
        /**
         * алиас к itemsDefaults[defSection], где defSection - секция по-умолчанию
         * @type {Object}
         */
        dItemDefaults: {
            value: {
                xtype: croc.ui.form.Button
            }
        },
        
        /**
         * Шаблон по-умолчанию
         * @type {string}
         */
        htmlTemplate: '<div class="b-sbutton-set spacing_0{cls}">{items}</div>',
        
        /**
         * Значение набора
         * @type {string}
         */
        value: null,
        
        /**
         * value|identifier
         * @type {string}
         */
        valueSource: 'value'
    },
    
    members: {
        /**
         * Инициализация виджета после его отрисовки в DOM
         * @return {$.Deferred|undefined}
         * @protected
         */
        _initWidget: function() {
            croc.ui.form.field.RadioButtonsSet.superclass._initWidget.call(this);
            
            this.getItems().forEach(function(button) {
                button.on('execute', function() {
                    this.setValue(this.__getButtonValue(button));
                }, this);
            }, this);
        },
        
        /**
         * Метод вызывается при добавлении нового дочернего элемента
         * @param {string} section
         * @param {croc.ui.Widget} item
         * @protected
         */
        _onAddItem: function(section, item) {
            var value = this.__getButtonValue(item);
            if (value && this.getValue() === value) {
                item.setActive(true);
            }
            if (item.getActive()) {
                this.setValue(value);
            }
        },
        
        /**
         * Выполняется когда свойства виджета уже инициализированы
         * @param {Object} options
         * @protected
         */
        _onPropertiesInitialized: function(options) {
            croc.ui.form.field.RadioButtonsSet.superclass._onPropertiesInitialized.apply(this, arguments);
            _.assign(this._options.dItemDefaults, {
                size: this.getSize(),
                disabled: this.getDisabled()
            });
        },
        
        /**
         * Поиск элементов DOM для всех дочерних элементов
         * @param {jQuery} el
         * @return {Object.<string, jQuery>}
         * @protected
         */
        _scanForItemsElements: function(el) {
            return {
                items: el.children()
            };
        },
        
        /**
         * Изменить элемент ещё не вставленный в DOM корневой элемент
         * @param {jQuery} el
         * @protected
         */
        _transformElement: function(el) {
            croc.ui.form.field.RadioButtonsSet.superclass._transformElement.apply(this, arguments);
            
            var buttons = this._scanForItemsElements(el).items;
            if (buttons.length > 1) {
                buttons.first().addClass('round_left');
                buttons.last().addClass('round_right');
            }
            else {
                buttons.addClass('round_both');
            }
        },
        
        /**
         * @param {croc.ui.form.Button} button
         * @returns {string}
         * @private
         */
        __getButtonValue: function(button) {
            return button[croc.Object.getPropertyPart('get', this._options.valueSource)]();
        }
    }
});
},{}],53:[function(require,module,exports){
//+useOptional $.autosize

/**
 * Абстракция над полем ввода
 */
croc.Class.define('croc.ui.form.field.TextArea', {
    extend: croc.ui.form.field.AbstractTextField,
    
    options: {
        /**
         * Класс type_... корневого элемента
         * @type {string}
         */
        cssType: 'area'
    },
    
    construct: function(options) {
        this.once('appear', function() {
            var fieldElement = this.getFieldElement();
            
            require("./../../../../../../bower_components/jquery-autosize/jquery.autosize.js");
            var initialHeight = fieldElement.height();
            fieldElement.autosize({className: this.getFieldElement().className});
            
            this.on('changeInstantValue', function() {
                fieldElement.trigger('autosize.resize');
            }, this);
            fieldElement.on('autosize.resize', function() {
                this.bubbleResize();
            }.bind(this));
            
            if (fieldElement.height() !== initialHeight) {
                this.bubbleResize();
            }
        }, this);
        
        croc.ui.form.field.TextArea.superclass.__construct__.apply(this, arguments);
    },
    
    members: {
        /**
         * Дополнительные данные для рендеринга из шаблона
         * @param {Object} options
         * @returns {object}
         * @protected
         */
        _getAddRenderData: function(options) {
            return _.assign(croc.ui.form.field.TextArea.superclass._getAddRenderData.apply(this, arguments), {
                inputAttrs: '',
                inputTagEnd: (options.value ? _.escape(options.value) : '') + '</textarea>',
                inputTag: 'textarea'
            });
        },
        
        /**
         * Обработать смену состояния валидации поля
         * @param {boolean} valid
         * @protected
         */
        _onValidClassChanged: function(valid) {
            this.getFieldElement().trigger('autosize.resize');
        }
    }
});

},{"./../../../../../../bower_components/jquery-autosize/jquery.autosize.js":1}],54:[function(require,module,exports){
/**
 * Абстракция над полем ввода
 */
croc.Class.define('croc.ui.form.field.TextField', {
    extend: croc.ui.form.field.AbstractTextField,

    properties: {
        /**
         * Предназначено ли поле для ввода пароля
         * @type {boolean}
         */
        masked: {
            type: 'boolean',
            value: true,
            apply: '__applyMasked',
            option: true
        }
    },

    options: {
        /**
         * Класс type_... корневого элемента
         * @type {string}
         */
        cssType: 'text',

        /**
         * Отключить собственный автокомплит поля. true - при suggestion !== null
         * @type {boolean}
         */
        disableAutocomplete: {
            type: 'boolean',
            value: false
        },

        /**
         * Максимальное кол-во знаков (аттрибут maxlength)
         * Если указаны правила валидации length или lengthRange, то определяется автоматически
         * @type {number}
         */
        maxLength: {
            type: 'number'
        },

        /**
         * Предназначено ли поле для ввода пароля
         * @type {boolean}
         */
        password: {
            type: 'boolean',
            value: false
        },

        /**
         * Пометить ли поле как "только для чтения"
         * @type {boolean}
         */
        readOnly: {
            type: 'boolean',
            value: false
        },

        /**
         * если передана строка то интерпретируется как url контроллера для стандартных подсказок,
         * если передана модель, то создаётся стандартный компонент подсказок с этой моделью,
         * если передано true, то создаётся стандартный компонент подсказок с моделью по-умолчанию,
         * Если передан объект - он интерпретируется как опции компонента suggestion
         * @type {String|croc.data.IObservableList|Array|croc.ui.form.suggestion.Default|Boolean|Object}
         */
        suggestion: null
    },

    /**
     * Очистка объекта перед разрушением
     */
    destruct: function() {
        if (this.__suggestion) {
            this.__suggestion.destroy();
        }
    },

    members: {
        /**
         * Html-элемент поля
         * @return {jQuery}
         */
        getFieldElement: function() {
            return this.__fieldElement ||
            (this.getElement() && (this.__fieldElement = this.getElement().find('input.b-input-field-h')));
        },

        /**
         * @return {croc.ui.form.suggestion.Default}
         */
        getSuggestion: function() {
            return this.__suggestion;
        },

        /**
         * Пробелы на концах значения являются важными и их нельзя обрезать
         * @returns {boolean}
         */
        keepWhiteSpace: function() {
            return this.__isPassword || croc.ui.form.field.TextField.superclass.keepWhiteSpace.apply(this, arguments);
        },

        /**
         * Передвинуть каретку в конец поля
         */
        moveCursorToEnd: function() {
            croc.utils.domSetCaretPos(this.__visibleFieldElement, this.__visibleFieldElement.val().length);
        },

        /**
         * @param {Object} settings
         * @return {croc.ui.form.suggestion.Default}
         * @protected
         */
        _createDefaultSuggestion: function(settings) {
            throw 'not implemented!';
        },

        /**
         * Дополнительные данные для рендеринга из шаблона
         * @param {Object} options
         * @returns {object}
         * @protected
         */
        _getAddRenderData: function(options) {
            return _.assign(croc.ui.form.field.TextField.superclass._getAddRenderData.apply(this, arguments), {
                inputAttrs: '' +
                    ' value="' + (options.value ? options.value.replace(/"/g, '\\"') : '') + '"' +
                    ' type="' + (options.password && this.getMasked() ? 'password' : 'text') + '"' +
                    (options.readOnly ? ' readonly="readonly"' : '') +
                    (options.disableAutocomplete ? ' autocomplete="off"' : '') +
                    (options.maxLength ? ' maxlength="' + options.maxLength + '"' : ''),
                inputTagEnd: '',
                inputTag: 'input'
            });
        },

        /**
         * Возвращает внутреннее (сырое) значение поля
         * @protected
         */
        _getFieldValue: function() {
            var fieldEl = this.getFieldElement();
            return fieldEl && (this.__visibleFieldElement || fieldEl).val();
        },

        /**
         * Инициализация виджета после его отрисовки в DOM
         * @return {$.Deferred|undefined}
         * @protected
         */
        _initWidget: function() {
            if (this.__isPassword && croc.util.Browser.isIE('<10')) {
                this.getFieldElement();
                var newField = $(this.__fieldElement.prop('outerHTML')
                    .replace(/type\s*=\s*"?\w+"?/i, 'type="' + (this.getMasked() ? 'text' : 'password') + '"'))
                    .removeAttr('name').addClass('g-hidden').insertAfter(this.__fieldElement);
                this.__visibleFieldElement = this.__fieldElement;
                this.__fieldElement = this.__fieldElement.add(newField);
            }
            else {
                this.__visibleFieldElement = this.getFieldElement();
            }

            croc.ui.form.field.TextField.superclass._initWidget.call(this);

            if (this.__suggestionDesc) {
                if (croc.Class.check(this.__suggestionDesc, 'croc.ui.form.suggestion.Default')) {
                    this.__suggestion = this.__suggestionDesc;
                    this.__suggestion.initField(this);
                }
                else {
                    var suggestionSettings = typeof this.__suggestionDesc === 'string' ? {url: this.__suggestionDesc} :

                        croc.Interface.check(this.__suggestionDesc, 'croc.data.IObservableList') ||
                        Array.isArray(this.__suggestionDesc) ? {model: this.__suggestionDesc} :

                            typeof this.__suggestionDesc === 'object' ? this.__suggestionDesc : {};

                    suggestionSettings.field = this;
                    this.__suggestion = this._createDefaultSuggestion(suggestionSettings);
                }
            }

            if (!this.getMasked()) {
                this.__applyMasked(this.getMasked());
            }
        },

        /**
         * Выполняется когда свойства виджета уже инициализированы
         * @param {Object} options
         * @protected
         */
        _onPropertiesInitialized: function(options) {
            if (options.suggestion) {
                options.disableAutocomplete = true;
            }
            if (options.readOnly) {
                options.showReset = false;
            }

            this.__isPassword = options.password;
            this.__suggestionDesc = options.suggestion;

            croc.ui.form.field.TextField.superclass._onPropertiesInitialized.apply(this, arguments);
        },

        /**
         * @param value
         * @private
         */
        __applyMasked: function(value) {
            if (this.getElement() && this.__isPassword) {
                if (croc.util.Browser.isIE('<10')) {
                    this.__fieldElement.val(this.getValue() || '');
                    this.__visibleFieldElement = this.__fieldElement
                        .filter('[type=' + (value ? 'password' : 'text') + ']').removeClass('g-hidden');
                    var anotherEl = this.__fieldElement.not(this.__visibleFieldElement).addClass('g-hidden');
                    if (this.getIdentifier()) {
                        this.__visibleFieldElement.attr('name', this.getIdentifier());
                        anotherEl.removeAttr('name');
                    }
                }
                else {
                    this.getFieldElement().attr('type', value ? 'password' : 'text');
                }
            }
        }
    }
});

},{}],55:[function(require,module,exports){
croc.ns('croc.ui.form.field');

/**
 * Функции трансформации значения поля
 * todo comment me
 * todo trim... - разбить
 */
croc.ui.form.field.transform = {

    /**
     * @param value
     * @param old
     * @param chars
     * @returns {string}
     */
    allowedChars: function(value, old, chars) {
        return value && typeof value === 'string' ? value.replace(new RegExp('[^' + chars + ']', 'g'), '') : value;
    },

    /**
     * @param transform
     * @returns {Function}
     * @protected
     */
    createTransformFunction: function(transform) {
        if (!transform || typeof transform === 'function') {
            return transform;
        }

        if (!Array.isArray(transform)) {
            transform = [transform];
        }

        transform = transform.map(function(item) {
            var method = typeof item === 'object' ? item.method : item;
            if (typeof method === 'string') {
                method = croc.ui.form.field.transform[method];
            }
            var params = (typeof item === 'object' && item.params) || [];

            return {method: method, params: params};
        });

        return function(value, old) {
            transform.forEach(function(item) {
                value = item.method.apply(window, [value, old].concat(item.params));
            });
            return value;
        };
    },

    digitsOnly: function(value, old) {
        return value && typeof value === 'string' ? value.replace(/[^\d]/g, '') : value;
    },

    /**
     * число с палвающей точкой
     * @param value
     * @param old
     * @param {boolean} [spaces=false] разрешить пробелы
     * @returns {*}
     */
    'float': function(value, old, spaces) {
        if (value && typeof value === 'string') {
            value = value.replace(/,/g, '.').replace(spaces ? /[^\-\d\. ]/g : /[^\-\d\.]/g, '');

            var negative = value[0] === '-';
            value = value.replace(/\-/g, '');
            if (negative) {
                value = '-' + value;
            }

            var chunks = value.split('.');
            if (chunks.length > 1) {
                chunks[0] = (chunks[0] || '0') + '.';
            }
            return chunks.join('');
        }
        else {
            return value;
        }
    },

    leadZero: function(value, old) {
        var str = value.toString();
        return !value || !/^\d$/.test(str) ? value : '0' + str;
    },

    trimLeftAndMultiSpaces: function(value, old) {
        return value && typeof value === 'string' ? value.replace(/^ +/g, '').replace(/ +/g, ' ') : value;
    },

    trimSpaces: function(value, old) {
        return value && typeof value === 'string' ? value.replace(/^ +| +$/g, '').replace(/ +/g, ' ') : value;
    },

    prohibit: function(value, old) {
        return old;
    },

    /**
     * @return {string}
     */
    uppercase: function(value, old) {
        return value && typeof value === 'string' ? value.toUpperCase() : value;
    }
};
},{}],56:[function(require,module,exports){
croc.ns('croc.ui.form.internal');

/**
 * Контроллер инкапсулирует логику отправки формы
 * @extends {croc.Object}
 * @event changeSubmitting
 * @internal
 */
croc.ui.form.internal.SubmitController = croc.extend(croc.Object, {

    /**
     * Экшен формы либо url, на который будет отправлен запрос
     * @type {string}
     */
    action: '',

    /**
     * Если передан, то запрос отправляется в форме {url: ..., data: [{action: ajaxAction, params: formValue}]
     * @type {boolean}
     */
    ajaxAction: null,

    /**
     * Задержка перед сабмитом формы аяксом
     * @type {number}
     */
    ajaxSubmitDelay: null,

    /**
     * Фукнкция вызывается при сабмите формы. Должна возвращать Deferred, resolve вызывается при получении ответа
     * с сервера. На время сабмита кнопка submit становится неактивной и показывается лоадер. Если опция передана
     * то preventSubmit устанавливается в true.
     * Важно! Для статистики в resolve должно передаваться true если сабмит был удачным. Также должно вызываться
     * событие submitServerError если с сервера пришла ошибка.
     * @type {function(this: croc.ui.form.Form, croc.ui.form.Form, Object.<string, *>):$.Deferred}
     */
    ajaxSubmitFn: null,

    /**
     * Форма отправляет данные аяксом самостоятельно. После чего вызывается метод _onSubmitSuccess или _onSubmitFail
     * @type {boolean}
     */
    autoAjaxSubmit: false,

    /**
     * Ошибки формы
     * @type {Object}
     */
    errorCodes: null,

    /**
     * форма
     * @type {croc.ui.form.Form}
     * @required
     */
    form: null,

    /**
     * Предотвратить отправку формы на сервер
     * @type {boolean}
     */
    preventSubmit: false,

    /**
     * @type {Function}
     * @required
     */
    submitFailFunc: null,

    /**
     * @type {Function}
     * @required
     */
    submitSuccessFunc: null,

    /**
     * Нужно ли триммить значения всех текстовых полей перед сабмитом
     * @type {boolean}
     */
    trimAllBeforeSubmit: true,

    /**
     * Функция для получения значений формы для отправки на сервер
     * @type {Function}
     * @required
     */
    valuesFunc: null,

    init: function() {
        this.__enableSubmit = false;
        this.form.getElement().on('submit', this.__onFormElSubmit.bind(this));
    },

    /**
     * Запрещён ли сабмит формы в данный момент
     * @returns {boolean}
     */
    isSubmitBlocked: function() {
        return !!this.__submitBlocked;
    },

    /**
     * Произведён ли уже статический сабмит (момент перед отправкой формы)
     * @returns {boolean}
     */
    isSubmitPerformed: function() {
        return !!this.__submitPerformed;
    },

    /**
     * Изменить время задержки до отправки запроса
     * @param {number} delay
     */
    setAjaxSubmitDelay: function(delay) {
        this.ajaxSubmitDelay = delay;
    },

    /**
     * Отправить форму. Форма отправляется, только если пройдена валидация.
     * @returns {$.Deferred} resolve - если форма отправлена, reject в противном случае
     */
    submit: function() {
        if (this.__submitBlocked) {
            return this.__submitDeferred;
        }
        this.__submitDeferred = $.Deferred();

        this.form.commitChanges();

        var prevented = false;
        this.form.fireEvent('presubmit', function() { prevented = true; });
        if (prevented) {
            this.__submitDeferred.reject();
            return this.__submitDeferred;
        }

        this.__preprocessFields();

        this.__submitBlock();

        this.form.validate().done(function(valid) {
            if (valid) {
                this.__enableSubmit = true;
                this.form.getElement().submit();
                this.form.fireEvent('postsubmit');
                this.__enableSubmit = false;
            }
            else {
                this.form.fireEvent('submitValidationFail');
                this.__submitUnblock();
                this.__submitDeferred.reject();
            }
        }.bind(this));

        return this.__submitDeferred;
    },

    /**
     * @param form
     * @private
     */
    __ajaxSubmit: function(form) {
        var values = this.valuesFunc();
        var showMessages = true;
        return croc.ajax({
            url: this.action,
            data: this.ajaxAction ? [
                {action: this.ajaxAction, params: values}
            ] : values,
            delayRequest: this.ajaxSubmitDelay
        }, this)

            .then(function(response) {
                showMessages = this.submitSuccessFunc(response, values);
                if (showMessages !== false) {
                    showMessages = true;
                }
                return response;
            }.bind(this), this.submitFailFunc.bind(this))

            .then(
            function(response) {
                var result = response && (Array.isArray(response.result) ? response.result[0].data : response.result);
                var errcode = response && (response.errcode ||
                    (Array.isArray(response.result) && response.result[0] && response.result[0].errcode));
                var error = errcode && (response.errcode ? response.msg : response.result[0].msg);

                if (errcode || (result && (result.errors || result.validation_errors))) {
                    if (showMessages) {
                        error = error || (result && result.validation_errors && result.validation_errors.global) ||
                        (this.errorCodes && this.errorCodes[response.errcode]);

                        if (error) {
                            if (typeof error === 'string') {
                                this.form.getValidationManager().setInvalidItem(this.form, error);
                            }
                            else {
                                this.form.getValidationManager()
                                    .setInvalidItem(this.form.getItem(error.field), error.message);
                                error = JSON.stringify(error);
                            }
                        }

                        var errors = response.errors || (result && result.validation_errors);
                        if (typeof errors === 'object') {
                            _.forOwn(errors, function(message, name) {
                                var field = this.form.getItem(name);
                                if (message && field) {
                                    this.form.getValidationManager().setInvalidItem(field, message);
                                }
                            }, this);

                            if (!error) {
                                error = JSON.stringify(errors);
                            }
                        }
                    }

                    return $.Deferred().resolve((error || 'errcode =') + ' ' + response.errcode, response);
                }

                return $.Deferred().resolve(null, response);
            }.bind(this),
            function(response) {
                return response;
            });
    },

    /**
     * Дублируем заблокированные поля, иначе они не отправятся в POST данных
     * @private
     */
    __duplicateDisabledInputs: function() {
        this.form.getElement()
            .find('input[disabled],textarea[disabled],select[disabled]')
            .filter('[name]')
            .each(function() {
                var el = $(this);
                var clone = el.clone().prop('disabled', false).hide();
                if (clone.is('select,textarea')) {
                    clone.val(el.val());
                }
                clone.insertAfter(el);
            });
    },

    /**
     * @private
     */
    __onFormElSubmit: function(e) {
        if (!this.__enableSubmit) {
            e.preventDefault();
            this.submit();
        }
        else {
            this.form.fireEvent('submit', e, this.form.getValues());

            if (e.isDefaultPrevented()) {
                this.__submitUnblock();
                return;
            }

            if (this.preventSubmit || this.ajaxSubmitFn || this.autoAjaxSubmit) {
                e.preventDefault();
            }
            else {
                this.__submitPerformed = true;
                this.__duplicateDisabledInputs();
            }

            var submitFn = this.ajaxSubmitFn;
            if (!submitFn && this.autoAjaxSubmit) {
                submitFn = this.__ajaxSubmit;
            }

            if (submitFn) {
                submitFn.call(this, this.form, this.form.getValues())
                    .then(
                    function(error, response) {
                        this.__submitUnblock();
                        if (error) {
                            this.__submitDeferred.reject();
                            this.form.fireEvent('submitServerError', error);
                        }
                        else {
                            this.__submitSuccessful(false, response);
                        }
                    }.bind(this),
                    function(response) {
                        this.__submitUnblock();
                        this.__submitDeferred.reject();
                        this.form.fireEvent('submitServerError', 'errcode = ' + (response && response.status));
                    }.bind(this));
            }
            else if (!this.__submitPerformed) {
                this.__submitUnblock();
                this.__submitDeferred.resolve();
            }
            else {
                this.__submitSuccessful(true);
            }
        }
    },

    /**
     * @private
     */
    __preprocessFields: function() {
        this.form.getItems().forEach(function(field) {

            if (this.trimAllBeforeSubmit &&
                croc.Interface.check(field, 'croc.ui.form.field.ITextField') && !field.keepWhiteSpace() &&
                typeof field.getValue() === 'string') {

                field.setValue(field.getValue().trim());
            }

            field.onSubmit();
        }, this);
    },

    /**
     * @private
     */
    __submitBlock: function() {
        this.fireEvent('changeSubmitting', true);
        this.__submitBlocked = true;
        this.form.disable();
        var submitButton = this.form.getSubmitButton();
        if (submitButton) {
            this.__loadingButtonDescriptor = this._getDisposer().setTimeout(function() {
                submitButton.setLoading(true);
            }, 300);
        }
    },

    /**
     * @private
     */
    __submitSuccessful: function(isStatic, response) {
        this.form.getValidationManager().resetValidation();
        this.__submitDeferred.resolve();
        this.form.fireEvent('submitSuccessful', response, isStatic);
    },

    /**
     * @private
     */
    __submitUnblock: function() {
        this.fireEvent('changeSubmitting', false);
        this.__submitBlocked = false;
        this.form.enable();
        if (this.form.getSubmitButton()) {
            this.form.getSubmitButton().setLoading(false);
            this.__loadingButtonDescriptor.remove();
        }
    }
});

},{}],57:[function(require,module,exports){
croc.ns('croc.ui.form.validation');

/**
 * Контроллер инкапсулирует стандартное взаимодействие формы с менеджером валидации
 * @extends {croc.Object}
 * @internal
 */
croc.ui.form.validation.Controller = croc.extend(croc.Object, {

    /**
     * Ошибки валидации полей, которые следует установить при их полявлении
     * @type {Object.<string, string>}
     */
    fieldsInvalidMessages: null,

    /**
     * форма
     * @type {croc.ui.form.Form}
     * @required
     */
    form: null,

    notifierConf: null,

    /**
     * Опции устанавливающие особенности валидации формы
     * @type {Object}
     */
    validationBehavior: {
        /**
         * Сбросить состояние валидации поля при фокусе
         * @type {boolean}
         */
        resetTextFieldOnFocus: true,

        /**
         * Сбросить состояние валидадации всей формы при любом событии (фокус, смена значения)
         * @type {boolean}
         */
        resetStateOnEvent: false,

        /**
         * Произвести валидацию поля при потере фокуса
         * @type {boolean}
         */
        revalidateTextFieldOnBlur: true,

        /**
         * Произвести валидацию поля при изменении значения
         * @type {boolean}
         */
        revalidateFieldOnChangeValue: true
    },

    /**
     * Нужно ли производить валидацию формы
     * @type {boolean}
     */
    validateForm: true,

    init: function() {
        this.__offRevalidate = {};
        this.__preventRevalidation = {};

        this.validationBehavior = _.assign({}, croc.ui.form.validation.Controller.prototype.validationBehavior,
            this.validationBehavior);

        this.__validationManager = new croc.ui.form.validation.Manager();
        this.__validationManager.addItem(this.form, {weight: 100});

        //notifier
        if (!this.notifierConf) {
            this.notifierConf = {};
        }
        this.notifierConf.validationManager = this.__validationManager;
        this.__notifier = new croc.ui.form.validation.Notifier(this.notifierConf);
        this.__notifier.setTooltipAutoOpen(false);

        this.form.on({
            itemAdded: function(field) {
                if (field.getParentSection() !== 'fields') {
                    return;
                }

                var meta = field.getMeta();
                this.__validationManager.addItem(field, {
                    identifier: field.getIdentifier(),
                    suppressValid: meta.suppressValid
                });

                this.__setUpFieldValidation(field);
            },
            removeField: function(field) {
                this.__validationManager.removeItem(field);
            }
        }, this);

        this.__setUpFormValidationBehavior();
    },

    /**
     * @returns {croc.ui.form.validation.Manager}
     */
    getManager: function() {
        return this.__validationManager;
    },

    /**
     * @returns {croc.ui.form.validation.Notifier}
     */
    getNotifier: function() {
        return this.__notifier;
    },

    /**
     * Отключить повторную валидацию поля при потере фокуса
     * @param {croc.ui.form.field.IField} field
     */
    offFieldRevalidating: function(field) {
        this.__offRevalidate[croc.utils.objUniqueId(field)] = true;
    },

    trySubmit: function(successCallback, failCallback, context) {
        if (!context) {
            context = window;
        }

        if (this.validateForm && !Stm.env.formDisableValidation) {
            this.validate().done(function(valid) {

                if (valid) {
                    successCallback.call(context);
                }
                else {
                    failCallback.call(context);
                }
            });
        }
        else {
            successCallback.call(context);
        }
    },

    /**
     * Произвести валидацию полей формы
     * @returns {$.Deferred}
     */
    validate: function() {
        if (this.validateForm && !Stm.env.formDisableValidation) {
            this.__notifier.setTooltipAutoOpen(false);
            return this.__validationManager.validate().always(function() {
                this.__notifier.setTooltipAutoOpen(true);
            }.bind(this));
        }
        else {
            return $.Deferred().resolve(true);
        }
    },

    /**
     * @param {croc.ui.form.field.ITextField} field
     * @private
     */
    __resetValidationOnFocus: function(field) {
        var changed = false;
        var updateListener = function() {
            changed = true;
        };

        field.on({

            focus: function() {
                this.__preventRevalidation[field.getUniqueId()] = true;

                if (this.__validationManager.hasItem(field) &&
                    (this.__validationManager.getValidated() || field.getInvalidMessage()) &&
                    (!croc.Interface.check(field, 'croc.ui.form.field.IDisable') || !field.getDisabled())) {

                    if (croc.Interface.check(field, 'croc.ui.form.field.IUpdatableField')) {
                        field.on('changeInstantValue', updateListener);
                    }

                    if (this.validationBehavior.resetStateOnEvent) {
                        this.__validationManager.resetValidation();
                    }
                    else if (this.validationBehavior.resetTextFieldOnFocus) {
                        this.__validationManager.resetValidatedItem(field);
                    }
                }
            }.bind(this),

            blur: function() {
                delete this.__preventRevalidation[field.getUniqueId()];

                if (this.__validationManager.hasItem(field) &&
                    (!croc.Interface.check(field, 'croc.ui.form.field.IDisable') || !field.getDisabled())) {
                    if (this.validationBehavior.revalidateTextFieldOnBlur) {
                        this.__revalidateField(field, changed);
                    }

                    if (croc.Interface.check(field, 'croc.ui.form.field.IUpdatableField')) {
                        field.un('changeInstantValue', updateListener);
                    }

                    changed = false;
                }
            }.bind(this)
        });
    },

    /**
     * @param {croc.ui.form.field.IField} field
     * @param {boolean} changed
     * @private
     */
    __revalidateField: function(field, changed) {
        var fieldId = croc.utils.objUniqueId(field);

        if (this.__offRevalidate[fieldId]) {
            return;
        }

        if (this.__validationManager.getValidated() || field.getInvalidMessage()) {
            //noinspection FunctionWithInconsistentReturnsJS
            this.__validationManager.validateItem(field, function(ex) {
                if (!changed) {
                    return false;
                }
            });
        }
    },

    /**
     * @param {croc.ui.form.field.IField} field
     * @private
     */
    __setUpFieldValidation: function(field) {
        if (field.getIdentifier() && this.__validationManager.hasItem(field)) {
            setTimeout(function() {
                if (this.fieldsInvalidMessages && this.fieldsInvalidMessages[field.getIdentifier()]) {
                    this.getNotifier().setTooltipAutoOpen(false);
                    this.__validationManager.setInvalidItem(field, this.fieldsInvalidMessages[field.getIdentifier()]);
                    this.getNotifier().setTooltipAutoOpen(true);
                    delete this.fieldsInvalidMessages[field.getIdentifier()];
                }
            }.bind(this), 100);
        }

        if (croc.Interface.check(field, 'croc.ui.form.field.ITextField')) {
            this.__resetValidationOnFocus(field);
        }

        field.on('changeValue', function() {
            if (!this.__validationManager.hasItem(field)) {
                return;
            }

            if (this.validationBehavior.resetStateOnEvent) {
                this.__validationManager.resetValidation();
            }
            else if (this.validationBehavior.revalidateFieldOnChangeValue && !this.__preventRevalidation[field.getUniqueId()]) {
                this.__revalidateField(field, true);
            }
        }, this);
    },

    /**
     * @private
     */
    __setUpFormValidationBehavior: function() {
        var disposer = new croc.util.Disposer();
        this.__validationManager.on('itemValidated', function(item) {
            if (item === this.form) {
                if (item.getValid() === false) {
                    disposer.addListener(this.form.getStateManager(), 'updateState', function() {
                        this.__validationManager.resetValidatedItem(this.form);
                    }, this);
                }
                else {
                    disposer.disposeAll();
                }
            }
        }, this);
    }
});

},{}],58:[function(require,module,exports){
croc.ns('croc.ui.form.validation');

/**
 * Ошибка валидации
 * @extends {Error}
 */
croc.ui.form.validation.Error = croc.extend(Error, {
    /**
     * @param {string} message
     * @param {string} [validatorId=undefined] строковый идентификатор правила валидации
     */
    constructor: function(message, validatorId) {
        this.message = message;
        this.name = 'ValidationError';
        this.__validatorId = validatorId;
    },

    /**
     * строковый идентификатор правила валидации
     * @returns {string}
     */
    getValidatorId: function() {
        return this.__validatorId;
    },

    /**
     * строковый идентификатор правила валидации
     * @param {string} validatorId
     */
    setValidatorId: function(validatorId) {
        this.__validatorId = validatorId;
    }
});

},{}],59:[function(require,module,exports){
//noinspection JSHint,JSUnusedGlobalSymbols
/**
 * Функции для валидации полей
 */
croc.define('croc.ui.form.validation.Functions', {

    /**
     * Эти правила проверяются даже если поле пустое
     */
    CHECK_ANYWAY: {
        always: true,
        required: true,
        consistentDate: true,
        requiredIf: true,
        requiredSubwayForBigCity: true
    },

    /**
     * порядок следования функций, в котором следует производить валидацию поля
     */
    ORDER: {
        ownFirst: 0,
        required: 1,
        requiredIf: 1,
        requiredSubwayForBigCity: 1,
        consistentDate: 2,

        integer: 10
    },

    __EMAIL_REGEX: /^(?:(?:(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*")(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]+(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*"))*@(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\])(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\]))+|(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*")*\<(?:@(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\])(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\]))+(?:,@(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\])(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\]))+)*:)?(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*")(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]+(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*"))*@(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\])(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\]))+\>)|(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*")*:(?:(?:(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*")(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]+(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*"))*@(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\])(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\]))+|(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*")*\<(?:@(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\])(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\]))+(?:,@(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\])(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\]))+)*:)?(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*")(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]+(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*"))*@(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\])(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\]))+\>)(?:,\s*(?:(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*")(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]+(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*"))*@(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\])(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\]))+|(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*")*\<(?:@(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\])(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\]))+(?:,@(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\])(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\]))+)*:)?(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*")(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]+(?:$|(?=[\["()<>@,;:\\".\[\]]))|"(?:[^\"\r\\]|\\.)*"))*@(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\])(?:\.(?:[^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031-][^()<>@,;:\\".\[\]!~*'&=$?\/ \000-\031]*(?:$|(?=[\["()<>@,;:\\".\[\]]))|\[(?:[^\[\]\r\\]|\\.)*\]))+\>))*)?;\s*)$/i,

    /**
     * Проверяет, что заполнены все три поля даты либо ни одного (месяц может быть выставлен в "январь")
     * @param {string} dayIdentifier
     * @param {string} monthIdentifier
     * @param {string} yearIdentifier
     * @returns {Function}
     */
    consistentDate: function(dayIdentifier, monthIdentifier, yearIdentifier) {
        var requiredFunc = croc.ui.form.validation.Functions.required();
        return function(value, item, items) {
            if (!items[dayIdentifier].isEmptyState() || !items[yearIdentifier].isEmptyState() || !items[monthIdentifier].isEmptyState()) {
                requiredFunc.apply(this, arguments);
            }
            else {
                this.skipValidation();
            }
        };
    },

    /**
     * На основе переданных правил валидации составляет валидационную функцию. При этом если правила переданы в виде
     * объекта и среди правил нет required, то ни одно правило не проверяется при отсутствии значиня у поля и поле
     * считается валидным. Однако если указано правило always, то все правила проверяются в любом случае.
     * @param {object|function|string} validation см. {@link croc.ui.form.validation.IValidatable#getValidation}
     * @returns {function(value:*)}
     */
    createValidationFunction: function(validation) {
        if (typeof validation === 'function') {
            return validation;
        }

        var self = croc.ui.form.validation.Functions;

        if (typeof validation === 'string') {
            validation = JSON.parse(validation);
        }

        var validators = [];
        var checkAnyway = false;
        var filter = validation.filter;

        _.forOwn(validation, function(params, rule) {
            if (this.CHECK_ANYWAY[rule]) {
                checkAnyway = true;
            }

            if (rule === 'always' || rule === 'own' || rule === 'filter' || rule === 'ownFirst') {
                return;
            }

            if (!Array.isArray(params)) {
                params = [params];
            }

            validators.push({
                func: self[rule].apply(self, params),
                order: rule in self.ORDER ? self.ORDER[rule] : Number.MAX_VALUE,
                id: rule
            });
        }, this);

        validators = validators.sort(function(a, b) { return a.order - b.order; });
        if (validation.ownFirst) {
            validators.unshift({func: validation.ownFirst, id: 'ownFirst'});
        }
        if (validation.own) {
            validators.push({func: validation.own, id: 'own'});
        }

        var skipValidation = false;
        var thisObj = {
            skipValidation: function() {
                skipValidation = true;
            }
        };

        return function(value, item, items) {
            skipValidation = false;
            if ((!filter || filter.apply(window, arguments)) && (checkAnyway || !item.isEmpty())) {
                for (var i = 0, validator; (validator = validators[i++]);) {

                    try {
                        validator.func.apply(thisObj, arguments);
                    }
                    catch (e) {
                        if (validator.id && e instanceof croc.ui.form.validation.Error && !e.getValidatorId()) {
                            e.setValidatorId(validator.id);
                        }
                        throw e;
                    }

                    if (skipValidation) {
                        break;
                    }
                }
            }
        };
    },

    /**
     * Валидация E-Mail
     * @returns {Function}
     */
    email: function() {
        return function(value, item) {
            if (!croc.ui.form.validation.Functions.__EMAIL_REGEX.test(value)) {
                throw new croc.ui.form.validation.Error('Неверно указан адрес электронной почты');
            }
        };
    },

    /**
     * Проверяет, то что значение поля совпадает со значением поля с идентификатором identifier
     * @param {string} identifier
     * @returns {Function}
     */
    equals: function(identifier) {
        return function(value, item, items) {
            //noinspection JSHint
            if (value != items[identifier].getValue()) {
                throw new croc.ui.form.validation.Error('Значения полей не совпадают');
            }
        };
    },

    /**
     * Валидация icq
     * @returns {Function}
     */
    icq: function() {
        return function(value) {
            if (!value.toString().match(/^(\d\-?){5,8}\d$/)) {
                throw new croc.ui.form.validation.Error('Неверно указан номер ICQ');
            }
        };
    },

    /**
     * Целое число
     * @returns {Function}
     */
    integer: function() {
        return function(value, item) {
            if (!value.toString().match(/^\d+$/)) {
                throw new croc.ui.form.validation.Error('Введите целое число');
            }
        };
    },

    /**
     * Проверяет, что указанный год входит в последние N лет
     * @param {number} n
     * @returns {Function}
     */
    lastNYears: function(n) {
        return this.range(new Date().getFullYear() - n, new Date().getFullYear());
    },

    /**
     * Проверка кода программы лояльности
     * @returns {Function}
     */
    loyaltyProgram: function() {
        var lengthFunc = croc.ui.form.validation.Functions.length;
        return function(value) {
            switch (value.service) {
                case 'malina':
                    if (value.value.substring(0, 6) !== '639300') {
                        throw new croc.ui.form.validation.Error('Код введён неверно');
                    }
                    else {
                        lengthFunc(16)(value.value);
                    }
                    break;
                case 'mnogo':
                    lengthFunc(8)(value.value);
                    break;
            }
        };
    },

    /**
     * Проверяет, что длинна значения равна count
     * @param {number} count
     * @returns {Function}
     */
    length: function(count) {
        return croc.ui.form.validation.Functions.lengthRange(count, count);
    },

    /**
     * Проверяет, что длинна значения укладывается в промежуток от min до max (если max дано)
     * @param {number} min
     * @param {number} [max=undefined]
     * @returns {Function}
     */
    lengthRange: function(min, max) {
        return function(value, item) {
            value = value.toString();
            if ((min && value.length < min) || (max && value.length > max)) {
                var msg = 'Введите ';
                var main;
                if (min === max) {
                    msg += 'ровно ' + max;
                    main = max;
                }
                else if (min && max) {
                    msg += 'от ' + min + ' до ' + max;
                    main = max;
                }
                else if (min) {
                    msg += 'не меньше ' + min;
                    main = min;
                }
                else {
                    msg += 'не больше ' + max;
                    main = max;
                }
                msg += ' ' + croc.utils.strInflect(main, 'символа', 'символов', 'символов');
                throw new croc.ui.form.validation.Error(msg);
            }
        };
    },

    /**
     * Валидация телефонного номера
     * @param {...string} codes
     * @returns {Function}
     */
    phone: function(codes) {
        codes = typeof codes === 'number' ? _.toArray(arguments) : [];
        return function(value, item) {
            if (!/^[0-9]{11,12}$/.test(value.replace(/[^0-9]/g, ''))) {
                throw new croc.ui.form.validation.Error('Неверно указан номер');
            }
            if (codes.length) {
                var number = value.replace(/[^\d\(]/g, '').match(/\((\d+)/);
                if (!number || !number[1].match(new RegExp('^(' + codes.join('|') + ')'))) {
                    throw new croc.ui.form.validation.Error(codes.length === 1 ?
                        'Допускается только код города ' + codes[0] :
                        'Допускаются только следующие коды города: ' + codes.join(', '),
                        'phone');
                }
            }
        };
    },

    /**
     * Проверяет, что значение укладывается в промежуток от min до max (если max дано)
     * @param {number} min
     * @param {number} [max=undefined]
     * @returns {Function}
     */
    range: function(min, max) {
        return function(value, item) {
            value = parseFloat(value);
            if ((min && value < min) || (max && value > max)) {
                var msg = 'Значение должно быть ';
                if (min && max) {
                    msg += 'от ' + min + ' до ' + max;
                }
                else if (min) {
                    msg += 'не меньше ' + min;
                }
                else {
                    msg += 'не больше ' + max;
                }
                throw new croc.ui.form.validation.Error(msg);
            }
        };
    },

    /**
     * Проверяет соответствует ли значение регулярному выражению
     * @param {string} expression
     * @param {string} [options=undefined]
     * @returns {Function}
     */
    regexp: function(expression, options) {
        var regExp = new RegExp(expression, options);
        return function(value, item) {
            if (!regExp.test(value)) {
                throw new croc.ui.form.validation.Error('Неправильный формат');
            }
        };
    },

    /**
     * Проверяет, что значение существует
     * @returns {Function}
     */
    required: function() {
        return function(value, item) {
            if (item.isEmpty()) {
                throw new croc.ui.form.validation.Error('Поле не может быть пустым');
            }
        };
    },

    /**
     * Проверяет, что значение существует, только если одно из переданных полей не является пустым
     * @param {...string} identifiers
     * @returns {Function}
     */
    requiredIf: function(identifiers) {
        var requiredFunc = croc.ui.form.validation.Functions.required();
        var ids = Array.prototype.slice.call(arguments, 0);
        return function(value, item, items) {
            if (item.isEmpty()) {
                for (var i = 0, id; (id = ids[i++]);) {
                    if (!items[id].isEmptyState()) {
                        requiredFunc.apply(this, arguments);
                        return;
                    }
                }
                this.skipValidation();
            }
        };
    },

    /**
     * Станция метро необходима только в крупном городе (Москва, Санкт-Петербург)
     * @returns {Function}
     */
    requiredSubwayForBigCity: function() {
        return function(value, item) {
            if (item.isEmpty()) {
                if (['1-77-0-0-0', '1-78-0-0-0'].indexOf(item.getCityCode()) !== -1) {
                    throw new croc.ui.form.validation.Error('Выберите станцию');
                }
                this.skipValidation();
            }
        };
    },

    /**
     * Поверяет, что поле "день" валидно (согласно полям "месяц" и "год")
     * @param {string} [monthIdentifier=null]
     * @param {string} [yearIdentifier=null]
     * @returns {Function}
     */
    validDay: function(monthIdentifier, yearIdentifier) {
        return function(value, item, items) {
            var day = parseInt(value, 10);
            var month = monthIdentifier && parseInt(items[monthIdentifier].getPlainValue(), 10);
            var year = yearIdentifier && parseInt(items[yearIdentifier].getPlainValue(), 10);
            if (!yearIdentifier || isNaN(year)) {
                year = 2012; //високосный
            }

            if (isNaN(day) || !monthIdentifier || isNaN(month)) {
                if (isNaN(day) || (day < 1 || day > 31)) {
                    throw new croc.ui.form.validation.Error('Неправильно задан день');
                }
                return;
            }

            var date = new Date(year, month - 1, day);
            if (!(date && (date.getMonth() + 1) === month && date.getDate() === day && date.getFullYear() === year)) {
                throw new croc.ui.form.validation.Error('Неправильно задан день');
            }
        };
    },

    /**
     * Проверяет, что количество слов укладывается в промежуток от min до max (если max дано)
     * @param {number} min
     * @param {number} [max=undefined]
     * @returns {Function}
     */
    wordsRange: function(min, max) {
        return function(value) {
            value = value.toString();

            var count = 0;
            $.each(value.split(' '), function(i, chunk) {
                if (chunk.length) {
                    count += 1;
                }
            });

            if ((min && count < min) || (max && count > max)) {
                var msg = 'Введите ';
                if (min && max) {
                    msg += 'от ' + min + ' до ' + max;
                }
                else if (min) {
                    msg += 'не меньше ' + min;
                }
                else {
                    msg += 'не больше ' + max;
                }
                msg += ' слов';
                throw new croc.ui.form.validation.Error(msg);
            }
        };
    }
});

},{}],60:[function(require,module,exports){
/**
 * Поле подлежащее валидации
 */
croc.Interface.define('croc.ui.form.validation.IValidatable', {
    extend: croc.IObject,

    members: {
        /**
         * Получить DOM-элемент виджета
         * @returns {jQuery}
         */
        getElement: function() {},

        /**
         * Сообщение об ошибке
         * @return {string}
         */
        getInvalidMessage: function() {},

        /**
         * Значение поля в виде строки либо массива, которое однозначно идентифицурет состояние поля и может быть отправлено
         * аякс-запросом на сервер
         * @type {string|Array}
         */
        getPlainValue: function() {},

        /**
         * Находится ли поле в валидном состоянии
         * @return {boolean|null}
         */
        getValid: function() {},

        /**
         * Правила валидации поля (заданные в виде объекта или json), либо функция валидации (бросает
         * {@link croc.ui.form.validation.Error} при ошибке валидации)
         * @return {function(*, croc.ui.form.validation.IValidatable, Object.<string, croc.ui.form.validation.IValidatable>)|object|string}
         */
        getValidation: function() {},

        /**
         * Сообщения об ошибках валидации (validatorId => message)
         * @returns {Object.<string, string>}
         */
        getValidationMessages: function() {},

        /**
         * Значение поля
         * @return {*}
         */
        getValue: function() {},

        /**
         * Считать ли поле (либо переданное значение) пустым
         * @param {*} [value=null]
         * @returns {boolean}
         */
        isEmpty: function(value) {},

        /**
         * Поле в начальном, пустом состоянии
         * @returns {boolean}
         */
        isEmptyState: function() {},

        /**
         * Задать сообщение об ошибке
         * @param {string} message
         */
        setInvalidMessage: function(message) {},

        /**
         * Изменить состояние валидности поля
         * @param {boolean|null} valid
         */
        setValid: function(valid) {}
    }
});

},{}],61:[function(require,module,exports){
croc.ns('croc.ui.form.validation');

/**
 * Реализация стандартных методов валидации
 * todo назначать класс valid/error после создания виджета
 */
croc.Mixin.define('croc.ui.form.validation.MStandardValidatable', {
    events: {
        /**
         * Класс state_valid/state_error был изменён
         * @param {boolean} valid
         */
        validClassChanged: null
    },

    options: {
        /**
         * Сообщение об ошибке валидации
         * @type {string}
         */
        invalidMessage: null,

        /**
         * см. {@link #getValidation}
         * @type {function|object|string}
         */
        validation: null,

        /**
         * Сообщения об ошибках валидации (validatorId => message)
         * @type {Object.<string, string>}
         */
        validationMessages: {
            value: {},
            extend: true
        },

        /**
         * Таймаут перед назначением классов state_valid/state_error
         * @type {number}
         */
        _changeValidClassTimeout: null,

        _valid: null
    },

    preConstruct: function(options) {
        if (options._changeValidClassTimeout) {
            this.__standardValidatableValidTimeout = _.debounce(
                this.disposableFunc(this.__standardValidatableSetClass),
                options._changeValidClassTimeout
            );
        }
    },

    construct: function(options) {
        this.__valid = options._valid;
    },

    members: {
        /**
         * Сообщение об ошибке
         * @return {String}
         */
        getInvalidMessage: function() {
            return this._options.invalidMessage;
        },

        /**
         * Значение поля в виде строки либо массива, которое однозначно идентифицурет состояние поля и может быть отправлено
         * аякс-запросом на сервер
         * @type {string|Array}
         */
        getPlainValue: function() {
            return this.getValue();
        },

        /**
         * Находится ли поле в валидном состоянии
         * @return {boolean|null}
         */
        getValid: function() {
            return this.__valid;
        },

        /**
         * Правила валидации поля (заданные в виде объекта или json), либо функция валидации (бросает
         * {@link croc.ui.form.validation.Error} при ошибке валидации)
         * @return {function(*, croc.ui.form.validation.IValidatable, Object.<string, croc.ui.form.validation.IValidatable>)|object|string}
         */
        getValidation: function() {
            return this._options.validation;
        },

        /**
         * Сообщения об ошибках валидации (validatorId => message)
         * @returns {Object.<string, string>}
         */
        getValidationMessages: function() {
            return this._options.validationMessages || {};
        },

        /**
         * Считать ли поле (либо переданное значение) пустым
         * @param {*} [value=null]
         * @returns {boolean}
         */
        isEmpty: function(value) {
            value = value === undefined ? this.getPlainValue() : value;
            return value !== 0 && !value;
        },

        /**
         * Поле в начальном, пустом состоянии
         * @returns {boolean}
         */
        isEmptyState: function() {
            return this.isEmpty();
        },

        /**
         * Задать сообщение об ошибке
         * @param {string} message
         */
        setInvalidMessage: function(message) {
            this._options.invalidMessage = message;
        },

        /**
         * Изменить состояние валидности поля
         * @param {boolean|null} valid
         */
        setValid: function(valid) {
            this.__valid = valid;
            this.__standardValidatableSetClass();
        },

        /**
         * Обработать смену состояния валидации поля
         * @param {boolean} valid
         * @protected
         */
        _onValidClassChanged: function(valid) {},

        /**
         * @private
         */
        __standardValidatableSetClass: function() {
            if (this.getElement()) {
                this.getElement()
                    .toggleClass('state_valid', this.__valid === true)
                    .toggleClass('state_error', this.__valid === false);
            }
            this._onValidClassChanged(this.__valid);
            this.fireEvent('validClassChanged', this.__valid);
        }
    }
});

},{}],62:[function(require,module,exports){
croc.ns('croc.ui.form.validation');

/**
 * Менеджер обеспечивает валидацию группы переданных ему полей
 * @extends {croc.Object}
 * @event validated (valid: boolean, invalidItems: Array.<croc.ui.form.validation.IValidatable>)
 * @event itemAdded (item: croc.ui.form.validation.IValidatable)
 * @event itemRemoved (item: croc.ui.form.validation.IValidatable)
 * @event itemValidated (item: croc.ui.form.validation.IValidatable)
 */
croc.ui.form.validation.Manager = croc.extend(croc.Object, {

    init: function() {
        this.__items = [];
        this.__itemsWeights = {};
        this.__itemsHash = {};
        this.__itemsOptions = {};
        this.__validators = {};
        this.__valid = true;

        /**
         * @type {Array.<croc.ui.form.validation.IValidatable>}
         * @private
         */
        this.__invalidItems = [];
    },

    /**
     * Добавить поле для валидации
     * @param {croc.ui.form.validation.IValidatable} item
     * @param {object} [options={}] опции валидации
     * @param {string} [options.identifier=null] идентификатор поля для доступа к нему из функции валидации
     * @param {number} [options.weight=0] чем больший вес имеет поле тем позже по отношению к остальным оно проверяется
     * @param {number} [options.suppressValid=0] не делать поле валидным (setValid(true)) даже если оно прошло валидацию
     */
    addItem: function(item, options) {
        var id = croc.utils.objUniqueId(item);
        if (this.__itemsOptions[id]) {
            return;
        }
        
        if (!options) {
            options = {};
        }

        this.__items.push(item);
        this.__itemsOptions[id] = options;

        if (options.identifier) {
            this.__itemsHash[options.identifier] = item;
        }
        this.__itemsWeights[id] = options.weight || 0;
        if (item.getValidation()) {
            this.__validators[id] =
                croc.ui.form.validation.Functions.createValidationFunction(item.getValidation());
        }

        this.fireEvent('itemAdded', item);

        if (item.getInvalidMessage()) {
            this.setInvalidItem(item, item.getInvalidMessage());
        }
    },

    /**
     * Получить все невалидные поля
     * @returns {Array.<croc.ui.form.validation.IValidatable>}
     */
    getInvalidItems: function() {
        return this.__invalidItems;
    },

    /**
     * Получить все сообщения об ошибках валидации
     * @returns {Array.<string>}
     */
    getInvalidMessages: function() {
        return $.map(this.__invalidItems, function(x) { return x.getInvalidMessage(); });
    },

    /**
     * Производит проверку состояния поля валидно или нет
     * @param {croc.ui.form.validation.IValidatable} item
     * @returns {croc.ui.form.validation.Error}
     */
    getItemValidationError: function(item) {
        var id = croc.utils.objUniqueId(item);
        try {
            var validator = this.__validators[id];
            if (validator) {
                validator(item.getPlainValue(), item, this.__itemsHash);
            }
            return null;
        } catch (ex) {
            if (!(ex instanceof croc.ui.form.validation.Error)) {
                throw ex;
            }
            return ex;
        }
    },

    /**
     * Возвращает true только если все поля валидны, либо если проверка ещё не проводилась
     * @returns {boolean}
     */
    getValid: function() {
        return this.__valid;
    },

    /**
     * Проводилась ли проверка на валидность
     * @returns {boolean}
     */
    getValidated: function() {
        return !!this.__validated;
    },

    /**
     * Управляет ли менеджер переданным элементом
     * @param {croc.ui.form.validation.IValidatable} item
     * @returns {boolean}
     */
    hasItem: function(item) {
        return !!this.__itemsOptions[croc.utils.objUniqueId(item)];
    },

    /**
     * Перестать проверять элемент
     * @param {croc.ui.form.validation.IValidatable} item
     */
    removeItem: function(item) {
        var id = croc.utils.objUniqueId(item);
        if (!this.__itemsOptions[id]) {
            return;
        }
        
        croc.utils.arrRemove(this.__items, item);
        croc.utils.arrRemove(this.__invalidItems, item);
        delete this.__validators[id];
        delete this.__itemsOptions[id];

        var identifier;
        _.forOwn(this.__itemsHash, function(curItem, id) {
            if (curItem === item) {
                identifier = id;
            }
        });

        if (identifier) {
            delete this.__itemsHash[identifier];
        }

        this.fireEvent('itemRemoved', item);
    },

    /**
     * Сбросить состояние валидации элемента
     * @param {croc.ui.form.validation.IValidatable} item
     */
    resetValidatedItem: function(item) {
        if (item.getValid() === null) {
            return;
        }
        
        item.setInvalidMessage(null);
        item.setValid(null);
        croc.utils.arrRemove(this.__invalidItems, item);
        this.fireEvent('itemValidated', item);
    },

    /**
     * Сбрасывает состояние менеджера ({@link #getValidated} возвращает false, массив невалидных полей отчищается)
     */
    resetValidation: function() {
        var $this = this;
        $.each(this.__items, function(i, item) {
            item.setInvalidMessage(null);
            item.setValid(null);
            $this.fireEvent('itemValidated', item);
        });
        this.__validated = false;
        this.__invalidItems = [];
        this.__valid = true;
    },

    /**
     * Пометить поле как невалидное
     * @param {croc.ui.form.validation.IValidatable} item
     * @param {string} message
     */
    setInvalidItem: function(item, message) {
        item.setInvalidMessage(message);
        item.setValid(false);
        croc.utils.arrRemove(this.__invalidItems, item);
        this.__invalidItems.push(item);
        this.fireEvent('itemValidated', item);
    },

    /**
     * Пометить поле как валидное
     * @param {croc.ui.form.validation.IValidatable} item
     */
    setValidItem: function(item) {
        item.setInvalidMessage(null);
        item.setValid(true);
        croc.utils.arrRemove(this.__invalidItems, item);
        this.fireEvent('itemValidated', item);
    },

    /**
     * Производит валидацию все полей
     * @returns {$.Deferred} (boolean)
     */
    validate: function() {
        var $this = this;
        var deferred = $.Deferred();

        this.__valid = true;
        this.__invalidItems = [];

        this.__items = this.__items.sort(function(a, b) {
            return $this.__itemsWeights[croc.utils.objUniqueId(a)] - $this.__itemsWeights[croc.utils.objUniqueId(b)];
        });

        $.each(this.__items, function(i, item) {
            $this.__validateOneItem(item);
        });

        this.__validated = true;
        this.fireEvent('validated', this.__valid, this.__invalidItems);
//        setTimeout(function(){
        deferred.resolve($this.__valid);
//        }, 500);
//        }, 1000000);
        return deferred;
    },

    /**
     * Производит валидацию отдельного поля
     * @param {croc.ui.form.validation.IValidatable} item
     * @param {function(croc.ui.form.validation.Error, croc.ui.form.validation.IValidatable):boolean} invalidCallback
     * вызывается, если поле становится невалидным после валидации. Если возвращает false (строгая проверка), то состояние
     * поля не меняется
     */
    validateItem: function(item, invalidCallback) {
        croc.utils.arrRemove(this.__invalidItems, item);
        this.__validateOneItem(item, invalidCallback);
    },

    /**
     * @param {croc.ui.form.validation.IValidatable} item
     * @param {function(croc.ui.form.validation.Error, croc.ui.form.validation.IValidatable):boolean} [invalidCallback=null]
     * @private
     */
    __validateOneItem: function(item, invalidCallback) {
        var id = croc.utils.objUniqueId(item);
        var error = this.getItemValidationError(item);

        if (error === null) {
            item.setInvalidMessage(null);
            item.setValid(item.isEmpty() || this.__itemsOptions[id].suppressValid ? null : true);
            this.fireEvent('itemValidated', item);
        } else {
            if (!invalidCallback || invalidCallback(error, item) !== false) {
                item.setInvalidMessage(item.getValidationMessages()[error.getValidatorId()] || error.message);
                item.setValid(false);
                this.fireEvent('itemValidated', item);
            }
            this.__invalidItems.push(item);
            this.__valid = false;
        }
    }
});

},{}],63:[function(require,module,exports){
croc.ns('croc.ui.form.validation');

/**
 * Класс отвечает за появление уведомлений о полях не прошедших валидацию
 * @extends {croc.Object}
 */
croc.ui.form.validation.Notifier = croc.extend(croc.Object, {

    /**
     * @type {croc.ui.form.validation.Manager}
     */
    validationManager: null,

    /**
     * Позиция всплывающих подсказок (left, right, top, bottom)
     * @type {string}
     */
    tooltipPosition: 'right',

    init: function() {
        this.__tooltipAutoOpen = true;
        this.__bubbleManager = new croc.ui.common.bubble.Manager({
            closeBehavior: 'permanent'
        });

        this.validationManager.on({
            itemAdded: this.__onItemAdded,
            itemValidated: this.__onItemValidated,
            itemRemoved: this.__onItemRemoved
        }, this);
    },

    /**
     * Закрыть все подсказки
     * @param {croc.ui.form.validation.IValidatable} [exceptItem=null] кроме подсказки для этого элемента
     */
    closeTooltips: function(exceptItem) {
        this.__bubbleManager.closeAll(this.getUserData(exceptItem).tooltip);
    },

    /**
     * Очищение объекта перед разрушением
     */
    dispose: function() {
        croc.ui.form.validation.Notifier.superclass.dispose.apply(this, arguments);
        this.__bubbleManager.dispose();
    },

    /**
     * Не показывать тултип для элемента
     * @param {croc.ui.form.validation.IValidatable} item
     */
    offTooltip: function(item) {
        var data = this.getUserData(item);
        data.disableTooltip = true;
        if (data.tooltip) {
            data.tooltip.destroy();
            delete data.tooltip;
        }
    },

    /**
     * Обновить положение всех тултипов
     */
    repositionTooltips: function() {
        this.__bubbleManager.repositionAll();
    },

    /**
     * Нужно ли автоматически показывать тултип после валидации поля
     * @param {boolean} value
     */
    setTooltipAutoOpen: function(value) {
        this.__tooltipAutoOpen = value;
    },

    /**
     * Назначить конфигурацию для тултипа. В конфигурации можно указать секцию meta с ключами:
     * openAnyway - тултип автоматически всплывает после валидации даже если всплытие запрещено методом setTooltipAutoOpen
     * @param {croc.ui.form.validation.IValidatable} item
     * @param {Object} conf
     */
    setTooltipConf: function(item, conf) {
        var data = this.getUserData(item);
        data.tooltipConf = conf;
        if (data.tooltip) {
            this.__onItemValidated(item);
        }
    },

    /**
     * @param {croc.ui.form.validation.IValidatable} item
     * @returns {Object}
     * @private
     */
    __getItemMeta: function(item) {
        return item instanceof croc.ui.Widget ? item.getMeta() : {};
    },

    /**
     * @param {croc.ui.form.validation.IValidatable} item
     * @param {croc.ui.tooltip.Tooltip} tooltip
     * @returns {jQuery|Array}
     * @private
     */
    __getTooltipTarget: function(item, tooltip) {
        var constrId = croc.utils.objUniqueId(item.constructor);
        if (croc.ui.form.validation.Notifier.__tooltipTargets[constrId]) {
            return croc.ui.form.validation.Notifier.__tooltipTargets[constrId](item, tooltip);
        }

        var el = item.getElement();
        var row = el.closest('.b-form-row');
        var leftLabel = row.hasClass('pos_left') && row.find('.b-form-label.pos_left>label');
        if (!leftLabel.length) {
            leftLabel = null;
        }
        var topLabel = row.hasClass('pos_top') && row.find('.b-form-label.pos_top>label');
        if (!topLabel.length) {
            topLabel = null;
        }
        var curTooltipPos = tooltip.getCurrentPosition();

        var tooltipLeft = curTooltipPos === 'left';

        if (tooltipLeft && leftLabel) {
            return leftLabel;
        }

        if (curTooltipPos === 'top' && topLabel) {
            return topLabel;
        }

        if (item instanceof croc.ui.form.Form && item.getSubmitButton()) {
            return item.getSubmitButton().getElement();
        }

        var formComboWrapper = el.parents('.b-form-complex:eq(0)');
        if (formComboWrapper.length > 0) {
            if (curTooltipPos === 'right' || curTooltipPos === 'left') {
                var elOffsetTop = el.offset().top;
                var comboOffsetLeft = formComboWrapper.offset().left;
                return [
                    [comboOffsetLeft, elOffsetTop],
                    [comboOffsetLeft + formComboWrapper.outerWidth(), elOffsetTop + el.outerHeight()]
                ];
            }
        }

        if (croc.Class.check(item, 'croc.ui.form.field.CheckBox')) {
            var checkLabel = el.closest('.b-form-check>label');
            if (checkLabel.length) {
                return checkLabel.add(el);
            }
        }

        if (croc.Class.check(item, 'croc.ui.form.field.AbstractCheckGroup')) {
            return el.find('.b-input-' +
                (croc.Class.check(item, 'croc.ui.form.field.CheckBoxesGroup') ? 'checkbox' : 'radio') +
                ',>.b-form-check>label');
        }

        if (!tooltipLeft && (croc.Class.check(item, 'croc.ui.form.field.AbstractLinkField') ||
            croc.Class.check(item, 'croc.ui.form.field.LinkSelect'))) {
            return item.getTextElement();
        }

        return el;
    },

    /**
     * @param {croc.ui.form.validation.IValidatable} item
     * @returns {jQuery}
     * @private
     */
    __getTooltipTrigger: function(item) {
        if (croc.Class.check(item, 'croc.ui.form.field.CheckBox')) {
            var checkLabel = item.getElement().closest('.b-form-check>label');
            if (checkLabel.length) {
                return checkLabel.add(item.getElement());
            }
        }

        return item.getElement();
    },

    /**
     * @private
     */
    __onItemAdded: function(item) {
        if (this.__getItemMeta(item).offTooltip) {
            this.offTooltip(item);
        }
        this.repositionTooltips();
    },

    /**
     * @param {croc.ui.form.validation.IValidatable} item
     * @private
     */
    __onItemRemoved: function(item) {
        var data = this.getUserData(item);
        if (data.tooltip) {
            data.tooltip.destroy();
            delete data.tooltip;
        }

        this.repositionTooltips();
    },

    /**
     * @param {croc.ui.form.validation.IValidatable} item
     * @private
     */
    __onItemValidated: function(item) {
        var data = this.getUserData(item);

        var tooltip = data.tooltip;

        if (tooltip) {
            tooltip.destroy();
            delete data.tooltip;
        }

        if (data.disableTooltip || !item.getInvalidMessage() || item.getValid() !== false) {
            return;
        }

        var conf = _.assign({}, croc.ui.form.validation.Notifier.TOOLTIP_CONFIG, {
            content: item.getInvalidMessage(),
            position: this.tooltipPosition,
            controlWidget: croc.ui.WidgetsManager.getPageWidget(),
            opener: item.getElement(),
            manager: this.__bubbleManager,
            newDesign: false
        }, data.tooltipConf || {});

        if (!conf.target) {
            conf.target = function(tooltip) {
                return this.__getTooltipTarget(item, tooltip);
            }.bind(this);
        }

        if (!conf.trigger) {
            conf.trigger = this.__getTooltipTrigger(item);
        }

        tooltip = data.tooltip = new croc.ui.tooltip.Tooltip(conf);

        //todo перенести в стили
        tooltip.listenProperty('rendered', function(value) {
            if (value) {
                tooltip.getBodyElement().css('padding', '6px 9px');
            }
        });

        var meta = this.__getItemMeta(item);
        var autoOpen = this.__tooltipAutoOpen || meta.openTooltipAnyway;

        if (autoOpen) {
            this._getDisposer().setTimeout(function() {
                if (autoOpen && !tooltip.isDisposed()) {
                    this.__bubbleManager.openUnmanageable(tooltip);
                }
            }.bind(this), 250);
        }
    }
});

/**
 *
 * Стандартный конфиг для тултипа уведомления об ошибке
 * @type {Object}
 */
croc.ui.form.validation.Notifier.TOOLTIP_CONFIG = {
    scheme: 'red',
    position: 'right',
    autoCloseTimeout: 4000,
    openDelay: 400
};

/**
 * Регистраниция функции, которая по виджету класса cls возвращает target, к которому крепится тултип
 * @param {Function} cls
 * @param {function(croc.ui.form.validation.IValidatable, croc.ui.tooltip.Tooltip):jQuery} func
 */
croc.ui.form.validation.Notifier.registerTooltipTarget = function(cls, func) {
    this.__tooltipTargets[croc.utils.objUniqueId(cls)] = func;
};

croc.ui.form.validation.Notifier.__tooltipTargets = {};

},{}],64:[function(require,module,exports){
/**
 * Тултип b-sbutton
 */
croc.Class.define('croc.ui.tooltip.Pointer', {
    extend: croc.ui.tooltip.Tooltip,

    properties: {
        /**
         * Расположение относительно target
         * @type {string}
         */
        position: {
            inherit: true,
            check: ['left', 'right'],
            value: 'right'
        },

        /**
         * Цветовая схема тултипа
         * @type {string}
         */
        scheme: {
            inherit: true,
            check: ['red', 'yellow', 'blue'],
            value: 'yellow'
        },

        /**
         * Размер тултипа
         */
        size: {
            cssClass: true,
            type: 'string',
            value: '1',
            option: true
        }
    },

    options: {
        /**
         * Порядок, в котором подбирается подходящая позиция при автопозиционировании
         * @type {Array}
         */
        autoPositioningSequence: ['left', 'right'],

        /**
         * Можно ли смещать элемент
         * @type {boolean}
         */
        autoShift: false,

        /**
         * Шаблон по-умолчанию
         * @type {string}
         */
        htmlTemplate: '' +
        '<div class="b-sbutton type_image set_tooltip mod_system{cls}">' +
        '<div class="b-sbutton-before" style="display: none"></div>' +
        '<div class="b-sbutton-h">{items}</div>' +
        '<div class="b-sbutton-after" style="display: none"></div>' +
        '</div>',

        /**
         * Новый дизайн тултипов
         * @type {boolean}
         */
        newDesign: false,

        /**
         * Анимация всплывания
         * @type {string}
         */
        showAnimation: 'fly',

        /**
         * Css-стили корневого элемента виджета
         * @type {Object}
         */
        style: {
            value: {
                position: 'absolute'
            }
        },

        /**
         * Расстояние от края bubble до соответствующего края target
         * @type {number}
         */
        sourceDistance: 0
    },

    members: {
        /**
         * Элемент, содержащий контент тултипа
         * @returns {jQuery}
         */
        getBodyElement: function() {
            return this.getElement().find('.b-sbutton-h');
        },

        /**
         * Возвращает элемент точки крепления. Например, стрелка тултипа.
         * @returns {jQuery}
         * @protected
         */
        _getJointEl: function() {
            return null;
        }
    }
});
},{}],65:[function(require,module,exports){
/**
 * Тултип
 * В качестве target можно указывать 'mouseTrigger' (должен быть обязательно указан trigger), в этом случае при
 * тултип появится возле курсора мыши при открытии.
 */
croc.Class.define('croc.ui.tooltip.Tooltip', {
    extend: croc.ui.Container,
    implement: croc.ui.common.bubble.IBubble,
    include: croc.ui.common.bubble.MBubble,

    statics: {
        /**
         * шаблон списка внутри тултипа. view - inline, block
         * @type {string}
         */
        TEMPLATE_TOOLTIP_LIST: '<div class="b-tooltip-list view_{view} {cls}">{items}</div>',

        /**
         * шаблон элемента списка внутри тултипа
         * @type {string}
         */
        TEMPLATE_TOOLTIP_LIST_ITEM: '<div class="b-tooltip-item">{content}</div>',

        /**
         * @type {string}
         */
        TEMPLATE_FOOTER_ACTION: '' +
            '<div class="b-tooltip-foot">' +
            '   <div class="b-tooltip-foot-action js-tooltip-foot-action">{text}</div>' +
            '</div>',

        /**
         * Пресет triggerOptions для открытия/закрытия по клику
         * @type {Object}
         */
        TRIGGER_CLICK: {
            openOnMouseenter: false,
            openOnClick: true,
            closeOnClick: true
        },

        /**
         * Пресет triggerOptions для открытия/закрытия по клику
         * @type {Object}
         */
        TRIGGER_CLICK_OPEN: {
            openOnMouseenter: false,
            openOnClick: true
        },

        /**
         * Пресет triggerOptions для открытия/закрытия по клику
         * @type {Object}
         */
        TRIGGER_NONE: {
            openOnMouseenter: false
        },

        /**
         * @private
         * @static
         */
        __POSITION_TO_DIR: {
            top: 'btt',
            bottom: 'ttb',
            right: 'ltr',
            left: 'rtl'
        },

        /**
         * @param {Object} conf
         * @param {Function} [cls=croc.ui.tooltip.Tooltip]
         * @param {function(Object)} [confCallback]
         * @param [context]
         * @returns {$.Deferred}
         */
        lazyTooltip: function(conf, cls, confCallback, context) {
            if (!cls) {
                cls = croc.ui.tooltip.Tooltip;
            }

            var deferred = $.Deferred();

            var el = conf.target;
            var trigger = _.assign(_.clone(cls.config.options.triggerOptions.value), conf.triggerOptions);
            var event = _.compact([trigger.openOnMouseenter && 'mouseenter', trigger.openOnClick && 'click']).join(' ');

            var wasDelay = false;
            var timeout;

            var listener = function(e) {
                if (timeout) {
                    return;
                }

                if (conf.openDelay && !wasDelay && !(trigger.openOnClickImmediately && e && e.type === 'click')) {
                    timeout = setTimeout(function() {
                        wasDelay = true;
                        timeout = null;
                        listener();
                    }, conf.openDelay);

                    el.on('mouseleave', function() {
                        clearTimeout(timeout);
                        timeout = null;
                    });

                    return;
                }

                el.off(event, listener);
                if (conf.openDelay) {
                    el.off('mouseleave', delayOffListener);
                }
                if (timeout) {
                    clearTimeout(timeout);
                }

                if (confCallback) {
                    confCallback.call(context || window, conf);
                }
                var tooltip = new cls(conf);
                deferred.resolve(tooltip);
                tooltip.open(true);
            };
            el.on(event, listener);

            var delayOffListener = function() {
                if (timeout) {
                    clearTimeout(timeout);
                    timeout = null;
                }
            };
            if (conf.openDelay) {
                el.on('mouseleave', delayOffListener);
            }

            deferred.open = function() {
                listener({type: 'program'});
            };

            return deferred;
        }
    },

    properties: {
        /**
         * Содержимое тултипа. Внутренний шаблон.
         * @type {string}
         */
        content: {
            type: 'string',
            value: '',
            apply: function(value) {
                if (this.getElement()) {
                    this.getBodyElement().html(value);
                }
            },
            option: true
        },

        /**
         * @type {string}
         * @private
         */
        dir: {
            cssClass: true,
            __getter: null,
            __setter: null
        },

        /**
         * Разрешено ли открывать тултип
         * @type {boolean}
         */
        disabled: {
            type: 'boolean',
            value: false,
            apply: function(value) {
                if (!value) {
                    this.__openDelayDisposer.disposeAll();
                    this.close();
                }
            }
        },

        /**
         * Новый дизайн тултипов
         * @type {boolean}
         */
        newDesign: {
            cssClass: 'set_default',
            type: 'boolean',
            option: true,
            value: true
        },

        /**
         * Расположение относительно target
         * @type {string}
         */
        position: {
            inherit: true,
            value: 'top'
        },

        /**
         * Цветовая схема тултипа
         * @type {string}
         */
        scheme: {
            cssClass: true,
            check: ['white', 'red'],
            value: 'white',
            option: true
        },

        /**
         * Скин тултипа
         * @type {string}
         */
        skin: {
            cssClass: true,
            type: 'string',
            value: 'default',
            option: true
        }
    },

    options: {
        /**
         * Флаг, закрывать ли bubble через некоторый таймаут после открытия
         * @type {boolean}
         */
        autoClose: true,

        /**
         * Автоматическое позиционирование bubble исходя из положения на экране
         * @type {boolean}
         */
        autoPositioning: true,

        /**
         * Порядок, в котором подбирается подходящая позиция при автопозиционировании
         * @type {Array|Object}
         */
        autoPositioningSequence: {
            value: {
                right: ['bottom', 'top', 'left'],
                bottom: ['right', 'top', 'left'],
                left: ['bottom', 'right', 'top'],
                top: ['right', 'bottom', 'left']
            }
        },

        /**
         * css-стили b-tooltip-body
         * @type {Object}
         */
        bodyStyle: {
            extend: true
        },

        /**
         * Флаг, закрывать ли bubble на клик по документу
         * @type {boolean}
         */
        closeOnHtmlClick: true,

        /**
         * Флаг, позиционировать ли bubble при ресайзе/скролле
         * @type {boolean}
         */
        dynamicPositioning: true,

        /**
         * Содержимое футера тултипа.
         * @type {string}
         */
        footer: {
            type: 'string',
            value: ''
        },

        /**
         * Анимация сокрытия
         * @see #showAnimation
         * @type {string}
         */
        hideAnimation: 'fade',

        /**
         * Шаблон по-умолчанию
         * @type {string}
         */
        htmlTemplate: '' +
            '<div class="b-tooltip{cls}">' +
            '   <div class="b-tooltip-tri"></div>' +
            '   <div class="b-tooltip-head"></div>' +
            '   <div class="b-tooltip-body">{items}</div>' +
            '   {footer}' +
            '</div>',

        /**
         * Если условие не выполнится, тултип не откроется
         * @type {function(jQuery, croc.ui.tooltip.Tooltip):boolean}
         */
        openCondition: {
            type: 'function'
        },

        /**
         * Время от возбуждения события до открытия тултипа
         * @type {number}
         */
        openDelay: {
            type: 'number'
        },

        /**
         * Расстояние от края bubble до соответствующего края target.
         * null - по-умолчанию (10 для старых тултипов, 8 для новых)
         * @type {number}
         */
        sourceDistance: null,

        /**
         * Зона, при взаимодействии с которой появляется тултип (по-умолчанию равен target)
         * @type {jQuery|croc.ui.Widget}
         */
        trigger: {
            type: [jQuery, croc.ui.Widget]
        },

        /**
         * Опции триггеринга (событий показа/сокрытия) тултипа
         * @type {Object}
         */
        triggerOptions: {
            type: 'object',
            extend: true,
            value: {
                openOnMouseenter: true,
                closeOnMouseleave: false,
                openOnClick: false,
                openOnClickImmediately: true,
                closeOnClick: false
            }
        },

        /**
         * Селектор внутри триггера, на который делегируются события триггеринга
         * @type {string}
         */
        triggerSelector: {
            type: 'string'
        },

        /**
         * Расстояние от края bubble до центра target при выравнивании относительно центра
         * @type {number}
         */
        _alignGap: 20,

        /**
         * Минимально возможное пересечение target и bubble при смещении во время автопозиционирования
         * @type {number}
         */
        _minIntersection: 15,

        /**
         * Минимальное расстояние от края экрана до ближайшего края bubble при автопозиционировании
         * @type {Array.<number>}
         */
        _screenGap: [5, 5, 5, 5]
    },

    construct: function(options) {
        //Disposer живёт после попытки открыть тултип до его открытия по прошествии времени openDelay
        this.__openDelayDisposer = new croc.util.Disposer();

        this.on('beforePosition', function() {
            this.__setDir(croc.ui.tooltip.Tooltip.__POSITION_TO_DIR[this.getCurrentPosition()] || null);
        }, this);

        croc.ui.tooltip.Tooltip.superclass.__construct__.apply(this, arguments);
    },

    destruct: function() {
        this.__openDelayDisposer.disposeAll();
    },

    members: {
        /**
         * Элемент, содержащий контент тултипа
         * @returns {jQuery}
         */
        getBodyElement: function() {
            return this.__bodyElement || (this.__bodyElement = this.getElement().find('.b-tooltip-body'));
        },

        /**
         * @param {boolean} [elementOnly=false]
         * @returns {jQuery}
         */
        getCurrentTrigger: function(elementOnly) {
            var trigger = this.__currentTrigger ||
                (this.__triggerSelector || !this.__trigger ?
                    this.getCurrentTarget() || this.getTarget() : this.__trigger);
            if (trigger && trigger instanceof croc.ui.Widget) {
                trigger = trigger.getElement();
            }
            return !trigger || (elementOnly && !(trigger instanceof jQuery)) ? null : trigger;
        },

        /**
         * Показать bubble. Если тултип был открыт, то возвращает true.
         * @param {boolean} [onTrigger=false] курсор находится на триггере, после открытия следует остановить таймер
         * автозакрытия
         * @returns {boolean}
         */
        open: function(onTrigger) {
            if (this.getDisabled()) {
                return;
            }

            var wasHidden = !this.getShown();

            var wasOpened = onTrigger ?
                this.__onTriggerOpen(this.getCurrentTrigger(true), null) :
                croc.ui.common.bubble.MBubble.prototype.open.apply(this, arguments);

            if (!wasOpened) {
                this._openOnRender = _.toArray(arguments);
            }

            //если тултип был открыт не кликом, то некоторое время не разрешаем закрывать его кликом
            if (wasOpened && this.__openEvent !== 'click' && this.__triggerOptions.closeOnClick) {
                this.__dontCloseOnClick = true;
                var callback = this._getShowDisposer().addCallback(function() {
                    this.__dontCloseOnClick = false;
                }, this);
                this._getOpenDisposer().setTimeout(function() {
                    this.__dontCloseOnClick = false;
                    callback.remove();
                }.bind(this), 300);
            }

            if (!this.__internalOpen && wasHidden && wasOpened && !onTrigger) {
                var curTrigger = this.getCurrentTrigger(true);
                if (curTrigger) {
                    this.__currentTrigger = curTrigger;
                    this.__addTriggerOffListeners(curTrigger);
                }
            }
            this.__internalOpen = false;
            this.__openEvent = null;

            return wasOpened;
        },

        /**
         * Дополнительные данные для рендеринга из шаблона
         * @param {Object} options
         * @returns {object}
         * @protected
         */
        _getAddRenderData: function(options) {
            return _.assign(croc.ui.tooltip.Tooltip.superclass._getAddRenderData.apply(this, arguments), {
                items: this.getContent() || null,
                footer: options.footer || ''
            });
        },

        /**
         * Элемент отвечающий за размеры bubble
         * @returns {jQuery}
         * @protected
         */
        _getSizeableElement: function() {
            return this.getBodyElement();
        },

        /**
         * Возвращает коллекцию элементов, к которым в данный момент прикреплён bubble
         * @returns {jQuery}
         * @protected
         */
        _getHostElements: function() {
            var curTarget = this.getCurrentTarget();
            return curTarget && curTarget instanceof jQuery ? curTarget : this.__trigger || null;
        },

        /**
         * Возвращает элемент точки крепления. Например, стрелка тултипа.
         * @returns {jQuery}
         * @protected
         */
        _getJointEl: function() {
            return this.__jointEl || (this.__jointEl = this.getElement().find('.b-tooltip-tri'));
        },

        /**
         * Инициализация виджета после его отрисовки в DOM
         * @return {$.Deferred|undefined}
         * @protected
         */
        _initWidget: function() {
            croc.ui.tooltip.Tooltip.superclass._initWidget.apply(this, arguments);

            this.__setUpTriggering();
        },

        /**
         * Стоит ли закрывать bubble после клика по данному элементу
         * @param {jQuery} targetEl
         * @returns {boolean}
         * @private
         */
        _isClosingOnHtmlClickAllowed: function(targetEl) {
            return croc.ui.common.bubble.MBubble.prototype._isClosingOnHtmlClickAllowed.apply(this, arguments) &&
                (!this.__currentTrigger || !targetEl.closest(this.__currentTrigger).length);
        },

        /**
         * Выполняется когда свойства виджета уже инициализированы
         * @param {Object} options
         * @protected
         */
        _onPropertiesInitialized: function(options) {
            this.__openCondition = options.openCondition;
            this.__openDelay = options.openDelay;
            this.__bodyStyle = options.bodyStyle;
            this.__trigger = options.trigger &&
                (options.trigger instanceof croc.ui.Widget ? options.trigger.getElement() : options.trigger);
            this.__triggerOptions = options.triggerOptions;
            this.__triggerSelector = options.triggerSelector;

            if (this.getTarget() === 'mouseTrigger') {
                this.setTarget(null);
                this.__mouseTrigger = true;
            }

            if (!this.__trigger) {
                var target = this.getTarget();
                if (target instanceof croc.ui.Widget) {
                    this.__trigger = target.getElement();
                }
                else if (target instanceof jQuery) {
                    this.__trigger = target;
                }
            }

            if (!options.controlWidget && !this.getTarget() && this.__trigger) {
                options.controlWidget = croc.ui.Widget.getClosestWidget(this.__trigger);
            }

            if (options.newDesign && this.getSkin() === 'default') {
                this.setSkin(null);
            }
            if (options.sourceDistance === null) {
                options.sourceDistance = options.newDesign ? 8 : 10;
            }

            croc.ui.common.bubble.MBubble.prototype._onPropertiesInitialized.apply(this, arguments);
            croc.ui.tooltip.Tooltip.superclass._onPropertiesInitialized.apply(this, arguments);
        },

        /**
         * Назначить элемент виджету
         * @param {jQuery} el
         * @protected
         */
        _setElement: function(el) {
            croc.ui.tooltip.Tooltip.superclass._setElement.apply(this, arguments);
            if (this.__bodyStyle) {
                this.getBodyElement().css(this.__bodyStyle);
            }
        },

        /**
         * Во время ожидания открытия тултипа отслеживаем события, которые могут отменить открытие
         * @param el
         * @private
         */
        __addDelayOffListeners: function(el) {
            var add = function(event) {
                this.__openDelayDisposer.addListener(el, event, function() {
                    this.__openDelayDisposer.disposeAll();
                }, this);
            }.bind(this);

            if (this.__triggerOptions.openOnMouseenter) {
                add('mouseleave');
            }
        },

        /**
         * Отслеживать события для открытия тултипа
         * @private
         */
        __addTriggerListeners: function() {
            var add = function(event) {
                var eventParam = this.__triggerSelector ? [event, this.__triggerSelector] : event;
                this._getDisposer().addListener(this.__trigger, eventParam, function(e) {
                    if (this.__closingElement !== e.currentTarget) {
                        if (this.__mouseTrigger) {
                            this.setTarget([e.pageX, e.pageY]);
                        }
                        this.__onTriggerStart($(e.currentTarget), event);
                    }
                }, this);
            }.bind(this);

            if (this.__triggerOptions.openOnMouseenter) {
                add('mouseenter');
            }

            if (this.__triggerOptions.openOnClick) {
                add('click');
            }
        },

        /**
         * Отслеживать события, по которым тултип должен закрываться
         * @param el
         * @private
         */
        __addTriggerOffListeners: function(el) {
            var add = function(event) {
                this._getOpenDisposer().addListener(el, event, function(e) {
                    if (this.__dontCloseOnClick && event === 'click') {
                        return;
                    }

                    this.close();
                    this.__closingElement = el[0];
                    this._getDisposer().defer(function() {
                        this.__closingElement = null;
                    }, this);
                }, this);
            }.bind(this);

            if (this.__triggerOptions.closeOnMouseleave) {
                add('mouseleave');
            }

            if (this.__triggerOptions.closeOnClick) {
                add('click');
            }
        },

        /**
         * Метод вызывается при возбуждении события для открытия тултипа
         * @param el
         * @param event
         * @private
         */
        __onTriggerStart: function(el, event) {
            if (this.getDisabled()) {
                return;
            }

            if (!this.__openDelay || (this.__triggerOptions.openOnClickImmediately && event === 'click')) {
                this.__onTriggerOpen(el, event);
            }
            //если необходимо подождать перед открытием тултипа
            else {

                if (this.__currentDelayEl && this.__currentDelayEl[0] === el[0]) {
                    return;
                }

                this.__openDelayDisposer.disposeAll();

                this.__currentDelayEl = el;
                this.__openDelayDisposer.addCallback(function() {
                    this.__currentDelayEl = null;
                }, this);

                //открываем тултип по прошествии openDelay
                this.__openDelayDisposer.setTimeout(function() {
                    this.__onTriggerOpen(el, event);
                }.bind(this), this.__openDelay);

                this.__addDelayOffListeners(el);
            }
        },

        /**
         * Открыть тултип после успешного триггеринга
         * @param el
         * @param event
         * @private
         */
        __onTriggerOpen: function(el, event) {
            this.stopCloseTimeout();

            //если был произведён триггеринг на другом элементе, то закрываем тултип перед открытием на новом
            if (this.getShown() && (!this.__currentTrigger || el[0] !== this.__currentTrigger[0])) {
                this.close(true);
            }

            if (!this.getOpen() && (!this.__openCondition || this.__openCondition(el, this))) {

                this.__currentTrigger = el;

                //если у тултипа нет target, то назначаем его из текущего элемента-триггера
                if (!this.getTarget()) {
                    this.setTarget(el);
                    this.__targetSet = true;
                }

                this._getOpenDisposer().addCallback(function() {
                    if (this.__targetSet) {
                        this.setTarget(null);
                        this.__targetSet = false;
                    }
                }, this);

                //открываем и сразу останавливаем таймер закрытия тултипа
                this.__internalOpen = true;
                this.__openEvent = event;
                if (this.open()) {
                    this.stopCloseTimeout();

                    //запускаем таймер только если мышь покинула зону триггера
                    this._getOpenDisposer().addListeners(el, {
                        mouseleave: function() {
                            this.startCloseTimeout();
                        }.bind(this),
                        mouseenter: function() {
                            this.stopCloseTimeout();
                        }.bind(this)
                    });

                    this.__addTriggerOffListeners(el);
                    return true;
                }
            }
            return false;
        },

        /**
         * Настроить триггеринг тултипа (открытие/закрытие по определённым событиям)
         * @private
         */
        __setUpTriggering: function() {
            if (this.__trigger) {
                this.listenProperty('shown', function(shown) {
                    if (shown) {
                        this.__openDelayDisposer.disposeAll();
                    }
                    else {
                        this.__currentTrigger = null;
                    }
                }, this);

                this.__addTriggerListeners();
            }
        }
    }
});

},{}],66:[function(require,module,exports){
/**
 * Определение браузера и его версии
 * @static
 */
croc.Class.define('croc.util.Browser', {
    type: 'static',

    statics: {
        /**
         * @private
         * @static
         */
        __ua: null,

        /**
         * @param {String} browser
         * @param {Array|String|number} [versionCondition]
         * @returns {Boolean}
         * @static
         */
        check: function(browser, versionCondition) {
            if (this.getName() === browser) {
                if (versionCondition) {
                    var conditions;
                    if (!Array.isArray(versionCondition)) {
                        conditions = [versionCondition];
                    } else {
                        conditions = versionCondition;
                    }

                    return conditions.every(function(condition) {
                        condition = condition.toString();
                        var sign = condition.match(/[<>=]*/)[0];
                        var version = parseInt(condition.replace(sign, ''), 10);

                        switch (sign) {
                            case '<': return this.getVersion() < version;
                            case '<=': return this.getVersion() <= version;
                            case '>': return this.getVersion() > version;
                            case '>=': return this.getVersion() >= version;
                            default: return this.getVersion() === version;
                        }
                    }.bind(this));
                }
                return true;
            }
            return false;
        },

        /**
         * @returns {String}
         * @static
         */
        getName: function() {
            return this.__uaMatch(navigator.userAgent).browser;
        },

        /**
         * @returns {Number}
         * @static
         */
        getVersion: function() {
            return parseInt(this.__uaMatch(navigator.userAgent).version, 10);
        },

        /**
         * @returns {Boolean}
         * @static
         */
        isChrome: function() {
            return this.check('chrome');
        },

        /**
         * @returns {Boolean}
         * @static
         */
        isFirefox: function() {
            return this.check('mozilla');
        },

        /**
         * @param {Array|String|number} [versionCondition]
         * @returns {Boolean}
         * @static
         */
        isIE: function(versionCondition) {
            return this.check('msie', versionCondition);
        },

        /**
         * @param {Array|String|number} [versionCondition]
         * @returns {Boolean}
         * @static
         */
        isOpera: function(versionCondition) {
            return this.check('opera', versionCondition);
        },

        /**
         * @returns {Boolean}
         * @static
         */
        isSafari: function() {
            return this.check('safari');
        },

        /**
         * @private
         * @static
         */
        __uaMatch: function(ua) {
            if (!this.__ua) {
                var rwebkit = /(webkit)[ \/]([\w.]+)/,
                    ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
                    rmsie = /(msie) ([\w.]+)/,
                    rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/;

                ua = ua.toLowerCase();

                var match = rwebkit.exec(ua) ||
                    ropera.exec(ua) ||
                    rmsie.exec(ua) ||
                    ua.indexOf("compatible") < 0 && rmozilla.exec(ua) ||
                    [];

                if (match[1] !== 'msie' && ua.match(/trident/)) {
                    match[1] = 'msie';
                } else if (match[1] === 'webkit') {
                    match[1] = /chrome/.test(ua) ? 'chrome' : 'safari';
                }

                this.__ua = { browser: match[1] || "", version: match[2] || "0" };
            }

            return this.__ua;
        }
    }
});
},{}],67:[function(require,module,exports){
croc.ns('croc.util');

/**
 * Класс-помощник в освобождении ресурсов и удалении обработчиков.
 * Хранилище обработчиков событий. Все обработчики назначенные с помощью этого хранилища можно удалить разом вызвав
 * метод {@link croc.util.Disposer#disposeAll}.
 */
croc.Class.define('croc.util.Disposer', {
    extend: croc.Object,

    properties: {
        bound: {
            apply: function(value) {
                if (!value) {
                    this.__lastState = this.saveState();
                    this.disposeAll();
                }
                else {
                    this.restoreState(this.__lastState ? this.__lastState.concat(this.__items) : this.__items.concat());
                }
            },
            value: true,
            option: true
        }
    },

    construct: function() {
        /**
         * @type {Array.<Object>}
         * @private
         */
        this.__items = [];

        croc.util.Disposer.superclass.__construct__.apply(this, arguments);
    },

    destruct: function() {
        this.disposeAll();
    },

    members: {
        /**
         * Создать биндинг свойства prop объекта на свойство targetProp объекта target. Возможно указать mapper для трансформации
         * значения свойства. Возвращает функцию, которая разрывает биндинг при её вызове.
         * @param {croc.IObject} source
         * @param {String} prop
         * @param {Object} target
         * @param {String} targetProp
         * @param {function(*):*} [mapper=null]
         * @param [context=null]
         * @returns {croc.util.Disposer.Descriptor}
         */
        addBinding: function(source, prop, target, targetProp, mapper, context) {
            var descriptor = new croc.util.Disposer.Descriptor(this, {
                obj: source,
                unbinder: this.getBound() && source.bind.call.apply(source.bind, arguments),
                method: 'addBinding',
                args: _.toArray(arguments)
            });
            this.__items.push(descriptor);

            return descriptor;
        },

        addInitializator: function(callback, context) {
            if (this.getBound()) {
                callback.call(context);
            }
            var descriptor = new croc.util.Disposer.Descriptor(this, {
                none: true,
                method: 'addInitializator',
                args: _.toArray(arguments)
            });
            this.__items.push(descriptor);

            return descriptor;
        },

        /**
         * Добавить функцию, которая будет вызывана при очистке обработчиков
         * @param {Function} callback
         * @param {Object} [context]
         * @returns {Object}
         * @returns {croc.util.Disposer.Descriptor}
         */
        addCallback: function(callback, context) {
            if (!this.getBound()) {
                return new croc.util.Disposer.Descriptor(this, {});
            }

            var descriptor = new croc.util.Disposer.Descriptor(this, {
                unbinder: context ? callback.bind(context) : callback
            });
            this.__items.push(descriptor);

            return descriptor;
        },

        /**
         * Добавить функции, которая будет вызывана при очистке обработчиков
         * @param {...Function} varargs
         * @returns {Array.<Object>}
         * @returns {croc.util.Disposer.Descriptor}
         */
        addCallbacks: function(varargs) {
            return this.addCallback(_.toArray(arguments));
        },

        /**
         * Назначить обработчик события на croc.Object, croc или jQuery объект
         * @param {croc.Object|jQuery|string} obj объект, на событие которого назначается обработчик
         * @param {string|Array} event событие, для метода jQuery#on можно передать массив - [event, selector]
         * @param {Function} listener обработчик
         * @param [context=undefined] контекст
         * @returns {croc.util.Disposer.Descriptor}
         */
        addListener: function(obj, event, listener, context) {
            if (this.getBound()) {
                if (context) {
                    listener = listener.bind(context);
                }
                if (obj === croc) {
                    croc.subscribe(event, listener);
                }
                else if (Array.isArray(event)) {
                    obj.on(event[0], event[1], listener);
                }
                else {
                    obj.on(event, listener);
                }
            }

            var descriptor = new croc.util.Disposer.Descriptor(this, {
                obj: obj,
                event: event,
                listener: listener,
                method: 'addListener',
                args: _.toArray(arguments)
            });
            this.__items.push(descriptor);

            return descriptor;
        },

        /**
         * Добавляет обработчики для нескольких событий объекта
         * @param {croc.Object|jQuery|string} obj см. {@link #addListener}
         * @param {Object.<string, Function>} events объект, ключи которого - имена событий, значения - обработчики
         * @param [context=undefined]
         * @returns {Array.<croc.util.Disposer.Descriptor>}
         */
        addListeners: function(obj, events, context) {
            var descriptors = [];
            _.forOwn(events, function(listener, event) {
                descriptors.push(this.addListener(obj, event, listener, context));
            }, this);

            return descriptors;
        },

        /**
         * Функция, которую возвращает trigger будет вызвана при очищении disposer. trigger будет вызываться каждый раз
         * при setBound(true)
         * @param {function():function} trigger
         * @param [context]
         * @returns {croc.util.Disposer.Descriptor}
         */
        addTrigger: function(trigger, context) {
            var descriptor = new croc.util.Disposer.Descriptor(this, {
                unbinder: (this.getBound() && (context ? trigger.call(context) : trigger())) || _.noop,
                method: 'addTrigger',
                args: _.toArray(arguments)
            });
            this.__items.push(descriptor);

            return descriptor;
        },

        /**
         * Послать ajax-запрос. Отменяется (abort) при очистке.
         * @param params
         * @returns {jqXHR}
         */
        ajax: function(params) {
            if (!this.getBound()) {
                throw new Error('not implemented!');
            }

            var ajax = croc.ajax(params);
            var descriptor = this.addCallback(function() { ajax.abort(); });
            ajax.always(function() { croc.utils.arrRemove(this.__items, descriptor); }.bind(this));
            ajax.$$descriptor = descriptor;

            descriptor.method = 'ajax';
            descriptor.args = _.toArray(arguments);

            return ajax;
        },

        /**
         * Алиас к setTimeout(callback, 0)
         * @param {function} callback
         * @param {Object} [context]
         * @returns {croc.util.Disposer.Descriptor}
         */
        defer: function(callback, context) {
            return this.setTimeout(function() {
                callback.call(context || window);
            }, 0);
        },

        /**
         * Удалить все добавленные элементы
         */
        disposeAll: function() {
            var $this = this;
            $.each(this.__items, function(i, desc) {
                $this.disposeItem(desc, false);
            });

            this.__items = [];
        },

        /**
         * Удалить элемент по его дескриптору
         * @param {Object} descriptor
         * @param {boolean} [removeFromArr=true] internal!
         */
        disposeItem: function(descriptor, removeFromArr) {
            if (!descriptor) {
                return;
            }
            if (!(descriptor instanceof croc.util.Disposer.Descriptor)) {
                throw new TypeError('Передан неверный дескриптор');
            }

            if ((removeFromArr === false || croc.utils.arrRemove(this.__items, descriptor)) && !descriptor.none) {
                if (descriptor.interval) {
                    clearInterval(descriptor.interval);
                }
                else if (descriptor.timeout) {
                    clearTimeout(descriptor.timeout);
                }
                else if (descriptor.unbinder) {
                    _.invoke(croc.utils.arr(descriptor.unbinder), 'call', window);
                }
                else if (descriptor.obj === croc) {
                    croc.unsubscribe(descriptor.event, descriptor.listener);
                }
                else if (descriptor.obj instanceof croc.Object) {
                    descriptor.obj.un(descriptor.event, descriptor.listener);
                }
                else if (Array.isArray(descriptor.event)) {
                    descriptor.obj.off(descriptor.event[0], descriptor.event[1], descriptor.listener);
                }
                else {
                    descriptor.obj.off(descriptor.event, descriptor.listener);
                }
            }
            descriptor.remove = _.noop;
        },

        /**
         * Есть ли неочищенные элементы
         * @returns {boolean}
         */
        hasItems: function() {
            return !!this.__items.length;
        },

        /**
         * Вызывает callback каждый раз, когда значение свойства prop изменяется, а также непосредственно в момент вызова этого
         * метода. Возвращает функцию, которая прекращает прослушивание свойства при её вызове.
         * @param {croc.IObject} source
         * @param {String} prop
         * @param {Function} callback
         * @param [context=null]
         * @returns {croc.util.Disposer.Descriptor}
         */
        listenProperty: function(source, prop, callback, context) {
            var descriptor = new croc.util.Disposer.Descriptor(this, {
                obj: source,
                unbinder: this.getBound() && source.listenProperty.call.apply(source.listenProperty, arguments),
                method: 'listenProperty',
                args: _.toArray(arguments)
            });
            this.__items.push(descriptor);

            return descriptor;
        },

        /**
         * Удалить все обработчики событий определённого объекта
         * @param obj
         */
        removeObject: function(obj) {
            this.__items.concat().forEach(function(desc) {
                if (desc.obj === obj) {
                    this.disposeItem(desc);
                }
            }, this);
        },

        restoreState: function(state) {
            this.disposeAll();
            state.forEach(function(item) {
                if (item.method) {
                    this[item.method].apply(this, item.args);
                }
            }, this);
        },

        /**
         * @returns {Array}
         */
        saveState: function() {
            return this.__items.concat();
        },

        /**
         * Установить интервал вызова функции
         * @param {Function} func
         * @param {number} interval
         * @returns {croc.util.Disposer.Descriptor}
         */
        setInterval: function(func, interval) {
            var descriptor = new croc.util.Disposer.Descriptor(this, {
                interval: this.getBound() && setInterval(func, interval),
                method: 'setInterval',
                args: _.toArray(arguments)
            });

            this.__items.push(descriptor);

            return descriptor;
        },

        /**
         * Установить таймаут вызова функции
         * @param {Function} func
         * @param {number} timeout
         * @returns {croc.util.Disposer.Descriptor}
         */
        setTimeout: function(func, timeout) {
            var descriptor = new croc.util.Disposer.Descriptor(this, {
                interval: this.getBound() && setTimeout(function() {
                    func();
                    croc.utils.arrRemove(this.__items, descriptor);
                }.bind(this), timeout),
                method: 'setTimeout',
                args: _.toArray(arguments)
            });
            this.__items.push(descriptor);

            return descriptor;
        },

        /**
         * Создаёт функцию, вызов которой будет запрещён после очищения disposer
         * @param {function} func
         * @param [context]
         * @returns {Function}
         */
        wrapFunc: function(func, context) {
            var allowed = false;
            this.addInitializator(function() {
                allowed = true;
                this.addCallback(function() {
                    allowed = false;
                });
            }, this);

            return function() {
                return allowed ? func.apply(context || this, arguments) : undefined;
            };
        }
    }
});

/**
 * @param {croc.util.Disposer} disposer
 * @param config
 * @constructor
 */
croc.util.Disposer.Descriptor = function(disposer, config) {
    this.disposer = disposer;
    _.assign(this, config);

    if (!disposer.getBound()) {
        config.none = true;
    }
};

croc.util.Disposer.Descriptor.prototype.remove = function() {
    this.disposer.disposeItem(this);
};

},{}],68:[function(require,module,exports){
/**
 * Класс, отвечающий за предзагрузку изображений
 */
croc.Class.define('croc.util.ImagesPreloader', {
    extend: croc.Object,

    statics: {
        /**
         * @private
         * @static
         */
        __loadedImages: {},

        /**
         * @private
         * @static
         */
        __loadingImages: {},

        /**
         * Загрузить изображение/изображения
         * @param {string|jQuery|Element|Array.<string|Element>} image
         * @param {boolean} [returnDeferred=false]
         * @returns {$.Deferred}
         */
        load: function(image, returnDeferred) {
            if (!croc.isClient) {
                return null;
            }
            if (returnDeferred) {
                return new croc.util.ImagesPreloader().add(image, true);
            }
            if (!this.__instance) {
                this.__instance = new croc.util.ImagesPreloader();
            }
            this.__instance.add(image);
            return null;
        }
    },

    events: {
        /**
         * загрузка всех изображений из очереди завершена
         */
        finished: null,

        /**
         * очередное изображение загружено
         * @param {string} image
         * @param {number} loaded
         * @param {number} total
         */
        imageLoaded: null
    },

    properties: {
        /**
         * Все изображения загружены
         * @type {boolean}
         */
        loaded: {
            __setter: null,
            value: true,
            event: true
        }
    },

    options: {
        /**
         * Максимальное время загрузки изображений
         * @type {number}
         */
        maxLoadTime: null
    },

    construct: function(options) {
        this.__loadedImages = {};
        this.__loading = false;
        this.__loadedCount = 0;
        this.__total = 0;
        this.__loadDisposer = new croc.util.Disposer();
        this.__maxLoadTime = options.maxLoadTime;
        this.__notLoaded = {};

        croc.util.ImagesPreloader.superclass.__construct__.apply(this, arguments);
    },

    members: {
        /**
         * Добавить изображение/изображения в очередь загрузки. Опционально возвращает deferred, который будет
         * инициирован при загрузке только переданных изображений
         * @param {string|jQuery|Element|Array.<string|Element>} image
         * @param {boolean} [returnDeferred=false]
         */
        add: function(image, returnDeferred) {
            if (image instanceof jQuery) {
                image = image.get();
            }
            else if (!Array.isArray(image)) {
                image = [image];
            }

            var listenImage = function(img) {
                var listener = this.on('imageLoaded', function(curSrc, error) {
                    if (img.src === curSrc) {
                        img.$$error = error;
                        this.un(listener);
                    }
                }, this);
            }.bind(this);

            var imagesToAwait = {};
            image = image.filter(function(img) {
                var src = typeof img === 'string' ? img : img.src;
                if (src in this.__loadedImages && _.isElement(img)) {
                    img.$$error = !this.__loadedImages[src];
                    return false;
                }

                imagesToAwait[src] = true;

                if (this.__notLoaded[src] && _.isElement(img)) {
                    listenImage(img);
                }

                return !this.__notLoaded[src];
            }, this);

            if (image.length > 1) {
                var oldImage = image;
                image = _.uniq(image, function(img) {
                    return typeof img === 'string' ? img : img.src;
                });
                if (oldImage.length !== image.length) {
                    _.difference(oldImage, image).forEach(function(img) {
                        if (_.isElement(img)) {
                            listenImage(img);
                        }
                    });
                }
            }

            this.__total += image.length;
            this.__setLoaded(false);

            var result = null;
            if (returnDeferred) {
                if (Object.keys(imagesToAwait).length === 0) {
                    result = $.Deferred().resolve();
                }
                else {
                    result = $.Deferred();

                    var listener = this.on('imageLoaded', function(src) {
                        delete imagesToAwait[src];
                        if (Object.keys(imagesToAwait).length === 0) {
                            result.resolve();
                            this.un(listener);
                        }
                    }, this);
                }
            }

            if (image.length) {
                if (this.__maxLoadTime && !this.__loadTimeout) {
                    this.__loadTimeout = this.__loadDisposer.setTimeout(function() {
                        this.__loadTimeout = null;
                        if (!this.getLoaded()) {
                            _.forOwn(this.__notLoaded, function(val, src) {
                                this.__imageLoaded(src, true);
                            }, this);
                            this.__onFinished();
                        }
                    }.bind(this), this.__maxLoadTime);
                }

                this.__loadImages(image);
            }
            return result;
        },

        /**
         * Получить объект Deferred, отражающий прогресс загрузки изображений
         * @returns {$.Deferred}
         */
        getDeferred: function() {
            var deferred = $.Deferred();

            if (this.getLoaded()) {
                deferred.resolve();
            }
            else {
                var listener = this.on('imageLoaded', function(image, error, loaded, total) {
                    deferred.notify(image, loaded, total);
                });
                this.once('finished', function() {
                    this.un(listener);
                    deferred.resolve();
                }, this);
            }

            return deferred;
        },

        /**
         * Количество загруженных изображений
         * @returns {number}
         */
        getLoadedCount: function() {
            return this.__loadedCount;
        },

        /**
         * Общее количество изображений
         * @returns {number}
         */
        getTotal: function() {
            return this.__total;
        },

        /**
         * Загружено ли изображение
         * @param {string} src
         * @return {boolean}
         */
        isImageLoaded: function(src) {
            return src in this.__loadedImages;
        },

        /**
         * Добавить в очередь все изображения из документа (html, css-файлы)
         */
        scanDocument: function() {
            var $this = this;
            var imageURLs = [];

            function analyzeStyleSheet(styleSheet) {
                try {
                    if (styleSheet.imports && styleSheet.imports.length > 0) {
                        for (var importIndex = 0; importIndex < styleSheet.imports.length; ++importIndex) {
                            analyzeStyleSheet(styleSheet.imports[importIndex]);
                        }
                    }

                    var baseURL = $this.__getBaseURL(styleSheet.href),
                        cssRules = styleSheet.cssRules || styleSheet.rules;
                    if (!cssRules) {
                        return;
                    }

                    // loop through all CSS rules
                    for (var j = 0; j < cssRules.length; j++) {
                        var cssRule = cssRules[j];
                        if (!styleSheet.imports && cssRule.styleSheet) {
                            analyzeStyleSheet(cssRule.styleSheet);
                        }
                        else if (cssRule.style && cssRule.style.cssText) {
                            // extract only image related CSS rules 
                            // parse rules string and extract image URL
                            var urls = cssRule.style.cssText.match(/[^\(]+\.(gif|jpg|jpeg|png)/g);
                            if (urls) {
                                $.each(urls, function(index, url) {
                                    url = url.replace('"', '');
                                    url = /^(https?:\/)?\//.test(url) ? url : baseURL + url;
                                    imageURLs.push(url);
                                });
                            }
                        }
                    }
                }
                catch (ex) {
                    //игнорируем security error
                }
            }

            for (var i = 0; i < document.styleSheets.length; i++) { // loop through all linked/inline stylesheets
                analyzeStyleSheet(document.styleSheets[i]);
            }

            $('img').each(function() {
                var src = $(this).attr('img');
                if (src) {
                    imageURLs.push(src);
                }
            });

            this.add(imageURLs);
        },

        /**
         * @param cssLink
         * @returns {string}
         * @private
         */
        __getBaseURL: function(cssLink) {
            cssLink = cssLink ? cssLink : 'window.location.href'; // window.location.href for inline style definitions

            var urlParts = cssLink.split('/'); // split link at '/' into an array
            urlParts.pop(); // remove file path from URL array

            var baseURL = urlParts.join('/'); // create base URL (rejoin URL parts)

            if (baseURL !== "") {
                baseURL += '/'; // expand URL with a '/'
            }

            return baseURL;
        },

        /**
         * @param src
         * @param [withError=false]
         * @private
         */
        __imageLoaded: function(src, withError) {
            delete this.__notLoaded[src];
            this.__loadedImages[src] = !withError;
            ++this.__loadedCount;

            this.fireEvent('imageLoaded', src, !!withError, this.__loadedCount, this.__total);
            if (this.__loadedCount === this.__total) {
                this.__onFinished();
            }

            var loadingArr = croc.util.ImagesPreloader.__loadingImages[src];
            if (loadingArr) {
                delete croc.util.ImagesPreloader.__loadingImages[src];
                loadingArr.forEach(function(func) {
                    func(!!withError);
                });

                if (!withError) {
                    croc.util.ImagesPreloader.__loadedImages[src] = true;
                }
            }
        },

        /**
         * @private
         */
        __loadImages: function(images) {
            images.forEach(function(image) {
                var src = typeof image === 'string' ? image : image.src;
                var originalImage = _.isElement(image) && image;
                image = new Image();

                this.__notLoaded[src] = true;

                if (croc.util.ImagesPreloader.__loadedImages[src]) {
                    if (originalImage) {
                        originalImage.$$error = false;
                    }
                    this.__imageLoaded(src);
                    return;
                }

                if (croc.util.ImagesPreloader.__loadingImages[src]) {
                    croc.util.ImagesPreloader.__loadingImages[src].push(function(withError) {
                        if (originalImage) {
                            originalImage.$$error = withError;
                        }
                        this.__imageLoaded(src, withError);
                    }.bind(this));
                    return;
                }

                croc.util.ImagesPreloader.__loadingImages[src] = [];

                this.__loadDisposer.addListener($(image), 'onreadystatechange load error', function(e) {
                    if (originalImage) {
                        originalImage.$$error = e.type === 'error';
                    }
                    this.__imageLoaded(src, e.type === 'error');
                }.bind(this));
                image.src = src;
            }.bind(this));
        },

        /**
         * @private
         */
        __onFinished: function() {
            this.__loadDisposer.disposeAll();
            this.__loadTimeout = null;
            this.__setLoaded(true);
            this.fireEvent('finished');
        }
    }
});

},{}],69:[function(require,module,exports){
(function (global){
//+ignore croc.ui.Widget

croc.define('croc.utils', {
    arr: function(obj) {
        return Array.isArray(obj) ? obj : [obj];
    },
    
    /**
     * Ищет элемент в упорядоченном по возрастанию массиве бинарным методом
     * @param {Array} arr
     * @param {function(*):number} test возвращает:
     * -1 - аргумент меньше искомого элемента,
     * 0 - аргумент является искомым аргументом,
     * 1 - аргумент больше искомого элемента
     * @param {Object} [options]
     * @param {number} [options.firstIndex]
     * @param {number} [options.lastIndex]
     * @param {boolean} [options.returnLeftIndex] если точный индекс не был найден - возвращает наиболее близкий слева
     * @param {boolean} [options.returnRightIndex] если точный индекс не был найден - возвращает наиболее близкий справа
     * к искомому
     * @returns {number}
     */
    arrBinarySearch: function(arr, test, options) {
        if (!options) {
            options = {};
        }
        var firstIndex = options.firstIndex || 0;
        var lastIndex = typeof options.lastIndex === 'number' ? options.lastIndex : arr.length - 1;
        while (firstIndex <= lastIndex) {
            if (firstIndex === lastIndex && (options.returnLeftIndex || options.returnRightIndex)) {
                return firstIndex;
            }
            var index = Math.floor((firstIndex + lastIndex) / 2);
            var testRes = test(arr[index], index);
            if (testRes < 0) {
                if (options.returnLeftIndex) {
                    firstIndex = index;
                    if (lastIndex === firstIndex + 1) {
                        if (test(arr[lastIndex], lastIndex) <= 0) {
                            return lastIndex;
                        }
                        else {
                            return firstIndex;
                        }
                    }
                }
                else {
                    firstIndex = index + 1;
                }
            }
            else if (testRes > 0) {
                lastIndex = options.returnRightIndex ? index : index - 1;
            }
            else {
                return index;
            }
        }
        return -1;
    },
    
    /**
     * Поверхностное сравнение массивов
     * @param {Array} array1
     * @param {Array} array2
     * @returns {boolean}
     */
    arrEqual: function(array1, array2) {
        return _.isEqual(array1, array2, function(a, b) {
            if (a !== array1 || b !== array2) {
                return a === b;
            }
        });
    },

//    /**
//     * Вставить элемент в массив до переданного
//     * @param {Array} arr
//     * @param element
//     * @param [before=undefined]
//     */
//    arrInsertBefore: function(arr, element, before) {
//        var index = before === undefined ? -1 : $.inArray(before, arr);
//        if (index === -1) {
//            arr.push(element);
//        }
//        else {
//            arr.splice(index, 0, element);
//        }
//    },
    
    /**
     * @param arr
     * @param element
     * @returns {boolean}
     */
    arrRemove: function(arr, element) {
        var index = arr.indexOf(element);
        if (index !== -1) {
            arr.splice(index, 1);
            return true;
        }
        return false;
    },

//    /**
//     * Превращает функцию принимающую коллбэк в функцию возвращающую deferred
//     * @param func
//     * @param context
//     * @returns {Function}
//     */
//    deferrize: function(func, context) {
//        return function() {
//            var deferred = $.Deferred();
//            func.apply(context || this, _.toArray(arguments).concat(function() {
//                deferred.resolve.apply(deferred, arguments);
//            }));
//            return deferred;
//        };
//    },
    
    /**
     * присоединяет один deferred к другому, так что состояние одного будет передаваться другому
     * @param {$.Deferred} source
     * @param {$.Deferred} dest
     */
    defConnect: function(source, dest) {
        source.then(function() { dest.resolve.apply(dest, arguments); },
            function() { dest.reject.apply(dest, arguments); },
            function() { dest.notify.apply(dest, arguments); });
    },
    
    /**
     * @returns {$.Deferred}
     */
    defRejectCallback: function(param) {
        return $.Deferred().reject(param);
    },
    
    /**
     * Возвращает результат выполнения неасинхронного deferred. Если он асинхронный, то возбуждается исключение.
     * @param {$.Deferred|*} deferred
     * @return {*}
     */
    defSync: function(deferred) {
        var done = false;
        var result;
        $.when(deferred).done(function(res) {
            done = true;
            result = res;
        });
        if (!done) {
            throw new Error('Передан асинхронный deferred!');
        }
        return result;
    },
    
    /**
     * @param {number} timeout
     * @param {croc.util.Disposer} disposer
     * @returns {$.Deferred}
     */
    defTimeout: function(timeout, disposer) {
        var deferred = $.Deferred();
        (disposer ? disposer.setTimeout : this.__setTimeout)
            .call(disposer || this, deferred.resolve.bind(deferred, arguments), timeout);
        return deferred;
    },
    
    /**
     * Возвращает высоту или ширину скрытого элемента
     * @param {jQuery} el
     * @param {string} dim width|height
     * @param {boolean} [outer=false]
     * @param {boolean} [withMargin=false]
     * @returns {*}
     */
    domCalculateHiddenDim: function(el, dim, outer, withMargin) {
        el.css({position: 'absolute', visibility: 'hidden'});
        var result;
        if (dim === 'height') {
            result = outer ? el.outerHeight(!!withMargin) : el.height();
        }
        else {
            result = outer ? el.outerWidth(!!withMargin) : el.width();
        }
        el.css({position: '', visibility: ''});
        return result;
    },
    
    /**
     * Возвращает значение модификатора либо полный модификатор по js-значению
     * @param value
     * @param {string} [prop]
     * @returns {string}
     */
    domGetCssModifier: function(value, prop) {
        if (prop && prop.indexOf('_') !== -1) {
            return value ? prop : null;
        }
        
        var result = value === true ? 'on' : value === false ? 'off' :
        value && value.replace(/[A-Z]/g, function($0) { return '-' + $0.toLowerCase(); });
        return prop ? prop + '_' + result : result;
    },
    
    /**
     * Получить значение модификатора по его имени
     * @param {jQuery} el
     * @param {string} propName
     * @param {boolean} [fullModifier=false]
     * @returns {string|boolean}
     */
    domGetModifier: function(el, propName, fullModifier) {
        if (propName.indexOf('_') !== -1) {
            return fullModifier ? propName : el.hasClass(propName);
        }
        
        var className = el[0] && el[0].className;
        if (!className) {
            return null;
        }
        var match = className.match(new RegExp('\\b' + propName + '_([\\w\\d\\-]+)'));
        if (match) {
            if (fullModifier) {
                return match[0];
            }
            var result = match[1].replace(/-(\w)/g, function($0, $1) { return $1.toUpperCase(); });
            return result === 'on' ? true : result === 'off' ? false : result;
        }
        return null;
    },
    
    /**
     * Получить openerEl по плавающему элементу
     * @param {jQuery} testEl
     * @param {jQuery} [scope=null]
     * @returns {jQuery}
     */
    domGetOpenerOf: function(testEl, scope) {
        var testOpenerId = testEl.closest('[data-opener-element-id]').attr('data-opener-element-id');
        if (!testOpenerId) {
            return null;
        }
        
        var selector = '[data-element-id="' + testOpenerId + '"]';
        var opener = scope ? (scope.is(selector) ? scope : scope.find(selector + ':eq(0)')) : $(selector + ':eq(0)');
        return opener.length ? opener : null;
    },
    
    /**
     * Плагины элемента
     * @param {jQuery} el
     * @return {Array}
     */
    domGetPlugins: function(el) {
        return el.data('$$plugins') || [];
    },
    
    /**
     * Возвращает индекс начала и конца выделенного текста внутри элемента
     * @param {jQuery} el
     * @returns {{start: number, end: number, length: number}}
     */
    domGetTextSelection: function(el) {
        el = el[0];
        var start = 0, end = 0, normalizedValue, range, textInputRange, len, endRange;
        
        if (typeof el.selectionStart === "number" && typeof el.selectionEnd === "number") {
            start = el.selectionStart;
            end = el.selectionEnd;
        }
        else {
            range = document.selection.createRange();
            
            if (range && range.parentElement() === el) {
                len = el.value.length;
                normalizedValue = el.value.replace(/\r\n/g, "\n");
                
                textInputRange = el.createTextRange();
                textInputRange.moveToBookmark(range.getBookmark());
                endRange = el.createTextRange();
                endRange.collapse(false);
                
                if (textInputRange.compareEndPoints("StartToEnd", endRange) > -1) {
                    start = end = len;
                }
                else {
                    start = -textInputRange.moveStart("character", -len);
                    start += normalizedValue.slice(0, start).split("\n").length - 1;
                    
                    if (textInputRange.compareEndPoints("EndToEnd", endRange) > -1) {
                        end = len;
                    }
                    else {
                        end = -textInputRange.moveEnd("character", -len);
                        end += normalizedValue.slice(0, end).split("\n").length - 1;
                    }
                }
            }
        }
        
        return {
            start: start,
            end: end,
            length: end - start
        };
    },
    
    /**
     * Скрыть dom-элемент
     * @param {jQuery} el
     * @param {string} [cls='g-hidden']
     */
    domHide: function(el, cls) {
        el.addClass(cls || 'g-hidden');
    },
    
    /**
     * Находится ли элемент в рамках экрана браузера
     * @param {jQuery} el
     * @returns {boolean}
     */
    domIsElementOnScreen: function(el) {
        var w = $(window);
        var wScrollTop = w.scrollTop();
        var elOffsetTop = el.offset().top;
        
        return elOffsetTop > wScrollTop && elOffsetTop < wScrollTop + w.height();
    },
    
    /**
     * Есть ли между плавающим элементом testEl и элементом openerEl или одним из его детей связь opener. Также
     * возвращает true если openerEl является одним из родителей testEl или наоборот.
     * @param {jQuery} openerEl
     * @param {jQuery} testEl
     * @param {boolean} [testIsContainer=false]
     * @returns {boolean}
     */
    domIsElementOpenerOf: function(openerEl, testEl, testIsContainer) {
        if (!testIsContainer) {
            testEl = croc.utils.domGetOpenerOf(testEl);
            if (!testEl) {
                return false;
            }
        }
        do {
            if (openerEl.closest(testEl).length || testEl.closest(openerEl).length) {
                return true;
            }
        } while ((testEl = croc.utils.domGetOpenerOf(testEl)));
        return false;
    },
    
    /**
     * Устанавливает связь opener между целью (target) и плавающим элементом
     * @param {jQuery} el
     * @param {jQuery} openerEl
     */
    domLinkElementToOpener: function(el, openerEl) {
        var openerId = openerEl.attr('data-element-id');
        if (!openerId) {
            openerId = croc.utils.getStmId();
            openerEl.attr('data-element-id', openerId);
        }
        
        el.attr('data-opener-element-id', openerId);
    },
    
    /**
     * Вызывать callback при скроллинге окна и оверлэя - родителя элемента либо его opener'а
     * @param {jQuery} target
     * @param {Function} callback
     * @param [context]
     */
    domListenScrolling: function(target, callback, context) {
        var scrollElements = $(window);
        if (context) {
            callback = callback.bind(context);
        }
        
        if (target) {
            var openerEl = target;
            //noinspection JSHint
            do {
                scrollElements = scrollElements.add(openerEl.parents('.g-scrollable,.b-overlay'));
            } while (openerEl = croc.utils.domGetOpenerOf(openerEl));
        }
        
        scrollElements.scroll(callback);
        return scrollElements.off.bind(scrollElements, 'scroll', callback);
    },
    
    /**
     * Возвращает значение css-свойства, преобразуя его к числовому формату
     * @param {jQuery} el
     * @param {string} prop
     * @returns {number}
     */
    domNumericCss: function(el, prop) {
        var result = parseFloat(el.css(prop));
        return isNaN(result) ? 0 : result;
    },
    
    /**
     * Установить каретку в нужную позицию элемента
     * @param {jQuery} el
     * @param {number} pos
     */
    domSetCaretPos: function(el, pos) {
        var element = el[0];
        if (element.setSelectionRange) {
            element.setSelectionRange(pos, pos);
        }
        else if (element.createTextRange) {
            var range = element.createTextRange();
            range.collapse(true);
            range.moveEnd('character', pos);
            range.moveStart('character', pos);
            range.select();
        }
    },
    
    /**
     * Изменить значение модификатора по его имени
     * @param {jQuery} el
     * @param {string} propName
     * @param value
     */
    domSetModifier: function(el, propName, value) {
        if (propName.indexOf('_') !== -1) {
            el.toggleClass(propName, !!value);
        }
        else {
            var oldClass = this.domGetModifier(el, propName, true);
            if (oldClass) {
                el.removeClass(oldClass);
            }
            
            if (typeof value === 'boolean') {
                value = value ? 'on' : 'off';
            }
            if (value) {
                el.addClass(propName + '_' + value);
            }
        }
    },
    
    /**
     * Показать dom-элемент
     * @param {jQuery} el
     * @param {boolean} [propagateAppear=false]
     * @param {string} [cls='g-hidden']
     */
    domShow: function(el, propagateAppear, cls) {
        var toShow;
        if (propagateAppear) {
            toShow = el.find('.js-widget');
            if (el.hasClass('js-widget')) {
                toShow = toShow.add(el);
            }
            toShow = toShow.not(':visible');
        }
        el.removeClass(cls || 'g-hidden');
        if (propagateAppear) {
            toShow.each(function() {
                var widget = croc.ui.Widget.getByElement(this);
                if (widget.hasListeners('appear') && widget.isVisible()) {
                    widget.fireEvent('appear');
                }
            });
        }
    },
    
    /**
     * Отслеживание клика по элементу (не срабатывает если место отпускания кнопки мыши отстоит далеко от места
     * нажатия кнопки)
     * @param {jQuery} el
     * @param {function(jQuery.Event, jQuery)} callback
     * @param [context=null]
     * @returns {function}
     */
    domStableClick: function(el, callback, context) {
        var startX;
        var startY;
        var cancel;
        var listeners = {
            mousedown: function(e) {
                cancel = false;
                startX = e.pageX;
                startY = e.pageY;
            },
            mouseup: function(e) {
                var dX = e.pageX - startX;
                var dY = e.pageY - startY;
                if (e.which === 1 && !cancel && Math.sqrt(dX * dX + dY * dY) < 10) {
                    callback.call(context || window, e, el);
                }
            },
            mouseleave: function(e) {
                cancel = true;
            }
        };
        
        el.on(listeners);
        return el.off.bind(el, listeners);
    },
    
    /**
     * Изменить видимость dom-элемента
     * @param {jQuery} el
     * @param {boolean} [value]
     * @param {boolean} [propagateAppear=false]
     * @param {string} [cls='g-hidden']
     */
    domToggle: function(el, value, propagateAppear, cls) {
        if (value || value === undefined && el.hasClass(cls || 'g-hidden')) {
            croc.utils.domShow(el, propagateAppear, cls);
        }
        else {
            croc.utils.domHide(el, cls);
        }
    },

//    /**
//     * Конвертировать событие объекта в Deferred
//     * @param source
//     * @param eventType
//     * @returns {$.Deferred}
//     */
//    eventToDeferred: function(source, eventType) {
//        var def = $.Deferred();
//        source.on(eventType, function() {
//            def.resolve.apply(def, arguments);
//        });
//
//        return def;
//    },
    
    /**
     * Возвращает функцию, вызов которой блокирует все дальнейшие вызовы пока не будет вызвана функция free
     * @param {function(Function)} callback
     * @param [context]
     */
    fnMutex: function(callback, context) {
        var enabled = true;
        var locked = false;
        
        function free(lock) {
            if (lock === croc.utils.fnMutex.lock) {
                locked = true;
            }
            enabled = true;
        }
        
        return function() {
            if (enabled && !locked) {
                enabled = false;
                callback.apply(context || this, [free].concat(_.toArray(arguments)));
                return true;
            }
            return false;
        };
    },
    
    /**
     * Работает подобно Function.prototype.bind, но при этом передаёт в новую функцию изначальный контекст первым
     * аргументом.
     * @param {Function} fn
     * @param [context]
     * @returns {Function}
     */
    fnRetentiveBind: function(fn, context) {
        return function() {
            fn.apply(context || this, [this].concat(_.toArray(arguments)));
        };
    },
    
    fnSmartDebounce: function(fn, wait) {
        var timeout;
        return function() {
            if (timeout) {
                clearTimeout(timeout);
            }
            var args = arguments;
            timeout = setTimeout(function() {
                fn.apply(global, args);
            }, wait.apply(global, args));
        }
    },
    
    /**
     * @param obj
     * @param property
     * @param callback
     */
    forChain: function(obj, property, callback) {
        if (obj) {
            do {
                var result = callback(obj);
                if (result !== undefined) {
                    return result;
                }
            } while (obj = obj[property]);
        }
    },
    
    /**
     * @returns {string}
     */
    getStmId: function() {
        return _.uniqueId('stm-');
    },
    
    /**
     * Возвращает z-index для блока находящегося на одном из слоёв: page, fixed, popup
     * @param {string} [layer='popup']
     * @returns {number}
     */
    getZIndex: function(layer) {
        if (!this.__zIndex) {
            this.__zIndex = {
                page: 8000,
                fixed: 9000,
                popup: 10000
            };
        }
        return ++this.__zIndex[layer || 'popup'];
    },
    
    /**
     * @param num
     * @param [decimal=0]
     * @param [separator=' ']
     * @param [forceDecimal=true]
     * @returns {Number}
     */
    numFormat: function(num, decimal, separator, forceDecimal) {
        decimal = (typeof(decimal) !== 'undefined') ? decimal : 0;
        separator = (typeof(separator) !== 'undefined') ? separator : ' ';
        var r = parseFloat(num);
        var exp10 = Math.pow(10, decimal);
        r = Math.round(r * exp10) / exp10;
        var rr = Number(r).toFixed(decimal).toString().split('.');
        if (forceDecimal !== undefined && !forceDecimal && decimal > 0) {
            rr[1] = rr[1].replace(/0+$/, '');
        }
        var b = rr[0].replace(/(\d{1,3}(?=(\d{3})+(?:\.\d|\b)))/g, "$1" + separator);
        r = b + (rr[1] ? '.' + rr[1] : '');
        
        return r;
    },
    
    /**
     * Форматирование числа
     * @param {number|string} num
     */
    numMoneyFormat: function(num) {
        if (typeof num === 'string') {
            num = parseFloat(num);
        }
        return croc.utils.numFormat(num, Math.floor(num) === num ? 0 : 2);
    },
    
    /**
     * Если num выходит за пределы отрезка [a, b], то возвращает a или b (в зависимости от того где по отношению к
     * отрезку лежит num) иначе возвращает num
     * @param {number} num
     * @param {number} [a]
     * @param {number} [b]
     * @return {number}
     */
    numToRange: function(num, a, b) {
        var min;
        var max;
        
        if (typeof a === 'number' && typeof b === 'number') {
            min = Math.min(a, b);
            max = Math.max(a, b);
        }
        else if (typeof a === 'number') {
            min = a;
        }
        else if (typeof b === 'number') {
            max = b;
        }
        
        if (min !== undefined) {
            num = Math.max(min, num);
        }
        if (max !== undefined) {
            num = Math.min(max, num);
        }
        
        return num;
    },
    
    /**
     * Доступ к данным внутри объекта по переданному пути
     * @param {Object|string} [obj=window] объект, к которому производится доступ
     * @param {string|number} [path] путь до требуемых данных (например, "foo.bar" для доступа к obj.foo.bar)
     * @param {number|*} [action=croc.utils.objAccess.getVar] тип доступа:
     * croc.utils.objAccess.getVar - получение данных (если данные отсутствуют возвращается undefined)
     * croc.utils.objAccess.setVar - присвоить полю данные data, при этом если какая-то чать пути отсутствует, то она создаётся как пустой объект
     * croc.utils.objAccess.setVarIfNotExists - присвоить полю данные data, если оно отсутствует, при этом если какая-то чать пути отсутствует, то она создаётся как пустой объект
     * croc.utils.objAccess.deleteVar - удалить поле по указанному пути
     * @param {*} [data=null] данные, которые нужно назначить, если action равно getVar или setVar
     * @return {*}
     */
    objAccess: function(obj, path, action, data) {
        if (typeof obj === "string") {
            data = action;
            action = path;
            path = obj;
            obj = global;
        }
        if (action && typeof action !== 'number' && !data) {
            data = action;
            action = croc.utils.objAccess.setVar;
        }
        else {
            if (!action) {
                action = croc.utils.objAccess.getVar;
            }
            if (!data) {
                data = {};
            }
        }
        
        path = path.split(".");
        
        for (var i = 0, length = path.length; i < length; ++i) {
            var chunk = path[i];
            
            if (i === length - 1) {
                var old = obj[chunk];
                switch (action) {
                    case croc.utils.objAccess.getVar:
                        return obj[chunk];
                    case croc.utils.objAccess.setVar:
                        obj[chunk] = data;
                        return old;
                    case croc.utils.objAccess.setVarIfNotExists:
                        if (old === undefined) {
                            obj[chunk] = data;
                        }
                        return obj[chunk];
                    case croc.utils.objAccess.deleteVar:
                        delete obj[chunk];
                        return old;
                }
            }
            else if (obj[chunk] === undefined) {
                if (action === croc.utils.objAccess.setVar || action === croc.utils.objAccess.setVarIfNotExists) {
                    obj[chunk] = {};
                }
                else {
                    return undefined;
                }
            }
            
            obj = obj[chunk];
        }
    },
    
    /**
     * Возвращает глубокую копию объекта без системных данных (ключи начинаются с $$)
     * @param obj
     * @returns {*}
     */
    objCloneWithoutSystemData: function(obj) {
        if (Array.isArray(obj)) {
            return obj.map(function(x) {
                return croc.utils.objCloneWithoutSystemData(x);
            });
        }
        else if (_.isPlainObject(obj)) {
            var objClone = {};
            for (var key in obj) {
                if ((key[0] !== '$' || key[1] !== '$') && obj.hasOwnProperty(key)) {
                    objClone[key] = croc.utils.objCloneWithoutSystemData(obj[key]);
                }
            }
            return objClone;
        }
        else {
            return obj;
        }
    },
    
    /**
     * Являются ли два объекта идентичными. Не учитывает ключи, которые начинаются на $$.
     * @param {Object} obj1
     * @param {Object} obj2
     * @returns {boolean}
     */
    objEqual: function(obj1, obj2) {
        if (!_.isPlainObject(obj1) || !_.isPlainObject(obj2)) {
            return obj1 === obj2;
        }
        
        function filter(x) {
            return x[0] !== '$' || x[1] !== '$';
        }
        
        var keys = Object.keys(obj1).filter(filter);
        if (!_.isEqual(keys, Object.keys(obj2).filter(filter))) {
            return false;
        }
        
        return keys.every(function(key) { return obj1[key] === obj2[key]; });
    },
    
    /**
     * @param obj
     * @param {*|function(*):boolean} target
     * @param iterator
     * @param path
     * @returns {*}
     */
    objFindPath: function(obj, target, iterator, path) {
        if (typeof target === 'function' ? target(obj) : obj === target) {
            if (iterator) {
                iterator(obj, path, true);
            }
            return path;
        }
        if (Array.isArray(obj) || _.isPlainObject(obj)) {
            for (var key in obj) {
                if (obj.hasOwnProperty(key)) {
                    var result = this.objFindPath(obj[key], target, iterator, (path ? path + '.' : '') + key);
                    if (result !== null) {
                        if (iterator) {
                            iterator(obj, path || '');
                        }
                        return result;
                    }
                }
            }
        }
        return null;
    },
    
    /**
     * Является ли part подмножеством object
     * @param {Object|Array} object
     * @param {Object|Array} part
     * @returns {boolean}
     */
    objIncludes: function(object, part) {
        return Object.keys(part).every(function(key) {
            var a = object[key];
            var b = part[key];
            return a === b ||
                (a && b && typeof a === 'object' && typeof b === 'object' && croc.utils.objIncludes(a, b));
        });
    },
    
    /**
     * Удаляет хранилище возвращённое методом {@link #getUserData}
     * @param {Object} owner
     * @param {Object|jQuery} [object]
     */
    objRemoveUserData: function(owner, object) {
        if (!object) {
            object = owner;
        }
        
        var sharedStore;
        if (object instanceof jQuery) {
            sharedStore = object.data('$$sharedStore');
            if (!sharedStore) {
                object.data('$$sharedStore', sharedStore = {});
            }
        }
        else {
            sharedStore = object.$$sharedStore || (object.$$sharedStore = {});
        }
        
        var storeKey = '$$owner-' + croc.utils.objUniqueId(owner);
        delete sharedStore[storeKey];
    },
    
    /**
     * Сопоставляет объекту или массиву уникальный строковый ключ
     *
     * @param {Object|Array} object
     * @param {Boolean} [asJSON=true]
     */
    objToKey: function(object, asJSON) {
        var result;
        if (Array.isArray(object)) {
            result = object.map(function(item) {
                return croc.utils.objToKey(item, false);
            });
        }
        else if (_.isPlainObject(object)) {
            result = [];
            _.forOwn(object, function(value, key) {
                if (key[0] === '$' && key[1] === '$') {
                    return;
                }
                result.push([key, croc.utils.objToKey(value, false)]);
            });
            
            result.sort(function(a, b) {return a[0].localeCompare(b[0]);});
            result.unshift("__objectequiv__");
        }
        else {
            result = object;
        }
        
        return asJSON === undefined || asJSON ? JSON.stringify(result) : result;
    },
    
    /**
     * Возвращает объект уникальный для переданного владельца и объекта-хранителя
     * @param {Object} owner
     * @param {Object|jQuery} [object]
     * @returns {Object}
     */
    objUserData: function(owner, object) {
        if (!object) {
            object = owner;
        }
        
        var sharedStore;
        if (object instanceof jQuery) {
            sharedStore = object.data('$$sharedStore');
            if (!sharedStore) {
                object.data('$$sharedStore', sharedStore = {});
            }
        }
        else {
            sharedStore = object.$$sharedStore || (object.$$sharedStore = {});
        }
        
        var storeKey = '$$owner-' + croc.utils.objUniqueId(owner);
        return sharedStore[storeKey] || (sharedStore[storeKey] = {});
    },
    
    /**
     * Получить уникальный идентификатор любого javascript объекта
     * @param {Object|jQuery} object
     * @return {Number}
     */
    objUniqueId: function(object) {
        if (object.$$uniqueId) {
            return object.$$uniqueId;
        }
        
        if (typeof jQuery !== 'undefined' && object instanceof jQuery) {
            var id = object.data('$$uniqueId');
            if (!id) {
                object.data('$$uniqueId', id = _.uniqueId());
            }
            return id;
        }
        return object.$$uniqueId = _.uniqueId();
    },
    
    /**
     * Массив значений объекта. Пропускает поля с ключами, которые начинаются на $$.
     * @param {Object} object
     * @returns {Array}
     */
    objValues: function(object) {
        var values = [];
        _.forOwn(object, function(value, key) {
            if (key[0] !== '$' || key[1] !== '$') {
                values.push(value);
            }
        });
        return values;
    },
    
    /**
     * Сбросить zIndex на первоначальные значения
     */
    resetZIndex: function() {
        this.__zIndex = null;
    },
    
    /**
     * @returns {number}
     */
    scrollbarWidth: function() {
        if (!this.__scrollBarWidth) {
            var div = $('<div style="width:50px;height:50px;overflow:auto;position:absolute;top:-200px;left:-200px;">');
            // Append our div, do our calculation and then remove it 
            $('body').append(div);
            var w1 = div.innerWidth();
            var w2 = div.append('<div style="height:100px;width:100%;">').find('div').innerWidth();
            $(div).remove();
            this.__scrollBarWidth = (w1 - w2);
        }
        return this.__scrollBarWidth;
    },
    
    /**
     * Переводит dasher и underscore строку в camel (one-two или one_two в oneTwo)
     * @param {string} str
     * @returns {string}
     */
    strCamelize: function(str) {
        return str.replace(/(?:_|\-)+(\w)/g, function(match, letter) {
            return letter.toUpperCase();
        });
    },
    
    /**
     * @param {string} str
     * @returns {string}
     */
    strCapitalize: function(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    },
    
    /**
     * Переводит camel и underscore строку в dasher (one-two или one_two в oneTwo)
     * @param {string} str
     * @returns {string}
     */
    strDasherize: function(str) {
        str = str.replace(/_+/g, '-').replace(/[A-ZА-ЯЁ]/g, function(match) {
            return '-' + match.toLowerCase();
        }).replace(/-+/g, '-');
        return str[0] === '-' ? str.substr(1) : str;
    },
    
    /**
     * @param {string} str
     * @returns {string}
     */
    strEscapeHtml: (function() {
        var chr = {
            '"': '&quot;', '&': '&amp;', "'": '&#39;',
            '/': '&#47;', '<': '&lt;', '>': '&gt;'
        };
        return function(text) {
            return text.replace(/["&'\/<>]/g, function(a) { return chr[a]; });
        };
    }()),
    
    /**
     * Экранирует специальные символы регулярных выражений
     * @param {string} str
     * @returns {string}
     */
    strEscapeRegexp: function(str) {
        return (str + '').replace(/([.?*+\^$\[\]\\(){}|\-])/g, "\\$1");
    },
    
    /**
     * @param count
     * @param one
     * @param two
     * @param many
     * @returns {*}
     */
    strInflect: function(count, one, two, many) {
        var tail = count % 100;
        if (tail > 20 || tail < 5) {
            switch (tail % 10) {
                case 1 :
                    many = one;
                    break;
                case 2 :
                case 3 :
                case 4 :
                    many = two;
            }
        }
        return many;
    },
    
    strPluralize: function(str) {
        var lastChar = str[str.length - 1];
        if (lastChar === 'y') {
            return str.slice(0, -1) + 'ies';
        }
        else if (lastChar === 's') {
            return str + 'es';
        }
        else {
            return str + 's';
        }
    },

//    /**
//     * @param str
//     * @returns {string}
//     */
//    stripTags: function(str) {
//        return str.replace(/(<([^>]+)>)/ig, '');
//    },
    
    /**
     * Выделяет вхождения подстроки с <b></b>
     * @param {string} str
     * @param {string} substr
     * @param {string} [wrapper='<b>{content}</b>']
     */
    strHighlightSubstring: function(str, substr, wrapper) {
        if (!substr || !str) {
            return str;
        }
        
        var regexpString = croc.utils.strEscapeRegexp(substr).replace(/[йи]/ig, "[йи]").replace(/[ёе]/ig, "[ёе]");
        var regexp = new RegExp('^([^<>]*?(?:<[^<>]*?>[^<>]*?)*?)(' + regexpString + ')', 'i');
        return str.replace(regexp, function(match, before, substr) {
            return before + (wrapper || '<b>{content}</b>').render({content: substr});
        });
    },
    
    /**
     * @param {string} str
     * @returns {string}
     */
    strNl2br: function(str) {
        return str.replace(/([^>])\n/g, '$1<br/>');
    },
    
    /**
     * Дополняет строку нулями (или любым другим переданным символом) слева до необходимой длинны
     * @param {String|*} str
     * @param {Number} length
     * @param {String} [chr='0']
     * @returns {string}
     */
    strPad: function(str, length, chr) {
        str = str.toString();
        if (!chr) { chr = '0'; }
        while (str.length < length) {
            str = chr + str;
        }
        return str;
    },
    
    /**
     * Возвращает дату в виде строки "Y-m-d"
     * @param {Object<Date>} date
     * @returns {string}
     */
    strYmdDate: function(date) {
        return date.getFullYear() + '-' + this.strPad(date.getMonth() + 1, 2) + '-' + this.strPad(date.getDate(), 2);
    },
    
    /**
     * Изменяет регистр первой буквы слова на верхний
     * @param {string} str
     * @returns {string}
     */
    strUcFirst: function(str) {
        return str && (str[0].toUpperCase() + str.substr(1));
    }

//    toTitleCase: function(str) {
//        return str.replace(/\w\S*/g, function(txt) {
//            return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
//        });
//    },
});

_.assign(croc.utils.objAccess, {
    getVar: 1,
    setVar: 2,
    setVarIfNotExists: 3,
    deleteVar: 4
});


/**
 * monkey patching!
 */
if (croc.isClient) {
    document.write = function(html) { // jshint ignore:line
        $('body').append(html);
    };
}

String.prototype.render = function(obj) {
    return this.replace(
        /{([^{}]*)}/g,
        function(a, b) {
            var r = obj[b] || croc.utils.objAccess(obj, b);
            return typeof r === 'string' || typeof r === 'number' ? r : a;
        }
    );
};

croc.utils.fnMutex.lock = {};
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}]},{},[18,14,69,9,5,8,15,11,7,67,16,6,12,17,23,26,66,19,13,21,25,20,10,22,24,27,29,32,33,55,56,58,60,68,30,59,63,62,57,42,47,49,61,28,41,43,44,46,48,65,31,35,36,40,45,52,64,34,37,38,50,53,54,39,51])
//# sourceMappingURL=data:application/json;base64,
